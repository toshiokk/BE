kdiff3 ../old/be/appdefs.h appdefs.h #========================
kdiff3 ../old/be/appmode.h appmode.h #========================
kdiff3 ../old/be/buffer.h buffer.h #========================
kdiff3 ../old/be/buffers.h buffers.h #========================
kdiff3 ../old/be/color.h color.h #========================
kdiff3 ../old/be/cursesif.h cursesif.h #========================
kdiff3 ../old/be/debug.h debug.h #========================
kdiff3 ../old/be/disp.h disp.h #========================
kdiff3 ../old/be/editor.h editor.h #========================
kdiff3 ../old/be/editor2.h editor2.h #========================
kdiff3 ../old/be/editor3.h editor3.h #========================
kdiff3 ../old/be/editorcut.h editorcut.h #========================
kdiff3 ../old/be/editorcut2.h editorcut2.h #========================
kdiff3 ../old/be/editorgoto.h editorgoto.h #========================
kdiff3 ../old/be/editorkeys.h editorkeys.h #========================
kdiff3 ../old/be/editorlist.h editorlist.h #========================
kdiff3 ../old/be/editormove.h editormove.h #========================
/**************************************************************************                           /**************************************************************************
 *   editormove.h                                                         *                            *   editormove.h                                                         *
 *                                                                        *                            *                                                                        *
 *   Copyright (C) 2000-2003 Chris Allegretta                             *                            *   Copyright (C) 2000-2003 Chris Allegretta                             *
 *                                                                        *                            *                                                                        *
 *   This program is free software; you can redistribute it and/or modify *                            *   This program is free software; you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published by *                            *   it under the terms of the GNU General Public License as published by *
 *   the Free Software Foundation; either version 2, or (at your option)  *                            *   the Free Software Foundation; either version 2, or (at your option)  *
 *   any later version.                                                   *                            *   any later version.                                                   *
 *                                                                        *                            *                                                                        *
 *   This program is distributed in the hope that it will be useful,      *                            *   This program is distributed in the hope that it will be useful,      *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *                            *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *                            *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 *   GNU General Public License for more details.                         *                            *   GNU General Public License for more details.                         *
 *                                                                        *                            *                                                                        *
 *   You should have received a copy of the GNU General Public License    *                            *   You should have received a copy of the GNU General Public License    *
 *   along with this program; if not, write to the Free Software          *                            *   along with this program; if not, write to the Free Software          *
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *                            *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *
 *                                                                        *                            *                                                                        *
 **************************************************************************/                           **************************************************************************/

#ifndef editormove_h                                                                                  #ifndef editormove_h
#define editormove_h                                                                                  #define editormove_h

typedef enum {                                                                                        typedef enum {
    EBS_NONE,                                                                                             EBS_NONE,
    EBS_UP_AT_TOP,          // cursor UP requested at top of buffer                                       EBS_UP_AT_TOP,          // cursor UP requested at top of buffer
    EBS_PAGEUP_AT_TOP,      // page   UP requested at top of buffer                                       EBS_PAGEUP_AT_TOP,      // page   UP requested at top of buffer
    EBS_DOWN_AT_BOTTOM,     // cursor down requested at bottom of buffer                                  EBS_DOWN_AT_BOTTOM,     // cursor down requested at bottom of buffer
    EBS_PAGEDOWN_AT_BOTTOM, // page   down requested at bottom of buffer                                  EBS_PAGEDOWN_AT_BOTTOM, // page   down requested at bottom of buffer
} easy_buffer_switching_t;                                                                            } easy_buffer_switching_t;
void clear_easy_buffer_switching();                                                                   void clear_easy_buffer_switching();
void count_easy_buffer_switching();                                                                   void count_easy_buffer_switching();
int check_easy_buffer_switching(easy_buffer_switching_t top_bottom);                                  int check_easy_buffer_switching(easy_buffer_switching_t top_bottom);

int doe_left(void);                                                                                   int doe_left(void);
int doe_right(void);                                                                                  int doe_right(void);

int doe_start_of_line(void);                                                                          int doe_start_of_line(void);
int doe_end_of_line(void);                                                                            int doe_end_of_line(void);

int doe_up(void);                                                                                     int doe_up(void);
int doe_down(void);                                                                                   int doe_down(void);
int doe_page_up(void);                                                                                int doe_page_up(void);
int doe_page_down(void);                                                                              int doe_page_down(void);

int doe_prev_word(void);                                                                              int doe_prev_word(void);
int doe_next_word(void);                                                                              int doe_next_word(void);
int doe_first_line(void);                                                                             int doe_first_line(void);
int doe_last_line(void);                                                                              int doe_last_line(void);
int doe_control_code(void);                                                                           int doe_control_code(void);
int doe_charcode(void);                                                                               int doe_charcode(void);
int doe_paste_from_history(void);                                                                     int doe_paste_from_history(void);

int doe_tab(void);                                                                                    int doe_tab(void);
int doe_enter_char(char chr);                                                                         int doe_enter_char(char chr);
int doe_enter_char_send(void);                                                                        int doe_enter_char_send(void);
int doe_carriage_return(void);                                                                        int doe_carriage_return(void);
                                                                                                   >  int doe_backspace_limited(void);
int doe_backspace(void);                                                                              int doe_backspace(void);
int doe_delete_char(void);                                                                            int doe_delete_char(void);
int doe_conv_upp_low_letter(void);                                                                    int doe_conv_upp_low_letter(void);

int doe_refresh_editor(void);                                                                         int doe_refresh_editor(void);

int move_cursor_left(int move_disp_y);                                                                int move_cursor_left(int move_disp_y);
int move_cursor_right(void);                                                                          int move_cursor_right(void);

int c_l_up(be_line_t **line, int *byte_idx);                                                          int c_l_up(be_line_t **line, int *byte_idx);
int c_l_down(be_line_t **line, int *byte_idx);                                                        int c_l_down(be_line_t **line, int *byte_idx);
int cursor_next_line(void);                                                                           int cursor_next_line(void);
int first_line(void);                                                                                 int first_line(void);
int last_line(void);                                                                                  int last_line(void);

#endif // editormove_h                                                                                #endif // editormove_h

// End of editormove.h                                                                                // End of editormove.h
kdiff3 ../old/be/editormove2.h editormove2.h #========================
kdiff3 ../old/be/editorundo.h editorundo.h #========================
kdiff3 ../old/be/fileio.h fileio.h #========================
kdiff3 ../old/be/filer.h filer.h #========================
kdiff3 ../old/be/filer2.h filer2.h #========================
kdiff3 ../old/be/filercmd.h filercmd.h #========================
kdiff3 ../old/be/filerkeys.h filerkeys.h #========================
kdiff3 ../old/be/filerrun.h filerrun.h #========================
kdiff3 ../old/be/headers.h headers.h #========================
kdiff3 ../old/be/history.h history.h #========================
kdiff3 ../old/be/keymacro.h keymacro.h #========================
kdiff3 ../old/be/keys.h keys.h #========================
kdiff3 ../old/be/line.h line.h #========================
kdiff3 ../old/be/linewrap.h linewrap.h #========================
kdiff3 ../old/be/main.h main.h #========================
kdiff3 ../old/be/myutf8.h myutf8.h #========================
kdiff3 ../old/be/rcfile.h rcfile.h #========================
kdiff3 ../old/be/regexp.h regexp.h #========================
kdiff3 ../old/be/search.h search.h #========================
kdiff3 ../old/be/sig.h sig.h #========================
kdiff3 ../old/be/stdincs.h stdincs.h #========================
kdiff3 ../old/be/termif.h termif.h #========================
kdiff3 ../old/be/tio.h tio.h #========================
kdiff3 ../old/be/utf8.h utf8.h #========================
kdiff3 ../old/be/utilincs.h utilincs.h #========================
kdiff3 ../old/be/utilpath.h utilpath.h #========================
kdiff3 ../old/be/utils.h utils.h #========================
kdiff3 ../old/be/utilstr.h utilstr.h #========================
kdiff3 ../old/be/winin.h winin.h #========================
kdiff3 ../old/be/winout.h winout.h #========================
kdiff3 ../old/be/appmode.c appmode.c #========================
kdiff3 ../old/be/buffer.c buffer.c #========================
/**************************************************************************                           /**************************************************************************
 *   buffer.c                                                             *                            *   buffer.c                                                             *
 *                                                                        *                            *                                                                        *
 *   Copyright (C) 1999-2003 Chris Allegretta                             *                            *   Copyright (C) 1999-2003 Chris Allegretta                             *
 *                                                                        *                            *                                                                        *
 *   This program is free software; you can redistribute it and/or modify *                            *   This program is free software; you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published by *                            *   it under the terms of the GNU General Public License as published by *
 *   the Free Software Foundation; either version 2, or (at your option)  *                            *   the Free Software Foundation; either version 2, or (at your option)  *
 *   any later version.                                                   *                            *   any later version.                                                   *
 *                                                                        *                            *                                                                        *
 *   This program is distributed in the hope that it will be useful,      *                            *   This program is distributed in the hope that it will be useful,      *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *                            *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *                            *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 *   GNU General Public License for more details.                         *                            *   GNU General Public License for more details.                         *
 *                                                                        *                            *                                                                        *
 *   You should have received a copy of the GNU General Public License    *                            *   You should have received a copy of the GNU General Public License    *
 *   along with this program; if not, write to the Free Software          *                            *   along with this program; if not, write to the Free Software          *
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *                            *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *
 *                                                                        *                            *                                                                        *
 **************************************************************************/                           **************************************************************************/

#include "headers.h"                                                                                  #include "headers.h"

// be_buf_t manipulation routines ==========================================                          // be_buf_t manipulation routines ==========================================
// (common to edit-buffer, cut-buffer, undo-redo-buffer and history)                                  // (common to edit-buffer, cut-buffer, undo-redo-buffer and history)

// Create a new buffer be_buf_t                                                                       // Create a new buffer be_buf_t
be_buf_t *buf_create_node(const char *full_path)                                                      be_buf_t *buf_create_node(const char *full_path)
{                                                                                                     {
    _mlc_set_caller                                                                                       _mlc_set_caller
    be_buf_t *buf = (be_buf_t *)malloc__(sizeof(be_buf_t));                                               be_buf_t *buf = (be_buf_t *)malloc__(sizeof(be_buf_t));
    return buf_init(buf, full_path);                                                                      return buf_init(buf, full_path);
}                                                                                                     }
// Free a buffer be_buf_t                                                                             // Free a buffer be_buf_t
be_buf_t *buf_free_node(be_buf_t *buf)                                                                be_buf_t *buf_free_node(be_buf_t *buf)
{                                                                                                     {
    be_buf_t *next = NODE_NEXT(buf);                                                                      be_buf_t *next = NODE_NEXT(buf);
    buf_free_lines(buf);                                                                                  buf_free_lines(buf);
    free__(buf);                                                                                          free__(buf);
    return next;                                                                                          return next;
}                                                                                                     }

// initialize be_buf_t members                                                                        // initialize be_buf_t members
be_buf_t *buf_init(be_buf_t *buf, const char *full_path)                                              be_buf_t *buf_init(be_buf_t *buf, const char *full_path)
{                                                                                                     {
    memset(buf, 0x00, sizeof(*buf));                                                                      memset(buf, 0x00, sizeof(*buf));

    buf_clear_link(buf);                                                                                  buf_clear_link(buf);
    buf_set_file_abs_path(buf, full_path);                                                                buf_set_file_abs_path(buf, full_path);
    buf->orig_file_stat.st_uid = geteuid();                                                               buf->orig_file_stat.st_uid = geteuid();
    buf->orig_file_stat.st_gid = getegid();                                                               buf->orig_file_stat.st_gid = getegid();
    buf->orig_file_stat.st_mode = RW0RW0R00;        // regular file rw-rw-r--(664)                        buf->orig_file_stat.st_mode = RW0RW0R00;        // regular file rw-rw-r--(664)
    buf->orig_file_stat.st_mtime = time(NULL);      // time file was created                              buf->orig_file_stat.st_mtime = time(NULL);      // time file was created
    buf->orig_file_crc = 0;                                                                               buf->orig_file_crc = 0;

    buf_init_line_anchors(buf, buf->file_path);                                                           buf_init_line_anchors(buf, buf->file_path);

    buf_view_init(&(buf->buf_views[0]), buf);                                                             buf_view_init(&(buf->buf_views[0]), buf);
    buf_view_init(&(buf->buf_views[1]), buf);                                                             buf_view_init(&(buf->buf_views[1]), buf);

    ////buf->mark_line = BUF_TOP_ANCH(buf);                                                        <
    buf->mark_line = BUF_BOT_ANCH(buf);                                                                   buf->mark_line = BUF_BOT_ANCH(buf);
    buf->mark_line_byte_idx = 0;                                                                          buf->mark_line_byte_idx = 0;
    buf->buf_lines = 0;                                                                                   buf->buf_lines = 0;
    buf->buf_size = 0;                                                                                    buf->buf_size = 0;
    return buf;                                                                                           return buf;
}                                                                                                     }
void buf_view_init(be_buf_view_t *b_v, be_buf_t *buf)                                                 void buf_view_init(be_buf_view_t *b_v, be_buf_t *buf)
{                                                                                                     {
    ////BUFV_CL(b_v) = BUF_TOP_ANCH(buf);                                                          <
    BUFV_CL(b_v) = BUF_BOT_ANCH(buf);                                                                     BUFV_CL(b_v) = BUF_BOT_ANCH(buf);
    BUFV_CLBI(b_v) = 0;                                                                                   BUFV_CLBI(b_v) = 0;
    BUFV_CURSOR_Y(b_v) = 0;                                                                               BUFV_CURSOR_Y(b_v) = 0;
    BUFV_CURSOR_X_TO_KEEP(b_v) = 0;                                                                       BUFV_CURSOR_X_TO_KEEP(b_v) = 0;
    BUFV_MIN_TEXT_X_TO_KEEP(b_v) = 0;                                                                     BUFV_MIN_TEXT_X_TO_KEEP(b_v) = 0;
}                                                                                                     }
void buf_set_view_x_cur_line(be_buf_t *buf, int pane_idx, be_line_t *line)                            void buf_set_view_x_cur_line(be_buf_t *buf, int pane_idx, be_line_t *line)
{                                                                                                     {
#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
    if (buf_check_line_in_buf(buf, line) == 0) {                                                          if (buf_check_line_in_buf(buf, line) == 0) {
        warning_printf("line:[%s] is not in buf[%s] !!!!\n", line->data, buf->file_path);                     warning_printf("line:[%s] is not in buf[%s] !!!!\n", line->data, buf->file_path);
    }                                                                                                     }
#endif // ENABLE_DEBUG                                                                                #endif // ENABLE_DEBUG
    BUFVX_CL(buf, pane_idx) = line;                                                                       BUFVX_CL(buf, pane_idx) = line;
}                                                                                                     }

be_buf_t *buf_init_line_anchors(be_buf_t *buf, char *initial_data)                                    be_buf_t *buf_init_line_anchors(be_buf_t *buf, char *initial_data)
{                                                                                                     {
    _mlc_set_caller                                                                                       _mlc_set_caller
    line_init(BUF_TOP_ANCH(buf), initial_data);                                                           line_init(BUF_TOP_ANCH(buf), initial_data);
    _mlc_set_caller                                                                                       _mlc_set_caller
    line_init(BUF_BOT_ANCH(buf), initial_data);                                                           line_init(BUF_BOT_ANCH(buf), initial_data);
    line_link(BUF_TOP_ANCH(buf), BUF_BOT_ANCH(buf));                                                      line_link(BUF_TOP_ANCH(buf), BUF_BOT_ANCH(buf));
    return buf;                                                                                           return buf;
}                                                                                                     }
void buf_set_file_abs_path(be_buf_t *buf, const char *file_path)                                      void buf_set_file_abs_path(be_buf_t *buf, const char *file_path)
{                                                                                                     {
    buf_set_file_path(buf, file_path);                                                                    buf_set_file_path(buf, file_path);
    buf_set_abs_path(buf, file_path);                                                                     buf_set_abs_path(buf, file_path);
}                                                                                                     }
void buf_set_file_path(be_buf_t *buf, const char *file_path)                                          void buf_set_file_path(be_buf_t *buf, const char *file_path)
{                                                                                                     {
    strlcpy__(buf->file_path, file_path, MAX_PATH_LEN);                                                   strlcpy__(buf->file_path, file_path, MAX_PATH_LEN);
}                                                                                                     }
void buf_set_abs_path(be_buf_t *buf, const char *file_path)                                           void buf_set_abs_path(be_buf_t *buf, const char *file_path)
{                                                                                                     {
    get_abs_path(file_path, buf->abs_path_);                                                              get_abs_path(file_path, buf->abs_path_);
}                                                                                                     }
void buf_get_file_path(be_buf_t *buf, char *file_path)                                                void buf_get_file_path(be_buf_t *buf, char *file_path)
{                                                                                                     {
    strlcpy__(file_path, buf->file_path, MAX_PATH_LEN);                                                   strlcpy__(file_path, buf->file_path, MAX_PATH_LEN);
}                                                                                                     }

// Splice a buffer into an existing be_buf_t                                                          // Splice a buffer into an existing be_buf_t
PRIVATE be_buf_t *buf_insert_between(be_buf_t *prev, be_buf_t *new_buf, be_buf_t *next);              PRIVATE be_buf_t *buf_insert_between(be_buf_t *prev, be_buf_t *new_buf, be_buf_t *next);
be_buf_t *buf_insert_before(be_buf_t *buf, be_buf_t *new_buf)                                         be_buf_t *buf_insert_before(be_buf_t *buf, be_buf_t *new_buf)
{                                                                                                     {
    return buf_insert_between(NODE_PREV(buf), new_buf, buf);                                              return buf_insert_between(NODE_PREV(buf), new_buf, buf);
}                                                                                                     }
be_buf_t *buf_insert_after(be_buf_t *buf, be_buf_t *new_buf)                                          be_buf_t *buf_insert_after(be_buf_t *buf, be_buf_t *new_buf)
{                                                                                                     {
    return buf_insert_between(buf, new_buf, NODE_NEXT(buf));                                              return buf_insert_between(buf, new_buf, NODE_NEXT(buf));
}                                                                                                     }
PRIVATE be_buf_t *buf_insert_between(be_buf_t *prev, be_buf_t *new_buf, be_buf_t *next)               PRIVATE be_buf_t *buf_insert_between(be_buf_t *prev, be_buf_t *new_buf, be_buf_t *next)
{                                                                                                     {
    buf_link(prev, new_buf);                                                                              buf_link(prev, new_buf);
    buf_link(new_buf, next);                                                                              buf_link(new_buf, next);
    return new_buf;                                                                                       return new_buf;
}                                                                                                     }
// Connect two buffers                                                                                // Connect two buffers
be_buf_t *buf_link(be_buf_t *prev, be_buf_t *next)                                                    be_buf_t *buf_link(be_buf_t *prev, be_buf_t *next)
{                                                                                                     {
    if (prev) {                                                                                           if (prev) {
        prev->next = next;                                                                                    prev->next = next;
    }                                                                                                     }
    if (next) {                                                                                           if (next) {
        next->prev = prev;                                                                                    next->prev = prev;
    }                                                                                                     }
    return prev;                                                                                          return prev;
}                                                                                                     }

// This does not deep-copy                                                                            // This does not deep-copy
be_buf_t *buf_create_copy(be_buf_t *src)                                                              be_buf_t *buf_create_copy(be_buf_t *src)
{                                                                                                     {
    return buf_copy(buf_create_node(""), src);                                                            return buf_copy(buf_create_node(""), src);
}                                                                                                     }
// This is NOT deep-copy                                                                              // This is NOT deep-copy
be_buf_t *buf_copy(be_buf_t *dest, be_buf_t *src)                                                     be_buf_t *buf_copy(be_buf_t *dest, be_buf_t *src)
{                                                                                                     {
    memcpy__(dest, src, sizeof(*src));                                                                    memcpy__(dest, src, sizeof(*src));
    if (NODE_PREV(dest) != NULL && NODE_NEXT(dest) != NULL) {                                             if (NODE_PREV(dest) != NULL && NODE_NEXT(dest) != NULL) {
        // buffer is linked.                                                                                  // buffer is linked.
        // clear link and anchors to avoid double linking                                                     // clear link and anchors to avoid double linking
        buf_clear_link(dest);                                                                                 buf_clear_link(dest);
        buf_init_line_anchors(dest, NULL);                                                                    buf_init_line_anchors(dest, NULL);
    }                                                                                                     }
    BUFV0_CL(dest) = BUFV1_CL(dest) = BUF_TOP_ANCH(dest);                                                 BUFV0_CL(dest) = BUFV1_CL(dest) = BUF_TOP_ANCH(dest);
    dest->mark_line = BUF_TOP_ANCH(dest);                                                                 dest->mark_line = BUF_TOP_ANCH(dest);
    return dest;                                                                                          return dest;
}                                                                                                     }

be_buf_t *buf_unlink_free(be_buf_t *buf)                                                              be_buf_t *buf_unlink_free(be_buf_t *buf)
{                                                                                                     {
    be_buf_t *next = NODE_NEXT(buf);                                                                      be_buf_t *next = NODE_NEXT(buf);
    if (IS_NODE_INT(buf)) {                                                                               if (IS_NODE_INT(buf)) {
        buf_unlink(buf);                                                                                      buf_unlink(buf);
        buf_free_node(buf);                                                                                   buf_free_node(buf);
    } else                                                                                                } else
    if (IS_NODE_ANCH(buf)) {                                                                              if (IS_NODE_ANCH(buf)) {
        // not unlink and not free frame                                                                      // not unlink and not free frame
        buf_free_lines(buf);                                                                                  buf_free_lines(buf);
    } else {                                                                                              } else {
        progerr_printf("This buffer is NULL\n");                                                              progerr_printf("This buffer is NULL\n");
        next = buf;                                                                                           next = buf;
    }                                                                                                     }
    return next;    // return next buf                                                                    return next;    // return next buf
}                                                                                                     }

// Unlink a buffer from the rest of the be_buf_t                                                      // Unlink a buffer from the rest of the be_buf_t
be_buf_t *buf_unlink(be_buf_t *buf)                                                                   be_buf_t *buf_unlink(be_buf_t *buf)
{                                                                                                     {
    buf_avoid_wild_ptr_cur(buf);                                                                          buf_avoid_wild_ptr_cur(buf);
    if (NODE_PREV(buf)) {                                                                                 if (NODE_PREV(buf)) {
        buf->prev->next = NODE_NEXT(buf);                                                                     buf->prev->next = NODE_NEXT(buf);
    }                                                                                                     }
    if (NODE_NEXT(buf)) {                                                                                 if (NODE_NEXT(buf)) {
        buf->next->prev = NODE_PREV(buf);                                                                     buf->next->prev = NODE_PREV(buf);
    }                                                                                                     }
    buf_clear_link(buf);                                                                                  buf_clear_link(buf);
    return buf;                                                                                           return buf;
}                                                                                                     }
void buf_clear_link(be_buf_t *buf)                                                                    void buf_clear_link(be_buf_t *buf)
{                                                                                                     {
    buf->prev = NULL;                                                                                     buf->prev = NULL;
    buf->next = NULL;                                                                                     buf->next = NULL;
}                                                                                                     }
void buf_free_lines(be_buf_t *buf)                                                                    void buf_free_lines(be_buf_t *buf)
{                                                                                                     {
    be_line_t *line;                                                                                      be_line_t *line;

    // free all lines from top to bottom                                                                  // free all lines from top to bottom
    for (line = BUF_TOP_LINE(buf); IS_NODE_INT(line); ) {                                                 for (line = BUF_TOP_LINE(buf); IS_NODE_INT(line); ) {
        line = line_unlink_free(line);                                                                        line = line_unlink_free(line);
    }                                                                                                     }
}                                                                                                     }

// compare two buffers                                                                                // compare two buffers
int buf_compare(be_buf_t *buf1, be_buf_t *buf2)                                                       int buf_compare(be_buf_t *buf1, be_buf_t *buf2)
{                                                                                                     {
    be_line_t *line1;                                                                                     be_line_t *line1;
    be_line_t *line2;                                                                                     be_line_t *line2;
    int diff;                                                                                             int diff;

    for (line1 = BUF_TOP_LINE(buf1), line2 = BUF_TOP_LINE(buf2);                                          for (line1 = BUF_TOP_LINE(buf1), line2 = BUF_TOP_LINE(buf2);
     IS_NODE_INT(line1) && IS_NODE_INT(line2);                                                             IS_NODE_INT(line1) && IS_NODE_INT(line2); 
     line1 = NODE_NEXT(line1), line2 = NODE_NEXT(line2)) {                                                 line1 = NODE_NEXT(line1), line2 = NODE_NEXT(line2)) {
        diff = strncmp(line1->data, line2->data, MAX_EDIT_LINE_LEN);                                          diff = strncmp(line1->data, line2->data, MAX_EDIT_LINE_LEN);
        if (diff)                                                                                             if (diff)
            return diff;                                                                                          return diff;
    }                                                                                                     }
    return IS_NODE_BOT_ANCH(line1) - IS_NODE_BOT_ANCH(line2);   // 0: exactly the same                    return IS_NODE_BOT_ANCH(line1) - IS_NODE_BOT_ANCH(line2);   // 0: exactly the same
}                                                                                                     }

int buf_renumber_from_top(be_buf_t *buf)                                                              int buf_renumber_from_top(be_buf_t *buf)
{                                                                                                     {
    return buf->buf_lines = buf_renumber_from_line(buf, NODES_TOP_NODE(buf));                             return buf->buf_lines = buf_renumber_from_line(buf, NODES_TOP_NODE(buf));
}                                                                                                     }

int buf_renumber_from_line(be_buf_t *buf, be_line_t *line)                                            int buf_renumber_from_line(be_buf_t *buf, be_line_t *line)
{                                                                                                     {
    return buf->buf_lines = line_renumber_from_line(line, &buf->buf_size);                                return buf->buf_lines = line_renumber_from_line(line, &buf->buf_size);
}                                                                                                     }

int buf_guess_tab_size(be_buf_t *buf)                                                                 int buf_guess_tab_size(be_buf_t *buf)
{                                                                                                     {
#define LINES_TO_GUESS_TAB_SIZE     1000                                                              #define LINES_TO_GUESS_TAB_SIZE     1000
    int lines_checked = 0;                                                                                int lines_checked = 0;
    int lines_space4 = 0;                                                                                 int lines_space4 = 0;
    be_line_t *line;                                                                                      be_line_t *line;

    for (line = BUF_TOP_LINE(buf); IS_NODE_INT(line); line = NODE_NEXT(line)) {                           for (line = BUF_TOP_LINE(buf); IS_NODE_INT(line); line = NODE_NEXT(line)) {
        if (line_data_len(line) > 4) {                                                                        if (line_data_len(line) > 4) {
            if (strlcmp__(line->data, "    ") == 0 && line->data[4] != ' ')                                       if (strlcmp__(line->data, "    ") == 0 && line->data[4] != ' ')
                lines_space4++;                                                                                       lines_space4++;
        }                                                                                                     }
        lines_checked++;                                                                                      lines_checked++;
        if (lines_checked >= LINES_TO_GUESS_TAB_SIZE)                                                         if (lines_checked >= LINES_TO_GUESS_TAB_SIZE)
            break;                                                                                                break;
    }                                                                                                     }
    if (lines_space4 >= lines_checked / 10)                                                               if (lines_space4 >= lines_checked / 10)
        return 8;                                                                                             return 8;
    return 0;                                                                                             return 0;
}                                                                                                     }

int buf_count_bufs(be_bufs_t *bufs)                                                                   int buf_count_bufs(be_bufs_t *bufs)
{                                                                                                     {
    be_buf_t *buf;                                                                                        be_buf_t *buf;
    int count;                                                                                            int count;

    for (buf = NODES_TOP_NODE(bufs), count = 0; IS_NODE_INT(buf);                                         for (buf = NODES_TOP_NODE(bufs), count = 0; IS_NODE_INT(buf);
     buf = NODE_NEXT(buf), count++) {                                                                      buf = NODE_NEXT(buf), count++) {
        // NOTHING_TO_DO                                                                                      // NOTHING_TO_DO
    }                                                                                                     }
    return count;                                                                                         return count;
}                                                                                                     }
int buf_count_lines(be_buf_t *buf)                                                                    int buf_count_lines(be_buf_t *buf)
{                                                                                                     {
    be_line_t *line;                                                                                      be_line_t *line;
    int count;                                                                                            int count;

    for (line = BUF_TOP_LINE(buf), count = 0; IS_NODE_INT(line);                                          for (line = BUF_TOP_LINE(buf), count = 0; IS_NODE_INT(line);
     line = NODE_NEXT(line), count++) {                                                                    line = NODE_NEXT(line), count++) {
        // NOTHING_TO_DO                                                                                      // NOTHING_TO_DO
    }                                                                                                     }
    return count;                                                                                         return count;
}                                                                                                     }

int buf_is_orig_file_updated(be_buf_t *buf)                                                           int buf_is_orig_file_updated(be_buf_t *buf)
{                                                                                                     {
    struct stat st;                                                                                       struct stat st;

    if (stat(buf->file_path, &st)) {                                                                      if (stat(buf->file_path, &st)) {
        return -1;                                                                                            return -1;
    }                                                                                                     }
    return st.st_mtime > buf->orig_file_stat.st_mtime;                                                    return st.st_mtime > buf->orig_file_stat.st_mtime;
}                                                                                                     }
//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
const char *buf_eol_str(be_buf_t *buf)                                                                const char *buf_eol_str(be_buf_t *buf)
{                                                                                                     {
    switch (BUF_STATE(buf, buf_EOL)) {                                                                    switch (BUF_STATE(buf, buf_EOL)) {
    default:                                                                                              default:
    case EOL_NIX:                                                                                         case EOL_NIX:
        return "LF(NIX)";       /*"NIX"*/;                                                                    return "LF(NIX)";       /*"NIX"*/;
    case EOL_MAC:                                                                                         case EOL_MAC:
        return "CR(MAC)";       /*"MAC"*/                                                                     return "CR(MAC)";       /*"MAC"*/
    case EOL_DOS:                                                                                         case EOL_DOS:
        return "CR+LF(DOS)";    /*"DOS"*/                                                                     return "CR+LF(DOS)";    /*"DOS"*/
    }                                                                                                     }
}                                                                                                     }
const char *buf_encode_str(be_buf_t *buf)                                                             const char *buf_encode_str(be_buf_t *buf)
{                                                                                                     {
#ifdef USE_NKF                                                                                        #ifdef USE_NKF
    switch (BUF_STATE(buf, buf_ENCODE)) {                                                                 switch (BUF_STATE(buf, buf_ENCODE)) {
    default:                                                                                              default:
    case ENCODE_ASCII:      return "ASCII";                                                               case ENCODE_ASCII:      return "ASCII";
    case ENCODE_UTF8:       return "UTF8";                                                                case ENCODE_UTF8:       return "UTF8";
    case ENCODE_EUCJP:      return "EUCJP";                                                               case ENCODE_EUCJP:      return "EUCJP";
    case ENCODE_SJIS:       return "SJIS";                                                                case ENCODE_SJIS:       return "SJIS";
    case ENCODE_JIS:        return "JIS";                                                                 case ENCODE_JIS:        return "JIS";
    case ENCODE_BINARY:     return "BIN";                                                                 case ENCODE_BINARY:     return "BIN";
    }                                                                                                     }
#else // USE_NKF                                                                                      #else // USE_NKF
    return "ASCII";                                                                                       return "ASCII";
#endif // USE_NKF                                                                                     #endif // USE_NKF
}                                                                                                     }
const char *buf_cut_mode_str(be_buf_t *buf)                                                           const char *buf_cut_mode_str(be_buf_t *buf)
{                                                                                                     {
    char *ptr;                                                                                            char *ptr;

    switch (BUF_STATE(buf, buf_CUT_MODE)) {                                                               switch (BUF_STATE(buf, buf_CUT_MODE)) {
    default:                                                                                              default:
    case CUT_MODE_0_LINE:   ptr = "--";         break;                                                    case CUT_MODE_0_LINE:   ptr = "--";         break;
    case CUT_MODE_N_LINE:   ptr = "M ";         break;                                                    case CUT_MODE_N_LINE:   ptr = "M ";         break;
    case CUT_MODE_H_CHAR:   ptr = "Mc";         break;                                                    case CUT_MODE_H_CHAR:   ptr = "Mc";         break;
    case CUT_MODE_VH_CHAR:  ptr = "MC";         break;                                                    case CUT_MODE_VH_CHAR:  ptr = "MC";         break;
    case CUT_MODE_V_LINE:   ptr = "Ml";         break;                                                    case CUT_MODE_V_LINE:   ptr = "Ml";         break;
    case CUT_MODE_HV_LINE:  ptr = "ML";         break;                                                    case CUT_MODE_HV_LINE:  ptr = "ML";         break;
    case CUT_MODE_HV_BOX:   ptr = "Mb";         break;                                                    case CUT_MODE_HV_BOX:   ptr = "Mb";         break;
    case CUT_MODE_VH_BOX:   ptr = "MB";         break;                                                    case CUT_MODE_VH_BOX:   ptr = "MB";         break;
    }                                                                                                     }
    return ptr;                                                                                           return ptr;
}                                                                                                     }
//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
be_line_t *buf_set_cur_line(be_buf_t *buf, be_line_t *line)                                           be_line_t *buf_set_cur_line(be_buf_t *buf, be_line_t *line)
{                                                                                                     {
    return BUFV0_CL(buf) = BUFV1_CL(buf) = line;                                                          return BUFV0_CL(buf) = BUFV1_CL(buf) = line;
}                                                                                                     }
be_line_t *buf_cur_line(be_buf_t *buf)                                                                be_line_t *buf_cur_line(be_buf_t *buf)
{                                                                                                     {
    return BUFV0_CL(buf);                                                                                 return BUFV0_CL(buf);
}                                                                                                     }
be_line_t *buf_move_cur_line_to_prev(be_buf_t *buf)                                                   be_line_t *buf_move_cur_line_to_prev(be_buf_t *buf)
{                                                                                                     {
    be_line_t *line = BUFV0_CL(buf);                                                                      be_line_t *line = BUFV0_CL(buf);
    if (IS_NODE_INT(line)) {                                                                              if (IS_NODE_INT(line)) {
        BUFV0_CL(buf) = NODE_PREV(line);                                                                      BUFV0_CL(buf) = NODE_PREV(line);
        return line;    // return previous current line                                                       return line;    // return previous current line
    }                                                                                                     }
    // do not move and return NULL                                                                        // do not move and return NULL
    return NULL;                                                                                          return NULL;
}                                                                                                     }
be_line_t *buf_move_cur_line_to_next(be_buf_t *buf)                                                   be_line_t *buf_move_cur_line_to_next(be_buf_t *buf)
{                                                                                                     {
    be_line_t *line = BUFV0_CL(buf);                                                                      be_line_t *line = BUFV0_CL(buf);
    if (IS_NODE_INT(line)) {                                                                              if (IS_NODE_INT(line)) {
        BUFV0_CL(buf) = NODE_NEXT(line);                                                                      BUFV0_CL(buf) = NODE_NEXT(line);
        return line;    // return previous current line                                                       return line;    // return previous current line
    }                                                                                                     }
    // do not move and return NULL                                                                        // do not move and return NULL
    return NULL;                                                                                          return NULL;
}                                                                                                     }

be_line_t *buf_get_line_ptr_from_line_num(be_buf_t *buf, int line_num)                                be_line_t *buf_get_line_ptr_from_line_num(be_buf_t *buf, int line_num)
{                                                                                                     {
    be_line_t *line;                                                                                      be_line_t *line;

    for (line = BUF_TOP_LINE(buf); line_num > 1 && IS_NODE_INT(line);                                     for (line = BUF_TOP_LINE(buf); line_num > 1 && IS_NODE_INT(line);
     line_num--, line = NODE_NEXT(line)) {                                                                 line_num--, line = NODE_NEXT(line)) {
        // NOTHING_TO_DO                                                                                      // NOTHING_TO_DO
    }                                                                                                     }
    // If line has gone through to bottom anchor, make it back to a valid line.                           // If line has gone through to bottom anchor, make it back to a valid line.
    if (IS_NODE_BOT_ANCH(line)) {                                                                         if (IS_NODE_BOT_ANCH(line)) {
        line = NODE_PREV(line);                                                                               line = NODE_PREV(line);
    }                                                                                                     }
////_D_(line_dump(line))                                                                              ////_D_(line_dump(line))
    return line;                                                                                          return line;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

PRIVATE unsigned short file_crc;                                                                      PRIVATE unsigned short file_crc;
PRIVATE long file_size;                                                                               PRIVATE long file_size;

void buf_update_crc(be_buf_t *buf)                                                                    void buf_update_crc(be_buf_t *buf)
{                                                                                                     {
    buf->orig_file_crc = buf_calc_crc(buf);                                                               buf->orig_file_crc = buf_calc_crc(buf);
}                                                                                                     }
int buf_check_crc(be_buf_t *buf)                                                                      int buf_check_crc(be_buf_t *buf)
{                                                                                                     {
    return buf->orig_file_crc != buf_calc_crc(buf);                                                       return buf->orig_file_crc != buf_calc_crc(buf);
}                                                                                                     }
unsigned short buf_calc_crc(be_buf_t *buf)                                                            unsigned short buf_calc_crc(be_buf_t *buf)
{                                                                                                     {
    be_line_t *line;                                                                                      be_line_t *line;
    char *ptr;                                                                                            char *ptr;

    file_size = 0;                                                                                        file_size = 0;
    clear_crc16ccitt();                                                                                   clear_crc16ccitt();
    for (line = BUF_TOP_LINE(buf); IS_NODE_INT(line); line = NODE_NEXT(line)) {                           for (line = BUF_TOP_LINE(buf); IS_NODE_INT(line); line = NODE_NEXT(line)) {
        file_size += line_data_len(line) + 1;                                                                 file_size += line_data_len(line) + 1;
        for (ptr = line->data; ; ptr++) {                                                                     for (ptr = line->data; ; ptr++) {
            file_crc = calc_crc16ccitt(*ptr);                                                                     file_crc = calc_crc16ccitt(*ptr);
            if (*ptr == 0)  // count including last NUL code                                                      if (*ptr == 0)  // count including last NUL code
                break;                                                                                                break;
        }                                                                                                     }
    }                                                                                                     }
    return file_crc;                                                                                      return file_crc;
}                                                                                                     }
//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

be_bufs_t *bufs_init(be_bufs_t *bufs, const char* buf_name)                                           be_bufs_t *bufs_init(be_bufs_t *bufs, const char* buf_name)
{                                                                                                     {
    bufs->prev = bufs->next = NULL;                                                                       bufs->prev = bufs->next = NULL;
    strlcpy__(bufs->name, buf_name, MAX_NAME_LEN);                                                        strlcpy__(bufs->name, buf_name, MAX_NAME_LEN);
    init_bufs_top_bot_anchor(                                                                             init_bufs_top_bot_anchor(
     BUFS_TOP_ANCH(bufs), "#bufs-top-anchor",                                                              BUFS_TOP_ANCH(bufs), "#bufs-top-anchor",
     BUFS_BOT_ANCH(bufs), "#bufs-bot-anchor");                                                             BUFS_BOT_ANCH(bufs), "#bufs-bot-anchor");
    bufs->cur_buf = BUFS_BOT_ANCH(bufs);                                                                  bufs->cur_buf = BUFS_BOT_ANCH(bufs);
    return bufs;                                                                                          return bufs;
}                                                                                                     }
be_bufs_t *bufs_link(be_bufs_t *top_anchor, be_bufs_t *bot_anchor)                                    be_bufs_t *bufs_link(be_bufs_t *top_anchor, be_bufs_t *bot_anchor)
{                                                                                                     {
    top_anchor->next = bot_anchor;                                                                        top_anchor->next = bot_anchor;
    return bot_anchor->prev = top_anchor;                                                                 return bot_anchor->prev = top_anchor;
}                                                                                                     }
be_bufs_t *bufs_insert_before(be_bufs_t *bufs, be_bufs_t *other)                                      be_bufs_t *bufs_insert_before(be_bufs_t *bufs, be_bufs_t *other)
{                                                                                                     {
    return bufs_insert_between(NODE_PREV(bufs), other, bufs);                                             return bufs_insert_between(NODE_PREV(bufs), other, bufs);
}                                                                                                     }
be_bufs_t *bufs_insert_between(be_bufs_t *prev, be_bufs_t *mid, be_bufs_t *next)                      be_bufs_t *bufs_insert_between(be_bufs_t *prev, be_bufs_t *mid, be_bufs_t *next)
{                                                                                                     {
    bufs_link(prev, mid);                                                                                 bufs_link(prev, mid);
    return bufs_link(mid, next);                                                                          return bufs_link(mid, next);
}                                                                                                     }

be_bufs_t *bufs_free_all_bufs(be_bufs_t *bufs)                                                        be_bufs_t *bufs_free_all_bufs(be_bufs_t *bufs)
{                                                                                                     {
    for ( ; IS_PTR_VALID(bufs); bufs = NODE_NEXT(bufs)) {                                                 for ( ; IS_PTR_VALID(bufs); bufs = NODE_NEXT(bufs)) {
        for (be_buf_t *buf = BUFS_TOP_ANCH(bufs); IS_PTR_VALID(buf); ) {                                      for (be_buf_t *buf = BUFS_TOP_ANCH(bufs); IS_PTR_VALID(buf); ) {
            if (bufs->cur_buf == buf) {                                                                           if (bufs->cur_buf == buf) {
                bufs->cur_buf = NODE_NEXT(buf);                                                                       bufs->cur_buf = NODE_NEXT(buf);
            }                                                                                                     }
            buf = buf_unlink_free(buf);                                                                           buf = buf_unlink_free(buf);
        }                                                                                                     }
    }                                                                                                     }
    return bufs;                                                                                          return bufs;
}                                                                                                     }

be_bufs_t *get_bufs_contains_buf(be_bufs_t *bufs, be_buf_t *cur_buf)                                  be_bufs_t *get_bufs_contains_buf(be_bufs_t *bufs, be_buf_t *cur_buf)
{                                                                                                     {
    for ( ; IS_PTR_VALID(bufs); bufs = NODE_NEXT(bufs)) {                                                 for ( ; IS_PTR_VALID(bufs); bufs = NODE_NEXT(bufs)) {
        for (be_buf_t *buf = BUFS_TOP_ANCH(bufs); IS_PTR_VALID(buf); buf = NODE_NEXT(buf)) {                  for (be_buf_t *buf = BUFS_TOP_ANCH(bufs); IS_PTR_VALID(buf); buf = NODE_NEXT(buf)) {
            if (buf == cur_buf) {                                                                                 if (buf == cur_buf) {
                return bufs;                                                                                          return bufs;
            }                                                                                                     }
        }                                                                                                     }
    }                                                                                                     }
    return NULL;                                                                                          return NULL;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

void init_bufs_top_bot_anchor(                                                                        void init_bufs_top_bot_anchor(
 be_buf_t *buf_top, const char *full_path_top,                                                         be_buf_t *buf_top, const char *full_path_top,
 be_buf_t *buf_bot, const char *full_path_bot)                                                         be_buf_t *buf_bot, const char *full_path_bot)
{                                                                                                     {
    buf_init(buf_top, full_path_top);                                                                     buf_init(buf_top, full_path_top);
    buf_init(buf_bot, full_path_bot);                                                                     buf_init(buf_bot, full_path_bot);
    buf_link(buf_top, buf_bot);                                                                           buf_link(buf_top, buf_bot);
}                                                                                                     }

PRIVATE be_buf_t *make_sure_buf_is_top_buf(be_buf_t *buf);                                            PRIVATE be_buf_t *make_sure_buf_is_top_buf(be_buf_t *buf);

be_buf_t *get_buf_from_bufs_by_idx(be_buf_t *buf, int buf_idx)                                        be_buf_t *get_buf_from_bufs_by_idx(be_buf_t *buf, int buf_idx)
{                                                                                                     {
    // making sure that bufs is TOP_BUF                                                                   // making sure that bufs is TOP_BUF
    buf = make_sure_buf_is_top_buf(buf);                                                                  buf = make_sure_buf_is_top_buf(buf);
    for ( ; buf_idx > 0 && IS_NODE_INT(buf); buf_idx--, buf = NODE_NEXT(buf)) {                           for ( ; buf_idx > 0 && IS_NODE_INT(buf); buf_idx--, buf = NODE_NEXT(buf)) {
        // NOTHING_TO_DO                                                                                      // NOTHING_TO_DO
    }                                                                                                     }
    return buf; // buf may be top/bottom anchor                                                           return buf; // buf may be top/bottom anchor
}                                                                                                     }
int get_buf_idx_in_bufs(be_buf_t *bufs, be_buf_t *buf)                                                int get_buf_idx_in_bufs(be_buf_t *bufs, be_buf_t *buf)
{                                                                                                     {
    bufs = make_sure_buf_is_top_buf(bufs);                                                                bufs = make_sure_buf_is_top_buf(bufs);
    for (int buf_idx = 0; IS_NODE_INT(bufs); buf_idx++, bufs = NODE_NEXT(bufs)) {                         for (int buf_idx = 0; IS_NODE_INT(bufs); buf_idx++, bufs = NODE_NEXT(bufs)) {
        if (bufs == buf)                                                                                      if (bufs == buf)
            return buf_idx; // found                                                                              return buf_idx; // found
    }                                                                                                     }
    return -1;  // not found                                                                              return -1;  // not found
}                                                                                                     }

be_buf_t *get_buf_from_bufs_by_file_path(be_buf_t *buf, const char *file_path)                        be_buf_t *get_buf_from_bufs_by_file_path(be_buf_t *buf, const char *file_path)
{                                                                                                     {
    buf = make_sure_buf_is_top_buf(buf);                                                                  buf = make_sure_buf_is_top_buf(buf);
    for ( ; IS_NODE_INT(buf); buf = NODE_NEXT(buf)) {                                                     for ( ; IS_NODE_INT(buf); buf = NODE_NEXT(buf)) {
        if (strcmp(buf->file_path, file_path) == 0) {                                                         if (strcmp(buf->file_path, file_path) == 0) {
            return buf; // found                                                                                  return buf; // found
        }                                                                                                     }
        char abs_path[MAX_PATH_LEN+1];                                                                        char abs_path[MAX_PATH_LEN+1];
        get_abs_path(file_path, abs_path);                                                                    get_abs_path(file_path, abs_path);
        if (strcmp(buf->abs_path_, abs_path) == 0) {                                                          if (strcmp(buf->abs_path_, abs_path) == 0) {
            return buf; // found                                                                                  return buf; // found
        }                                                                                                     }
    }                                                                                                     }
    return NULL;        // not found                                                                      return NULL;        // not found
}                                                                                                     }
be_buf_t *get_buf_from_bufs_by_file_name(be_buf_t *buf, const char *file_name)                        be_buf_t *get_buf_from_bufs_by_file_name(be_buf_t *buf, const char *file_name)
{                                                                                                     {
    buf = make_sure_buf_is_top_buf(buf);                                                                  buf = make_sure_buf_is_top_buf(buf);
    for ( ; IS_NODE_INT(buf); buf = NODE_NEXT(buf)) {                                                     for ( ; IS_NODE_INT(buf); buf = NODE_NEXT(buf)) {
        if (compare_file_path_from_tail(buf->file_path, file_name) == 0) {                                    if (compare_file_path_from_tail(buf->file_path, file_name) == 0) {
            return buf; // found by file_path                                                                     return buf; // found by file_path
        }                                                                                                     }
        if (compare_file_path_from_tail(buf->abs_path_, file_name) == 0) {                                    if (compare_file_path_from_tail(buf->abs_path_, file_name) == 0) {
            return buf; // found by abs_path                                                                      return buf; // found by abs_path
        }                                                                                                     }
    }                                                                                                     }
    return NULL;        // not found                                                                      return NULL;        // not found
}                                                                                                     }

PRIVATE be_buf_t *make_sure_buf_is_top_buf(be_buf_t *buf)                                             PRIVATE be_buf_t *make_sure_buf_is_top_buf(be_buf_t *buf)
{                                                                                                     {
    if (IS_NODE_TOP_ANCH(buf)) {                                                                          if (IS_NODE_TOP_ANCH(buf)) {
        buf = NODE_NEXT(buf);                                                                                 buf = NODE_NEXT(buf);
    }                                                                                                     }
    for ( ; IS_PTR_VALID(buf) && IS_NODE_TOP(buf) == 0; buf = NODE_PREV(buf)) {                           for ( ; IS_PTR_VALID(buf) && IS_NODE_TOP(buf) == 0; buf = NODE_PREV(buf)) {
        // NOTHING_TO_DO                                                                                      // NOTHING_TO_DO
    }                                                                                                     }
    return buf;                                                                                           return buf;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
void renumber_all_bufs_from_top(be_bufs_t *bufs)                                                      void renumber_all_bufs_from_top(be_bufs_t *bufs)
{                                                                                                     {
    for (be_buf_t *buf = BUFS_TOP_BUF(bufs); IS_NODE_INT(buf); buf = NODE_NEXT(buf)) {                    for (be_buf_t *buf = BUFS_TOP_BUF(bufs); IS_NODE_INT(buf); buf = NODE_NEXT(buf)) {
        buf_renumber_from_top(buf);                                                                           buf_renumber_from_top(buf);
    }                                                                                                     }
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
be_line_t *buf_check_line_in_buf(be_buf_t *buf, be_line_t *line_)                                     be_line_t *buf_check_line_in_buf(be_buf_t *buf, be_line_t *line_)
{                                                                                                     {
    be_line_t *line;                                                                                      be_line_t *line;

    for (line = BUF_TOP_LINE(buf); IS_NODE_INT(line); line = NODE_NEXT(line)) {                           for (line = BUF_TOP_LINE(buf); IS_NODE_INT(line); line = NODE_NEXT(line)) {
        if (line == line_)                                                                                    if (line == line_)
            return line_;                                                                                         return line_;
    }                                                                                                     }
    return NULL;                                                                                          return NULL;
}                                                                                                     }
be_line_t *buf_check_line_in_buf_anchs(be_buf_t *buf, be_line_t *line_)                               be_line_t *buf_check_line_in_buf_anchs(be_buf_t *buf, be_line_t *line_)
{                                                                                                     {
    if ((line_ == BUF_TOP_ANCH(buf)) || (line_ == BUF_BOT_ANCH(buf))) {                                   if ((line_ == BUF_TOP_ANCH(buf)) || (line_ == BUF_BOT_ANCH(buf))) {
        return line_;                                                                                         return line_;
    }                                                                                                     }
    return NULL;                                                                                          return NULL;
}                                                                                                     }
void buf_dump_bufs(be_buf_t *buf)                                                                     void buf_dump_bufs(be_buf_t *buf)
{                                                                                                     {
    int cnt;                                                                                              int cnt;

flf_d_printf("0============================================\n");                                      flf_d_printf("0============================================\n");
    for (cnt = 0; cnt < 100 && IS_NODE_INT(buf); cnt++, buf = NODE_NEXT(buf)) {                           for (cnt = 0; cnt < 100 && IS_NODE_INT(buf); cnt++, buf = NODE_NEXT(buf)) {
        ///buf_dump_ptrs(buf);                                                                                ///buf_dump_ptrs(buf);
        dump_buf_view_x(buf, 0);                                                                              dump_buf_view_x(buf, 0);
        dump_buf_view_x(buf, 1);                                                                              dump_buf_view_x(buf, 1);
        if (IS_NODE_BOT_ANCH(buf))                                                                            if (IS_NODE_BOT_ANCH(buf))
            break;                                                                                                break;
    }                                                                                                     }
flf_d_printf("9============================================\n");                                      flf_d_printf("9============================================\n");
}                                                                                                     }
void buf_dump_bufs_lines(be_buf_t *buf, const char *label)                                            void buf_dump_bufs_lines(be_buf_t *buf, const char *label)
{                                                                                                     {
    int cnt;                                                                                              int cnt;

flf_d_printf("%s {{{{{{{{{{{{{{{{{{{{{{{{{{{{{\n", label);                                            flf_d_printf("%s {{{{{{{{{{{{{{{{{{{{{{{{{{{{{\n", label);
    for (cnt = 0; cnt < 100 && IS_PTR_VALID(buf); cnt++, buf = NODE_NEXT(buf)) {                          for (cnt = 0; cnt < 100 && IS_PTR_VALID(buf); cnt++, buf = NODE_NEXT(buf)) {
        if (buf_count_lines(buf)) {                                                                           if (buf_count_lines(buf)) {
            buf_dump_lines(buf, 3);                                                                               buf_dump_lines(buf, 3);
        }                                                                                                     }
        if (IS_NODE_BOT_ANCH(buf))                                                                            if (IS_NODE_BOT_ANCH(buf))
            break;                                                                                                break;
    }                                                                                                     }
flf_d_printf("%s }}}}}}}}}}}}}}}}}}}}}}}}}}}}}\n", label);                                            flf_d_printf("%s }}}}}}}}}}}}}}}}}}}}}}}}}}}}}\n", label);
}                                                                                                     }
void buf_dump_lines(be_buf_t *buf, int lines)                                                         void buf_dump_lines(be_buf_t *buf, int lines)
{                                                                                                     {
    buf_dump_state(buf);                                                                                  buf_dump_state(buf);
    if (buf == NULL) {                                                                                    if (buf == NULL) {
        return;                                                                                               return;
    }                                                                                                     }
    line_dump_lines(BUF_TOP_ANCH(buf), lines, BUFV0_CL(buf));                                             line_dump_lines(BUF_TOP_ANCH(buf), lines, BUFV0_CL(buf));
}                                                                                                     }
void buf_dump_ptrs(be_buf_t *buf)                                                                     void buf_dump_ptrs(be_buf_t *buf)
{                                                                                                     {
    flf_d_printf("%saddr:%08lx,prev:%08lx,next:%08lx,line:%08lx\n",                                       flf_d_printf("%saddr:%08lx,prev:%08lx,next:%08lx,line:%08lx\n",
     buf == get_epc_buf() ? ">" : " ",                                                                     buf == get_epc_buf() ? ">" : " ",
     buf, NODE_PREV(buf), NODE_NEXT(buf), NODES_TOP_NODE(buf));                                            buf, NODE_PREV(buf), NODE_NEXT(buf), NODES_TOP_NODE(buf));
    line_dump_lines(BUF_TOP_ANCH(buf), 3, BUFV0_CL(buf));                                                 line_dump_lines(BUF_TOP_ANCH(buf), 3, BUFV0_CL(buf));
    line_dump_lines(BUF_TOP_ANCH(buf), 3, BUFV1_CL(buf));                                                 line_dump_lines(BUF_TOP_ANCH(buf), 3, BUFV1_CL(buf));
}                                                                                                     }
void buf_dump_state(be_buf_t *buf)                                                                    void buf_dump_state(be_buf_t *buf)
{                                                                                                     {
    if (buf == NULL) {                                                                                    if (buf == NULL) {
        return;                                                                                               return;
    }                                                                                                     }
flf_d_printf("file_path: [%s]\n", buf->file_path);                                                    flf_d_printf("file_path: [%s]\n", buf->file_path);
flf_d_printf("abs_path_: [%s]\n", buf->abs_path_);                                                    flf_d_printf("abs_path_: [%s]\n", buf->abs_path_);
}                                                                                                     }

void bufs_dump_all_bufs(be_bufs_t *bufs)                                                              void bufs_dump_all_bufs(be_bufs_t *bufs)
{                                                                                                     {
flf_d_printf("00============================================\n");                                     flf_d_printf("00============================================\n");
    for ( ; IS_PTR_VALID(bufs); bufs = NODE_NEXT(bufs)) {                                                 for ( ; IS_PTR_VALID(bufs); bufs = NODE_NEXT(bufs)) {
        flf_d_printf("bufs: [%s]\n", bufs->name);                                                             flf_d_printf("bufs: [%s]\n", bufs->name);
        for (be_buf_t *buf = BUFS_TOP_ANCH(bufs); IS_PTR_VALID(buf); buf = NODE_NEXT(buf)) {                  for (be_buf_t *buf = BUFS_TOP_ANCH(bufs); IS_PTR_VALID(buf); buf = NODE_NEXT(buf)) {
            flf_d_printf(" %cbuf: [%s]\n", (bufs->cur_buf == buf) ? '>' : ' ', buf->file_path);                   flf_d_printf(" %cbuf: [%s]\n", (bufs->cur_buf == buf) ? '>' : ' ', buf->file_path);
            flf_d_printf("    buf->v0_str: [%s]\n", buf->buf_views[0].cur_line->data);                            flf_d_printf("    buf->v0_str: [%s]\n", buf->buf_views[0].cur_line->data);
            flf_d_printf("    buf->v1_str: [%s]\n", buf->buf_views[1].cur_line->data);                            flf_d_printf("    buf->v1_str: [%s]\n", buf->buf_views[1].cur_line->data);
        }                                                                                                     }
    }                                                                                                     }
flf_d_printf("99============================================\n");                                     flf_d_printf("99============================================\n");
}                                                                                                     }

#endif // ENABLE_DEBUG                                                                                #endif // ENABLE_DEBUG

// End of buffer.c                                                                                    // End of buffer.c
kdiff3 ../old/be/buffers.c buffers.c #========================
kdiff3 ../old/be/color.c color.c #========================
kdiff3 ../old/be/cursesif.c cursesif.c #========================
kdiff3 ../old/be/debug.c debug.c #========================
kdiff3 ../old/be/disp.c disp.c #========================
kdiff3 ../old/be/editor.c editor.c #========================
/**************************************************************************                           /**************************************************************************
 *   editor.c                                                             *                            *   editor.c                                                             *
 *                                                                        *                            *                                                                        *
 *   Copyright (C) 1999-2003 Chris Allegretta                             *                            *   Copyright (C) 1999-2003 Chris Allegretta                             *
 *                                                                        *                            *                                                                        *
 *   This program is free software; you can redistribute it and/or modify *                            *   This program is free software; you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published by *                            *   it under the terms of the GNU General Public License as published by *
 *   the Free Software Foundation; either version 2, or (at your option)  *                            *   the Free Software Foundation; either version 2, or (at your option)  *
 *   any later version.                                                   *                            *   any later version.                                                   *
 *                                                                        *                            *                                                                        *
 *   This program is distributed in the hope that it will be useful,      *                            *   This program is distributed in the hope that it will be useful,      *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *                            *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *                            *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 *   GNU General Public License for more details.                         *                            *   GNU General Public License for more details.                         *
 *                                                                        *                            *                                                                        *
 *   You should have received a copy of the GNU General Public License    *                            *   You should have received a copy of the GNU General Public License    *
 *   along with this program; if not, write to the Free Software          *                            *   along with this program; if not, write to the Free Software          *
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *                            *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *
 *                                                                        *                            *                                                                        *
 **************************************************************************/                           **************************************************************************/

#include "headers.h"                                                                                  #include "headers.h"

editor_quit_t editor_quit = EDITOR_NONE;                                                              editor_quit_t editor_quit = EDITOR_NONE;
PRIVATE int editor_main_loop(void);                                                                   PRIVATE int editor_main_loop(void);

int call_editor(int push_win, int list_mode)                                                          int call_editor(int push_win, int list_mode)
{                                                                                                     {
#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
    filer_panes_t *prev_fps = NULL;                                                                       filer_panes_t *prev_fps = NULL;
    filer_panes_t next_filer_panes;                                                                       filer_panes_t next_filer_panes;
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER
    app_mode_t appmode_save;                                                                              app_mode_t appmode_save;

    if (push_win) {                                                                                       if (push_win) {
        win_push_win_size();                                                                                  win_push_win_size();
    }                                                                                                     }
#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
    prev_fps = inherit_filer_panes(&next_filer_panes);                                                    prev_fps = inherit_filer_panes(&next_filer_panes);
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER

    memcpy(&appmode_save, &app_mode__, sizeof(app_mode__));                                               memcpy(&appmode_save, &app_mode__, sizeof(app_mode__));
    CLR_APPMD(app_EDITOR_FILER);                                                                          CLR_APPMD(app_EDITOR_FILER);
    SET_APPMD_VAL(app_LIST_MODE, list_mode);                                                              SET_APPMD_VAL(app_LIST_MODE, list_mode);
    SET_APPMD_VAL(ed_EDITOR_PANES, 0);                                                                    SET_APPMD_VAL(ed_EDITOR_PANES, 0);
    set_app_func_key_table();                                                                             set_app_func_key_table();
    set_work_space_color_on_app_list_mode();                                                              set_work_space_color_on_app_list_mode();

/////_D_(dump_cur_pointers())                                                                      <
flf_d_printf("push_win:%d, list_mode:%d\n", push_win, list_mode);                                     flf_d_printf("push_win:%d, list_mode:%d\n", push_win, list_mode);
flf_d_printf("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{\n");                                         flf_d_printf("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{\n");
    int ret = editor_main_loop();                                                                         int ret = editor_main_loop();
flf_d_printf("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\n");                                         flf_d_printf("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\n");
flf_d_printf("ret: %d\n", ret);                                                                       flf_d_printf("ret: %d\n", ret);
    editor_quit = EDITOR_NONE;  // for caller of call_editor(), clear "editor_quit"                       editor_quit = EDITOR_NONE;  // for caller of call_editor(), clear "editor_quit"
    _mlc_check_count                                                                                      _mlc_check_count
/////_D_(dump_cur_pointers())                                                                      <

    SET_APPMD_VAL(app_EDITOR_FILER, GET_APPMD_PTR(&appmode_save, app_EDITOR_FILER));                      SET_APPMD_VAL(app_EDITOR_FILER, GET_APPMD_PTR(&appmode_save, app_EDITOR_FILER));
    SET_APPMD_VAL(app_LIST_MODE, GET_APPMD_PTR(&appmode_save, app_LIST_MODE));                            SET_APPMD_VAL(app_LIST_MODE, GET_APPMD_PTR(&appmode_save, app_LIST_MODE));
    SET_APPMD_VAL(ed_EDITOR_PANES, GET_APPMD_PTR(&appmode_save, ed_EDITOR_PANES));                        SET_APPMD_VAL(ed_EDITOR_PANES, GET_APPMD_PTR(&appmode_save, ed_EDITOR_PANES));
    set_app_func_key_table();                                                                             set_app_func_key_table();
    set_work_space_color_on_app_list_mode();                                                              set_work_space_color_on_app_list_mode();

#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
    free_filer_panes(&next_filer_panes, prev_fps);                                                        free_filer_panes(&next_filer_panes, prev_fps);
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER
    if (push_win) {                                                                                       if (push_win) {
        win_pop_win_size();                                                                                   win_pop_win_size();
    }                                                                                                     }

    return ret;     // 1: input, 0: cancelled                                                             return ret;     // 1: input, 0: cancelled
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
char prev_func_id[MAX_PATH_LEN+1];                                                                    char prev_func_id[MAX_PATH_LEN+1];
PRIVATE int editor_main_loop(void)                                                                    PRIVATE int editor_main_loop(void)
{                                                                                                     {
    key_code_t key_input;                                                                                 key_code_t key_input;
    func_key_table_t *func_key_table;                                                                     func_key_table_t *func_key_table;

    search_clear(&search__);                                                                              search_clear(&search__);
#ifdef ENABLE_REGEX                                                                                   #ifdef ENABLE_REGEX
    matches_clear(&matches__);                                                                            matches_clear(&matches__);
#endif // ENABLE_REGEX                                                                                #endif // ENABLE_REGEX

    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_CENTER, UPDATE_SCRN_ALL_SOON);                 post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_CENTER, UPDATE_SCRN_ALL_SOON);

    // Main input loop                                                                                    // Main input loop
    key_input = 0;                                                                                        key_input = 0;
    while (1) {                                                                                           while (1) {
        editor_quit = EDITOR_NONE;                                                                            editor_quit = EDITOR_NONE;
        if (key_macro_is_playing_back()) {                                                                    if (key_macro_is_playing_back()) {
            // When playing back key-macro, do not update screen for speed up.                                    // When playing back key-macro, do not update screen for speed up.
        } else {                                                                                              } else {
            set_edit_win_update_needed(UPDATE_SCRN_ALL_SOON);                                                     set_edit_win_update_needed(UPDATE_SCRN_ALL_SOON);
            update_screen_editor(1, key_input >= 0, 1);                                                           update_screen_editor(1, key_input >= 0, 1);
        }                                                                                                     }
        //----------------------------------                                                                  //----------------------------------
        key_input = input_key_wait_return();                                                                  key_input = input_key_wait_return();
        //----------------------------------                                                                  //----------------------------------
        if (key_input < 0) {                                                                                  if (key_input < 0) {
            // no key input                                                                                       // no key input
        } else {                                                                                              } else {
mflf_d_printf("input%ckey:0x%04x(%s)=======================\n",                                       mflf_d_printf("input%ckey:0x%04x(%s)=======================\n",
 '_', key_input, short_key_name_from_key_code(key_input, NULL));                                       '_', key_input, short_key_name_from_key_code(key_input, NULL));

#ifdef ENABLE_REGEX                                                                                   #ifdef ENABLE_REGEX
            matches_clear(&matches__);                                                                            matches_clear(&matches__);
#endif // ENABLE_REGEX                                                                                #endif // ENABLE_REGEX
#ifdef ENABLE_UNDO                                                                                    #ifdef ENABLE_UNDO
#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
            memorize_undo_state_before_change();                                                                  memorize_undo_state_before_change();
#endif // ENABLE_DEBUG                                                                                #endif // ENABLE_DEBUG
#endif // ENABLE_UNDO                                                                                 #endif // ENABLE_UNDO
            if ((func_key_table = get_func_key_table_from_key(editor_func_key_table, key_input))                  if ((func_key_table = get_func_key_table_from_key(editor_func_key_table, key_input))
             == NULL) {                                                                                            == NULL) {
                if (IS_CHAR_KEY(key_input) == 0) {                                                                    if (IS_CHAR_KEY(key_input) == 0) {
                    disp_status_bar_err(_("No command assigned for the key: %04xh"), key_input);                          disp_status_bar_err(_("No command assigned for the key: %04xh"), key_input);
                } else {                                                                                              } else {
                    doe_enter_char(key_input);                                                                            doe_enter_char(key_input);
                }                                                                                                     }
            } else {                                                                                              } else {
                doe_enter_char_send();                                                                                doe_enter_char_send();
                switch (func_key_table->list_mode) {                                                                  switch (func_key_table->list_mode) {
                default:                                                                                              default:
                case XL:        // not executable in List mode                                                        case XL:        // not executable in List mode
                    if (is_app_list_mode()) {                                                                             if (is_app_list_mode()) {
                        disp_status_bar_done(                                                                                 disp_status_bar_done(
                         _("Can not execute this function: [%s]"), func_key_table->func_id);                                   _("Can not execute this function: [%s]"), func_key_table->func_id);
                        break;                                                                                                break;
                    }                                                                                                     }
                    // FALLTHROUGH                                                                                        // FALLTHROUGH
                case XA:        // executable all Normal/List mode                                                    case XA:        // executable all Normal/List mode
                    search_clear(&search__);                                                                              search_clear(&search__);
flf_d_printf("CALL_EDITOR_FUNC [%s]\n", func_key_table->func_id);                                     flf_d_printf("CALL_EDITOR_FUNC [%s]\n", func_key_table->func_id);
                    //=========================                                                                           //=========================
                    (*func_key_table->func)();  // call function "doe_...()"                                              (*func_key_table->func)();  // call function "doe_...()"
                    //=========================                                                                           //=========================
                    count_easy_buffer_switching();                                                                        count_easy_buffer_switching();
flf_d_printf("ret_val: %d, editor_quit: %d\n", ret, editor_quit);                                  |  flf_d_printf("editor_quit: %d\n", editor_quit);
                    strlcpy__(prev_func_id, func_key_table->func_id, MAX_PATH_LEN);                                       strlcpy__(prev_func_id, func_key_table->func_id, MAX_PATH_LEN);
                    break;                                                                                                break;
                }                                                                                                     }
            }                                                                                                     }
#ifdef ENABLE_UNDO                                                                                    #ifdef ENABLE_UNDO
#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
            check_undo_state_after_change();                                                                      check_undo_state_after_change();
#endif // ENABLE_DEBUG                                                                                #endif // ENABLE_DEBUG
#endif // ENABLE_UNDO                                                                                 #endif // ENABLE_UNDO
        }                                                                                                     }
        if (is_app_list_mode() == 0 && count_edit_bufs() == 0) {                                              if (is_app_list_mode() == 0 && count_edit_bufs() == 0) {
            // If all files closed on edit mode, exit editor.                                                     // If all files closed on edit mode, exit editor.
            break;                                                                                                break;
        }                                                                                                     }
/////_D_(dump_cur_pointers())                                                                      <
        if (editor_quit) {                                                                                    if (editor_quit) {
            break;                                                                                                break;
        }                                                                                                     }
    }                                                                                                     }
#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
    key_macro_cancel_recording();                                                                         key_macro_cancel_recording();
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
/////_D_(dump_cur_pointers())                                                                      <
    if (editor_quit == EDITOR_CANCELLED) {                                                                if (editor_quit == EDITOR_CANCELLED) {
        return -1;  // cancelled                                                                              return -1;  // cancelled
    } else                                                                                                } else
    if (editor_quit == EDITOR_DONE) {                                                                     if (editor_quit == EDITOR_DONE) {
        return 0;   // done                                                                                   return 0;   // done
    }                                                                                                     }
    return IS_META_KEY(key_input) ? 2 : 1;  // selected                                                   return IS_META_KEY(key_input) ? 2 : 1;  // selected
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
PRIVATE int open_file_recursive(int recursive);                                                       PRIVATE int open_file_recursive(int recursive);
int doe_open_file(void)                                                                               int doe_open_file(void)
{                                                                                                     {
    return open_file_recursive(RECURSIVE1);                                                               return open_file_recursive(RECURSIVE1);
}                                                                                                     }
PRIVATE int open_file_recursive(int recursive)                                                        PRIVATE int open_file_recursive(int recursive)
{                                                                                                     {
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];

    clear_files_loaded();                                                                                 clear_files_loaded();
    while (1) {                                                                                           while (1) {
        int ret;                                                                                              int ret;
#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
        ret = call_filer(1, 0, "", file_path, file_path, MAX_PATH_LEN);                                       ret = call_filer(1, 0, "", file_path, file_path, MAX_PATH_LEN);
        if (ret > 0)                                                                                          if (ret > 0)
            break;                                                                                                break;
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER

        ret = input_string_tail("", file_path, HISTORY_TYPE_IDX_CURSPOS, _("Open existing file:"))            ret = input_string_tail("", file_path, HISTORY_TYPE_IDX_CURSPOS, _("Open existing file:"))

        if (ret <= 0) {                                                                                       if (ret <= 0) {
            break;                                                                                                break;
        }                                                                                                     }
#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
        if (is_path_wildcard(file_path))                                                                      if (is_path_wildcard(file_path))
            continue;                                                                                             continue;
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER
        // CURDIR: changed in editor                                                                          // CURDIR: changed in editor
        if (load_file_name_upp_low(file_path, TUL0, OOE0, MOE1, LFH0, recursive) <= 0) {                      if (load_file_name_upp_low(file_path, TUL0, OOE0, MOE1, LFH0, recursive) <= 0) {
            tio_beep();                                                                                           tio_beep();
        }                                                                                                     }
        break;                                                                                                break;
    }                                                                                                     }
    disp_files_loaded_if_ge_0();                                                                          disp_files_loaded_if_ge_0();
    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);                   post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);
    return 0;                                                                                             return 0;
}                                                                                                     }
int doe_open_new_file(void)                                                                           int doe_open_new_file(void)
{                                                                                                     {
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];

    int ret = input_string_tail("", file_path, HISTORY_TYPE_IDX_DIR, _("Open new file:"));                int ret = input_string_tail("", file_path, HISTORY_TYPE_IDX_DIR, _("Open new file:"));
    if (ret < 0) {                                                                                        if (ret < 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (ret <= 0) {                                                                                       if (ret <= 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    // CURDIR: changed in editor                                                                          // CURDIR: changed in editor
    if (load_file_name_upp_low(file_path, TUL0, OOE1, MOE0, LFH0, RECURSIVE0) <= 0) {                     if (load_file_name_upp_low(file_path, TUL0, OOE1, MOE0, LFH0, RECURSIVE0) <= 0) {
        tio_beep();                                                                                           tio_beep();
        return 0;                                                                                             return 0;
    }                                                                                                     }
    disp_files_loaded_if_ge_0();                                                                          disp_files_loaded_if_ge_0();
    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);                   post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);
    return 1;                                                                                             return 1;
}                                                                                                     }

int doe_open_proj_file(void)                                                                          int doe_open_proj_file(void)
{                                                                                                     {
    do_open_proj_file();                                                                                  do_open_proj_file();
    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);                   post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);
    return 1;                                                                                             return 1;
}                                                                                                     }

int do_open_proj_file(void)                                                                           int do_open_proj_file(void)
{                                                                                                     {
    int loop;                                                                                             int loop;
    DIR *dir;                                                                                             DIR *dir;
    struct dirent *dirent;                                                                                struct dirent *dirent;
    struct stat st;                                                                                       struct stat st;
    struct stat lst;                                                                                      struct stat lst;
    char file_name[MAX_PATH_LEN+1];                                                                       char file_name[MAX_PATH_LEN+1];

    strcpy__(file_name, "");                                                                              strcpy__(file_name, "");
    dir = opendir(".");                                                                                   dir = opendir(".");
    for (loop = 0; loop < 2; loop++) {                                                                    for (loop = 0; loop < 2; loop++) {
        rewinddir(dir);                                                                                       rewinddir(dir);
        while ((dirent = readdir(dir)) != NULL) {                                                             while ((dirent = readdir(dir)) != NULL) {
            lstat(dirent->d_name, &lst);                                                                          lstat(dirent->d_name, &lst);
            if (S_ISLNK(lst.st_mode))                                                                             if (S_ISLNK(lst.st_mode))
                stat(dirent->d_name, &st);                                                                            stat(dirent->d_name, &st);
            else                                                                                                  else
                memcpy__(&st, &lst, sizeof(struct stat));                                                             memcpy__(&st, &lst, sizeof(struct stat));
            if (S_ISREG(st.st_mode) && is_file_name_proj_file(dirent->d_name, 1+loop)) {                          if (S_ISREG(st.st_mode) && is_file_name_proj_file(dirent->d_name, 1+loop)) {
                strlcpy__(file_name, dirent->d_name, MAX_PATH_LEN);                                                   strlcpy__(file_name, dirent->d_name, MAX_PATH_LEN);
                break;                                                                                                break;
            }                                                                                                     }
        }                                                                                                     }
        if (is_strlen_not_0(file_name)) {                                                                     if (is_strlen_not_0(file_name)) {
            // file matched                                                                                       // file matched
            break;                                                                                                break;
        }                                                                                                     }
    }                                                                                                     }
    closedir(dir);                                                                                        closedir(dir);

    if (is_strlen_0(file_name)) {                                                                         if (is_strlen_0(file_name)) {
        disp_status_bar_err(_("No project file found"));                                                      disp_status_bar_err(_("No project file found"));
        return 0;                                                                                             return 0;
    }                                                                                                     }

    // CURDIR: changed in editor                                                                          // CURDIR: changed in editor
    if (load_file_name_upp_low(file_name, TUL0, OOE0, MOE1, LFH0, RECURSIVE1) <= 0) {                     if (load_file_name_upp_low(file_name, TUL0, OOE0, MOE1, LFH0, RECURSIVE1) <= 0) {
        tio_beep();                                                                                           tio_beep();
        return 0;                                                                                             return 0;
    }                                                                                                     }
    disp_files_loaded_if_ge_0();                                                                          disp_files_loaded_if_ge_0();
    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);                   post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);
    return 1;                                                                                             return 1;
}                                                                                                     }

int doe_reopen_file_last_line(void)                                                                   int doe_reopen_file_last_line(void)
{                                                                                                     {
    if (doe_reopen_file() == 0) {                                                                         if (doe_reopen_file() == 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    doe_last_line();                                                                                      doe_last_line();
    return 1;                                                                                             return 1;
}                                                                                                     }
int doe_reopen_file(void)                                                                             int doe_reopen_file(void)
{                                                                                                     {
    char file_pos_str[MAX_PATH_LEN+1];                                                                    char file_pos_str[MAX_PATH_LEN+1];
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];
    int ret;                                                                                              int ret;

    if (check_cur_buf_modified()) {                                                                       if (check_cur_buf_modified()) {
        ret = ask_yes_no(ASK_YES_NO,                                                                          ret = ask_yes_no(ASK_YES_NO,
         _("Buffer is modified, Are you OK to reopen file ?"));                                                _("Buffer is modified, Are you OK to reopen file ?"));
        if (ret <= 0)                                                                                         if (ret <= 0)
            return 0;                                                                                             return 0;
    }                                                                                                     }
    // memorize current file path before closing                                                          // memorize current file path before closing
    memorize_cur_file_pos_null(file_pos_str);                                                             memorize_cur_file_pos_null(file_pos_str);
    free_cur_edit_buf();                                                                                  free_cur_edit_buf();
    // CURDIR: abs-path is specified                                                                      // CURDIR: abs-path is specified
    get_file_line_col_from_str_null(file_pos_str, file_path, NULL, NULL);                                 get_file_line_col_from_str_null(file_pos_str, file_path, NULL, NULL);
    if (load_file_name_upp_low(file_path, TUL0, OOE0, MOE1, LFH0, RECURSIVE1) <= 0) {                     if (load_file_name_upp_low(file_path, TUL0, OOE0, MOE1, LFH0, RECURSIVE1) <= 0) {
        tio_beep();                                                                                           tio_beep();
        return 0;                                                                                             return 0;
    }                                                                                                     }
    goto_str_line_col_in_cur_buf(NULL);                                                                   goto_str_line_col_in_cur_buf(NULL);
#ifdef ENABLE_UNDO                                                                                    #ifdef ENABLE_UNDO
#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
    // file was reopened, re-memorize undo state.                                                         // file was reopened, re-memorize undo state.
    memorize_undo_state_before_change();                                                                  memorize_undo_state_before_change();
#endif // ENABLE_DEBUG                                                                                #endif // ENABLE_DEBUG
#endif // ENABLE_UNDO                                                                                 #endif // ENABLE_UNDO
    post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_CENTER, UPDATE_SCRN_ALL_SOON);                  post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_CENTER, UPDATE_SCRN_ALL_SOON);
    disp_status_bar_done(_("File re-loaded"));                                                            disp_status_bar_done(_("File re-loaded"));
    return 1;                                                                                             return 1;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
//|Func name               |files|close|un-mod|ask Y/N|file-name|Key  |                               //|Func name               |files|close|un-mod|ask Y/N|file-name|Key  |
//|                        |     |     | ified|       |         |     |                               //|                        |     |     | ified|       |         |     |
//|------------------------|-----|-----|------|-------|---------|-----|                               //|------------------------|-----|-----|------|-------|---------|-----|
//|doe_write_file_to()     | one |no   | Yes  | none  |New-name |@s   |write to new file              //|doe_write_file_to()     | one |no   | Yes  | none  |New-name |@s   |write to new file
//|doe_write_file_ask()    | one |no   | no   | Ask   |cur-name |@w   |                               //|doe_write_file_ask()    | one |no   | no   | Ask   |cur-name |@w   |
//|doe_write_file_always() | one |no   | no   | none  |cur-name |@W   |                               //|doe_write_file_always() | one |no   | no   | none  |cur-name |@W   |
//|doe_write_all_ask()     | All |no   | no   | Ask   |cur-name |@a   |                               //|doe_write_all_ask()     | All |no   | no   | Ask   |cur-name |@a   |
//|doe_write_all_modified()| All |no   | no   | none  |cur-name |@A   |                               //|doe_write_all_modified()| All |no   | no   | none  |cur-name |@A   |
//|doe_close_file_ask()    | one |Close| no   | Ask   |cur-name |^Q   |                               //|doe_close_file_ask()    | one |Close| no   | Ask   |cur-name |^Q   |
//|doe_close_file_always() | one |Close| no   | none  |cur-name |(@^Q)|                               //|doe_close_file_always() | one |Close| no   | none  |cur-name |(@^Q)|
//|doe_close_all_ask()     | All |Close| no   | Ask   |cur-name |@q   |                               //|doe_close_all_ask()     | All |Close| no   | Ask   |cur-name |@q   |
//|doe_close_all_modified()| All |Close| no   | none  |cur-name |@Q   |                               //|doe_close_all_modified()| All |Close| no   | none  |cur-name |@Q   |

int doe_write_file_to(void)                                                                           int doe_write_file_to(void)
{                                                                                                     {
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];

    strlcpy__(file_path, get_epc_buf()->file_path, MAX_PATH_LEN);                                         strlcpy__(file_path, get_epc_buf()->file_path, MAX_PATH_LEN);
    while (1) {                                                                                           while (1) {
        if (input_new_file_name_n_ask(file_path) <= 0) {                                                      if (input_new_file_name_n_ask(file_path) <= 0) {
            return -1;                                                                                            return -1;
        }                                                                                                     }
#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
        if (is_path_wildcard(file_path))                                                                      if (is_path_wildcard(file_path))
            continue;                                                                                             continue;
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER
        char org_file_path[MAX_PATH_LEN+1];                                                                   char org_file_path[MAX_PATH_LEN+1];
        buf_get_file_path(get_epc_buf(), org_file_path);                                                      buf_get_file_path(get_epc_buf(), org_file_path);
        buf_set_file_abs_path(get_epc_buf(), file_path);    // set new file name                              buf_set_file_abs_path(get_epc_buf(), file_path);    // set new file name
        if (backup_and_save_cur_buf(file_path) < 0) {                                                         if (backup_and_save_cur_buf(file_path) < 0) {
            buf_set_file_abs_path(get_epc_buf(), org_file_path);                                                  buf_set_file_abs_path(get_epc_buf(), org_file_path);
            return -1;                                                                                            return -1;
        }                                                                                                     }
        break;                                                                                                break;
    }                                                                                                     }
    char file_name[MAX_PATH_LEN+1];                                                                       char file_name[MAX_PATH_LEN+1];
    separate_path_to_dir_and_file(file_path, file_path, file_name);                                       separate_path_to_dir_and_file(file_path, file_path, file_name);
#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
    // copy new file name to filer next_file                                                              // copy new file name to filer next_file
    strlcpy__(get_cur_filer_view()->next_file, file_name, MAX_PATH_LEN);                                  strlcpy__(get_cur_filer_view()->next_file, file_name, MAX_PATH_LEN);
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER
    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);                   post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);
    disp_status_bar_done(_("Written to the file: %s"), file_name);                                        disp_status_bar_done(_("Written to the file: %s"), file_name);
    return 0;                                                                                             return 0;
}                                                                                                     }
int doe_write_file_ask(void)                                                                          int doe_write_file_ask(void)
{                                                                                                     {
    return write_file_ask(ANSWER_NO, NO_CLOSE_AFTER_SAVE_0);                                              return write_file_ask(ANSWER_NO, NO_CLOSE_AFTER_SAVE_0);
}                                                                                                     }
int doe_write_file_always(void)                                                                       int doe_write_file_always(void)
{                                                                                                     {
    return write_file_ask(ANSWER_FORCE, NO_CLOSE_AFTER_SAVE_0);                                           return write_file_ask(ANSWER_FORCE, NO_CLOSE_AFTER_SAVE_0);
}                                                                                                     }
int doe_write_all_ask(void)                                                                           int doe_write_all_ask(void)
{                                                                                                     {
    char file_pos_str[MAX_PATH_LEN+1];                                                                    char file_pos_str[MAX_PATH_LEN+1];
    memorize_cur_file_pos_null(file_pos_str);                                                             memorize_cur_file_pos_null(file_pos_str);
    write_all_ask(ANSWER_NO, NO_CLOSE_AFTER_SAVE_0);                                                      write_all_ask(ANSWER_NO, NO_CLOSE_AFTER_SAVE_0);
    recall_file_pos_null(file_pos_str);                                                                   recall_file_pos_null(file_pos_str);
    return 1;                                                                                             return 1;
}                                                                                                     }
int doe_write_all_modified(void)                                                                      int doe_write_all_modified(void)
{                                                                                                     {
    char file_pos_str[MAX_PATH_LEN+1];                                                                    char file_pos_str[MAX_PATH_LEN+1];
    memorize_cur_file_pos_null(file_pos_str);                                                             memorize_cur_file_pos_null(file_pos_str);
    write_all_ask(ANSWER_ALL, NO_CLOSE_AFTER_SAVE_0);                                                     write_all_ask(ANSWER_ALL, NO_CLOSE_AFTER_SAVE_0);
    recall_file_pos_null(file_pos_str);                                                                   recall_file_pos_null(file_pos_str);
    return 1;                                                                                             return 1;
}                                                                                                     }

PRIVATE int close_file(int yes_no);                                                                   PRIVATE int close_file(int yes_no);
int doe_close_file_ask(void)                                                                          int doe_close_file_ask(void)
{                                                                                                     {
    return close_file(ANSWER_NO);                                                                         return close_file(ANSWER_NO);
}                                                                                                     }
int doe_close_file_always(void)                                                                       int doe_close_file_always(void)
{                                                                                                     {
    return close_file(ANSWER_FORCE);                                                                      return close_file(ANSWER_FORCE);
}                                                                                                     }
PRIVATE int close_file(int yes_no)                                                                    PRIVATE int close_file(int yes_no)
{                                                                                                     {
    char file_pos_str[MAX_PATH_LEN+1];                                                                    char file_pos_str[MAX_PATH_LEN+1];

    if (is_app_list_mode()) {                                                                             if (is_app_list_mode()) {
        editor_quit = EDITOR_CANCELLED;                                                                       editor_quit = EDITOR_CANCELLED;
        return 0;                                                                                             return 0;
    }                                                                                                     }
    int ret = write_file_ask(yes_no, CLOSE_AFTER_SAVE_1);                                                 int ret = write_file_ask(yes_no, CLOSE_AFTER_SAVE_1);
    if (ret <= ANSWER_CANCEL) {                                                                           if (ret <= ANSWER_CANCEL) {
        // Cancel/Error                                                                                       // Cancel/Error
        return -1;                                                                                            return -1;
    }                                                                                                     }
    // Yes/No                                                                                             // Yes/No

    // If the current file has been the last open file, memorize it later.                                // If the current file has been the last open file, memorize it later.
    memorize_cur_file_pos_null(file_pos_str);                                                             memorize_cur_file_pos_null(file_pos_str);
    free_cur_edit_buf();                                                                                  free_cur_edit_buf();

    doe_refresh_editor();                                                                                 doe_refresh_editor();
    disp_status_bar_done(_("One buffer closed"));                                                         disp_status_bar_done(_("One buffer closed"));
#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
    if (count_edit_bufs() == 0) {                                                                         if (count_edit_bufs() == 0) {
        // This file is the last open file.                                                                   // This file is the last open file.
        // Memorize the last open file's cursor pos.                                                          // Memorize the last open file's cursor pos.
        update_history(HISTORY_TYPE_IDX_CURSPOS, file_pos_str, 1);                                            update_history(HISTORY_TYPE_IDX_CURSPOS, file_pos_str, 1);
    }                                                                                                     }
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
    return 2;                                                                                             return 2;
}                                                                                                     }
PRIVATE int write_close_all(int yes_no);                                                              PRIVATE int write_close_all(int yes_no);
int doe_close_all_ask(void)                                                                           int doe_close_all_ask(void)
{                                                                                                     {
    write_close_all(ANSWER_NO);                                                                           write_close_all(ANSWER_NO);
    return 0;                                                                                             return 0;
}                                                                                                     }
int doe_close_all_modified(void)                                                                      int doe_close_all_modified(void)
{                                                                                                     {
    write_close_all(ANSWER_YES);                                                                          write_close_all(ANSWER_YES);
    return 0;                                                                                             return 0;
}                                                                                                     }
PRIVATE int write_close_all(int yes_no)                                                               PRIVATE int write_close_all(int yes_no)
{                                                                                                     {
    char file_pos_str[MAX_PATH_LEN+1];                                                                    char file_pos_str[MAX_PATH_LEN+1];
    if (is_app_list_mode()) {                                                                             if (is_app_list_mode()) {
        editor_quit = EDITOR_CANCELLED;                                                                       editor_quit = EDITOR_CANCELLED;
        return 0;                                                                                             return 0;
    }                                                                                                     }
    // memorize the last current file.                                                                    // memorize the last current file.
    memorize_cur_file_pos_null(file_pos_str);                                                             memorize_cur_file_pos_null(file_pos_str);

    close_all_not_modified();                                                                             close_all_not_modified();
    if (write_all_ask(yes_no, CLOSE_AFTER_SAVE_1) < 0)                                                    if (write_all_ask(yes_no, CLOSE_AFTER_SAVE_1) < 0)
        return -1;                                                                                            return -1;
    close_all();                                                                                          close_all();

#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
    // memorize the last current file's cursor pos.                                                       // memorize the last current file's cursor pos.
    update_history(HISTORY_TYPE_IDX_CURSPOS, file_pos_str, 1);                                            update_history(HISTORY_TYPE_IDX_CURSPOS, file_pos_str, 1);
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
    return 0;                                                                                             return 0;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int doe_read_file_into_cur_pos(void)                                                                  int doe_read_file_into_cur_pos(void)
{                                                                                                     {
    char file_pos_str[MAX_PATH_LEN+1];                                                                    char file_pos_str[MAX_PATH_LEN+1];
    memorize_cur_file_pos_null(file_pos_str);                                                             memorize_cur_file_pos_null(file_pos_str);
    open_file_recursive(RECURSIVE0);                                                                      open_file_recursive(RECURSIVE0);
    if (get_files_loaded() < 0) {                                                                         if (get_files_loaded() < 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    doe_select_all_lines();                                                                               doe_select_all_lines();
    doe_copy_text();                                                                                      doe_copy_text();
    doe_close_file_ask();                                                                                 doe_close_file_ask();
    recall_file_pos_null(file_pos_str);                                                                   recall_file_pos_null(file_pos_str);
    doe_paste_text_with_pop();                                                                            doe_paste_text_with_pop();
    return 0;                                                                                             return 0;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
char *get_app_dir(void)                                                                               char *get_app_dir(void)
{                                                                                                     {
    static char dir[MAX_PATH_LEN+1];                                                                      static char dir[MAX_PATH_LEN+1];

#if defined(APP_DIR)                                                                                  #if defined(APP_DIR)
    snprintf_(dir, MAX_PATH_LEN+1, "%s/%s", get_home_dir(), APP_DIR);                                     snprintf_(dir, MAX_PATH_LEN+1, "%s/%s", get_home_dir(), APP_DIR);
#else                                                                                                 #else
    snprintf_(dir, MAX_PATH_LEN+1, "%s", get_home_dir());                                                 snprintf_(dir, MAX_PATH_LEN+1, "%s", get_home_dir());
#endif                                                                                                #endif
    return dir;                                                                                           return dir;
}                                                                                                     }

#define _CLIPBOARD_FILE_NAME    "clipboard"     // default clipboard file name                        #define _CLIPBOARD_FILE_NAME    "clipboard"     // default clipboard file name
#if defined(APP_DIR)                                                                                  #if defined(APP_DIR)
#define CLIPBOARD_FILE_NAME     _CLIPBOARD_FILE_NAME                                                  #define CLIPBOARD_FILE_NAME     _CLIPBOARD_FILE_NAME
#else // APP_DIR                                                                                      #else // APP_DIR
#define CLIPBOARD_FILE_NAME     "." _CLIPBOARD_FILE_NAME                                              #define CLIPBOARD_FILE_NAME     "." _CLIPBOARD_FILE_NAME
#endif // APP_DIR                                                                                     #endif // APP_DIR

// clipboard file is common to all be-editor instances in one user                                    // clipboard file is common to all be-editor instances in one user
const char *get_clipboard_file_path()                                                                 const char *get_clipboard_file_path()
{                                                                                                     {
    static char file_path[MAX_PATH_LEN+1];                                                                static char file_path[MAX_PATH_LEN+1];

    snprintf_(file_path, MAX_PATH_LEN+1, "%s/%s", get_app_dir(), CLIPBOARD_FILE_NAME);                    snprintf_(file_path, MAX_PATH_LEN+1, "%s/%s", get_app_dir(), CLIPBOARD_FILE_NAME);
    return file_path;                                                                                     return file_path;
}                                                                                                     }
int save_cut_buf_to_clipboard_file()                                                                  int save_cut_buf_to_clipboard_file()
{                                                                                                     {
    return save_buf_to_file(CUT_BUFS_TOP_BUF, get_clipboard_file_path());                                 return save_buf_to_file(CUT_BUFS_TOP_BUF, get_clipboard_file_path());
}                                                                                                     }

int load_clipboard_into_cut_buf()                                                                     int load_clipboard_into_cut_buf()
{                                                                                                     {
    return load_file_into_buf(CUT_BUFS_TOP_BUF, get_clipboard_file_path());                               return load_file_into_buf(CUT_BUFS_TOP_BUF, get_clipboard_file_path());
}                                                                                                     }

int doe_read_clipboard_into_cur_char()                                                                int doe_read_clipboard_into_cur_char()
{                                                                                                     {
    return doe_read_clipboard_into_cur_pos_(0);                                                           return doe_read_clipboard_into_cur_pos_(0);
}                                                                                                     }
int doe_read_clipboard_into_cur_line()                                                                int doe_read_clipboard_into_cur_line()
{                                                                                                     {
    return doe_read_clipboard_into_cur_pos_(1);                                                           return doe_read_clipboard_into_cur_pos_(1);
}                                                                                                     }
int doe_read_clipboard_into_cur_pos_(int char0_line1)                                                 int doe_read_clipboard_into_cur_pos_(int char0_line1)
{                                                                                                     {
    push_cut_buf();                                                                                       push_cut_buf();
    if (load_clipboard_into_cut_buf() < 0) {                                                              if (load_clipboard_into_cut_buf() < 0) {
        pop_n_free_from_cut_buf();                                                                            pop_n_free_from_cut_buf();
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (char0_line1 == 0) {                                                                               if (char0_line1 == 0) {
        // set character cut ==> character paste                                                              // set character cut ==> character paste
        SET_CUR_CBUF_STATE(buf_CUT_MODE, CUT_MODE_H_CHAR);                                                    SET_CUR_CBUF_STATE(buf_CUT_MODE, CUT_MODE_H_CHAR);
    } else {                                                                                              } else {
        // set line cut ==> line paste                                                                        // set line cut ==> line paste
        SET_CUR_CBUF_STATE(buf_CUT_MODE, CUT_MODE_N_LINE);                                                    SET_CUR_CBUF_STATE(buf_CUT_MODE, CUT_MODE_N_LINE);
    }                                                                                                     }
    doe_paste_text_with_pop();                                                                            doe_paste_text_with_pop();
    return 0;                                                                                             return 0;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int doe_run_line_soon(void)                                                                           int doe_run_line_soon(void)
{                                                                                                     {
    char buffer[MAX_PATH_LEN+1];                                                                          char buffer[MAX_PATH_LEN+1];

    // EPCBVC_CL->data may be in history buffer and freed in calling update_history().                    // EPCBVC_CL->data may be in history buffer and freed in calling update_history().
    // So copy to local buffer.                                                                           // So copy to local buffer.
    strlcpy__(buffer, EPCBVC_CL->data, MAX_PATH_LEN);                                                     strlcpy__(buffer, EPCBVC_CL->data, MAX_PATH_LEN);

    clear_fork_exec_counter();                                                                            clear_fork_exec_counter();
    fork_exec_sh_c(SETTERM1, SEPARATE1, PAUSE1, buffer);                                                  fork_exec_sh_c(SETTERM1, SEPARATE1, PAUSE1, buffer);

    if (is_app_list_mode()) {                                                                             if (is_app_list_mode()) {
        editor_quit = EDITOR_DONE;                                                                            editor_quit = EDITOR_DONE;
        return 0;                                                                                             return 0;
    }                                                                                                     }
    doe_refresh_editor();                                                                                 doe_refresh_editor();
    return 0;                                                                                             return 0;
}                                                                                                     }

#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
int doe_call_filer(void)                                                                              int doe_call_filer(void)
{                                                                                                     {
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];
    call_filer(1, 0, "", "", file_path, MAX_PATH_LEN);                                                    call_filer(1, 0, "", "", file_path, MAX_PATH_LEN);
    return 0;                                                                                             return 0;
}                                                                                                     }
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
#ifdef ENABLE_HELP                                                                                    #ifdef ENABLE_HELP
int doe_editor_splash(void)                                                                           int doe_editor_splash(void)
{                                                                                                     {
    disp_splash(100);                                                                                     disp_splash(100);

    examine_key_code();                                                                                   examine_key_code();

    set_edit_win_update_needed(UPDATE_SCRN_ALL_SOON);                                                     set_edit_win_update_needed(UPDATE_SCRN_ALL_SOON);
    return 0;                                                                                             return 0;
}                                                                                                     }
#endif // ENABLE_HELP                                                                                 #endif // ENABLE_HELP

int doe_display_color_settings(void)                                                                  int doe_display_color_settings(void)
{                                                                                                     {
    display_color_settings();                                                                             display_color_settings();
    return 0;                                                                                             return 0;
}                                                                                                     }
void display_color_settings(void)                                                                     void display_color_settings(void)
{                                                                                                     {
    display_color_pairs(0, 0);                                                                            display_color_pairs(0, 0);
    input_key_loop();                                                                                     input_key_loop();

#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
    tio_clear_flash_screen(1);                                                                            tio_clear_flash_screen(1);
    display_item_colors(0, 0);                                                                            display_item_colors(0, 0);
    input_key_loop();                                                                                     input_key_loop();
#ifdef ENABLE_REGEX                                                                                   #ifdef ENABLE_REGEX
    tio_clear_flash_screen(1);                                                                            tio_clear_flash_screen(1);
    display_bracket_hl_colors(0, 0);                                                                      display_bracket_hl_colors(0, 0);
    input_key_loop();                                                                                     input_key_loop();
#endif // ENABLE_REGEX                                                                                #endif // ENABLE_REGEX
#endif // ENABLE_DEBUG                                                                                #endif // ENABLE_DEBUG
}                                                                                                     }

int doe_editor_menu_0(void)                                                                           int doe_editor_menu_0(void)
{                                                                                                     {
    editor_menu_n(-1);                                                                                    editor_menu_n(-1);
    return 0;                                                                                             return 0;
}                                                                                                     }
int doe_editor_menu_1(void)                                                                           int doe_editor_menu_1(void)
{                                                                                                     {
    editor_menu_n(0);                                                                                     editor_menu_n(0);
    return 0;                                                                                             return 0;
}                                                                                                     }
int doe_editor_menu_2(void)                                                                           int doe_editor_menu_2(void)
{                                                                                                     {
    editor_menu_n(1);                                                                                     editor_menu_n(1);
    return 0;                                                                                             return 0;
}                                                                                                     }
int doe_editor_menu_3(void)                                                                           int doe_editor_menu_3(void)
{                                                                                                     {
    editor_menu_n(2);                                                                                     editor_menu_n(2);
    return 0;                                                                                             return 0;
}                                                                                                     }
int doe_editor_menu_4(void)                                                                           int doe_editor_menu_4(void)
{                                                                                                     {
    editor_menu_n(3);                                                                                     editor_menu_n(3);
    return 0;                                                                                             return 0;
}                                                                                                     }
int doe_editor_menu_5(void)                                                                           int doe_editor_menu_5(void)
{                                                                                                     {
    editor_menu_n(4);                                                                                     editor_menu_n(4);
    return 0;                                                                                             return 0;
}                                                                                                     }
int doe_editor_menu_6(void)                                                                           int doe_editor_menu_6(void)
{                                                                                                     {
    editor_menu_n(5);                                                                                     editor_menu_n(5);
    return 0;                                                                                             return 0;
}                                                                                                     }
int doe_editor_menu_7(void)                                                                           int doe_editor_menu_7(void)
{                                                                                                     {
    editor_menu_n(6);                                                                                     editor_menu_n(6);
    return 0;                                                                                             return 0;
}                                                                                                     }
int doe_editor_menu_8(void)                                                                           int doe_editor_menu_8(void)
{                                                                                                     {
    editor_menu_n(7);                                                                                     editor_menu_n(7);
    return 0;                                                                                             return 0;
}                                                                                                     }
int doe_editor_menu_9(void)                                                                           int doe_editor_menu_9(void)
{                                                                                                     {
    editor_menu_n(8);                                                                                     editor_menu_n(8);
    return 0;                                                                                             return 0;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int write_all_ask(int yes_no, close_after_save_t close)                                               int write_all_ask(int yes_no, close_after_save_t close)
{                                                                                                     {
    switch_epc_buf_to_top();                                                                              switch_epc_buf_to_top();
    while (is_epc_buf_valid()) {                                                                          while (is_epc_buf_valid()) {
        int ret = write_file_ask(yes_no, close);                                                              int ret = write_file_ask(yes_no, close);
        if (ret <= ANSWER_CANCEL) {                                                                           if (ret <= ANSWER_CANCEL) {
            disp_status_bar_done(_("Cancelled"));                                                                 disp_status_bar_done(_("Cancelled"));
            return -1;                                                                                            return -1;
        }                                                                                                     }
        if (switch_epc_buf_to_next(0, 0) == 0)                                                                if (switch_epc_buf_to_next(0, 0) == 0)
            break;                                                                                                break;
    }                                                                                                     }
    disp_status_bar_done(_("All buffers are checked and saved if modified"));                             disp_status_bar_done(_("All buffers are checked and saved if modified"));
    return 1;                                                                                             return 1;
}                                                                                                     }
int close_all_not_modified(void)                                                                      int close_all_not_modified(void)
{                                                                                                     {
    disp_status_bar_ing(_("Freeing buffers..."));                                                         disp_status_bar_ing(_("Freeing buffers..."));
    switch_epc_buf_to_top();                                                                              switch_epc_buf_to_top();
    while (is_epc_buf_valid()) {                                                                          while (is_epc_buf_valid()) {
        if (check_cur_buf_modified()) {                                                                       if (check_cur_buf_modified()) {
            if (switch_epc_buf_to_next(0, 0) == 0)                                                                if (switch_epc_buf_to_next(0, 0) == 0)
                break;                                                                                                break;
        } else {                                                                                              } else {
            free_cur_edit_buf();                                                                                  free_cur_edit_buf();
        }                                                                                                     }
        tio_refresh();                                                                                        tio_refresh();
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }
int close_all(void)                                                                                   int close_all(void)
{                                                                                                     {
    disp_status_bar_ing(_("Freeing all buffers..."));                                                     disp_status_bar_ing(_("Freeing all buffers..."));
    switch_epc_buf_to_top();                                                                              switch_epc_buf_to_top();
    while (free_cur_edit_buf()) {                                                                         while (free_cur_edit_buf()) {
        // loop                                                                                               // loop
        tio_refresh();                                                                                        tio_refresh();
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }

// | "yes_no" value | ask yes / no          | save or not           |                                 // | "yes_no" value | ask yes / no          | save or not           |
// |----------------|-----------------------|-----------------------|                                 // |----------------|-----------------------|-----------------------|
// | ANSWER_FORCE   | save soon if modified | save soon if modified |                                 // | ANSWER_FORCE   | save soon if modified | save soon if modified |
// | < ANSWER_FORCE | ask if not modified   | save if answered YES  |                                 // | < ANSWER_FORCE | ask if not modified   | save if answered YES  |
// | ANSWER_ALL     | save soon if modified | save soon if modified |                                 // | ANSWER_ALL     | save soon if modified | save soon if modified |
// | < ANSWER_ALL   | ask if modified       | save if answered YES  |                                 // | < ANSWER_ALL   | ask if modified       | save if answered YES  |

int write_file_ask(int yes_no, close_after_save_t close)                                              int write_file_ask(int yes_no, close_after_save_t close)
{                                                                                                     {
    int ret = yes_no;                                                                                     int ret = yes_no;

    switch_epc_buf_to_valid_buf();                                                                        switch_epc_buf_to_valid_buf();

    /////if (yes_no < ANSWER_FORCE && check_cur_buf_modified() == 0) {                             <
    if (check_cur_buf_modified() == 0) {                                                                  if (check_cur_buf_modified() == 0) {
        disp_status_bar_done(_("Buffer is NOT modified"));                                                    disp_status_bar_done(_("Buffer is NOT modified"));
        return ANSWER_NO;                                                                                     return ANSWER_NO;
    }                                                                                                     }
    /////if (yes_no == ANSWER_FORCE && check_cur_buf_modified() == 0) {                            <
    /////   ret = ask_yes_no(ASK_YES_NO | ASK_ALL, _("Save unmodified buffer ?"));                 <
    /////   if (ret <= 0) {                                                                        <
    /////       disp_status_bar_done(_("Cancelled"));                                              <
    /////       return ANSWER_CANCEL;                                                              <
    /////   }                                                                                      <
    /////   ret = ANSWER_FORCE;                                                                    <
    /////}                                                                                         <
    set_edit_win_update_needed(UPDATE_SCRN_ALL_SOON);                                                     set_edit_win_update_needed(UPDATE_SCRN_ALL_SOON);
    update_screen_editor(1, 1, 1);                                                                        update_screen_editor(1, 1, 1);
    if (ret < ANSWER_ALL) {                                                                               if (ret < ANSWER_ALL) {
        ret = ask_yes_no(ASK_YES_NO | ASK_ALL,                                                                ret = ask_yes_no(ASK_YES_NO | ASK_ALL,
         close == 0                                                                                            close == 0
          ? _("Save modified buffer ?")                                                                         ? _("Save modified buffer ?")
          : _("Save modified buffer (ANSWERING \"No\" WILL DISCARD CHANGES) ?"));                               : _("Save modified buffer (ANSWERING \"No\" WILL DISCARD CHANGES) ?"));
        if (ret < 0) {                                                                                        if (ret < 0) {
            disp_status_bar_done(_("Cancelled"));                                                                 disp_status_bar_done(_("Cancelled"));
            return ANSWER_CANCEL;                                                                                 return ANSWER_CANCEL;
        }                                                                                                     }
    }                                                                                                     }
    if (ret >= ANSWER_YES) {    // Yes                                                                    if (ret >= ANSWER_YES) {    // Yes
        if (backup_and_save_cur_buf_ask() < 0) {                                                              if (backup_and_save_cur_buf_ask() < 0) {
            return ANSWER_CANCEL;                                                                                 return ANSWER_CANCEL;
        }                                                                                                     }
        disp_status_bar_done(_("Buffer saved to file"));                                                      disp_status_bar_done(_("Buffer saved to file"));
    }                                                                                                     }
    return ret;     // all:2, yes:1                                                                       return ret;     // all:2, yes:1
}                                                                                                     }

int doe_inc_key_list_lines(void)                                                                      int doe_inc_key_list_lines(void)
{                                                                                                     {
    do_inc_key_list_lines_();                                                                             do_inc_key_list_lines_();
    post_cmd_processing(NULL, CURS_MOVE_NONE, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);                    post_cmd_processing(NULL, CURS_MOVE_NONE, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);
    return 0;                                                                                             return 0;
}                                                                                                     }
//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
void win_push_win_size(void)                                                                          void win_push_win_size(void)
{                                                                                                     {
    // draw parent screen reversed                                                                        // draw parent screen reversed
    update_screen_app(1, 1, 1);                                                                           update_screen_app(1, 1, 1);

    inc_win_depth();                                                                                      inc_win_depth();
    win_reinit_win_size();                                                                                win_reinit_win_size();
    set_color_by_idx(ITEM_COLOR_IDX_KEY_LIST2, 0);                                                        set_color_by_idx(ITEM_COLOR_IDX_KEY_LIST2, 0);
    main_win_clear_screen();        // draw dark frame                                                    main_win_clear_screen();        // draw dark frame
    inc_win_depth();                                                                                      inc_win_depth();
    win_reinit_win_size();                                                                                win_reinit_win_size();
}                                                                                                     }
void win_pop_win_size(void)                                                                           void win_pop_win_size(void)
{                                                                                                     {
    dec_win_depth();                                                                                      dec_win_depth();
    dec_win_depth();                                                                                      dec_win_depth();
    win_reinit_win_size();                                                                                win_reinit_win_size();

    // draw parent screen                                                                                 // draw parent screen
    update_screen_app(1, 1, 1);                                                                           update_screen_app(1, 1, 1);
}                                                                                                     }

int update_screen_app(int title_bar, int status_bar, int refresh)                                     int update_screen_app(int title_bar, int status_bar, int refresh)
{                                                                                                     {
#ifndef ENABLE_FILER                                                                                  #ifndef ENABLE_FILER
    set_edit_win_update_needed(UPDATE_SCRN_ALL_SOON);                                                     set_edit_win_update_needed(UPDATE_SCRN_ALL_SOON);
    update_screen_editor(title_bar, status_bar, refresh);                                                 update_screen_editor(title_bar, status_bar, refresh);
#else // ENABLE_FILER                                                                                 #else // ENABLE_FILER
    if (GET_APPMD(app_EDITOR_FILER) == 0) {                                                               if (GET_APPMD(app_EDITOR_FILER) == 0) {
        set_edit_win_update_needed(UPDATE_SCRN_ALL_SOON);                                                     set_edit_win_update_needed(UPDATE_SCRN_ALL_SOON);
        update_screen_editor(title_bar, status_bar, refresh);                                                 update_screen_editor(title_bar, status_bar, refresh);
    } else {                                                                                              } else {
        update_screen_filer(title_bar, status_bar, refresh);                                                  update_screen_filer(title_bar, status_bar, refresh);
    }                                                                                                     }
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER
    return 0;                                                                                             return 0;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int update_screen_editor(int title_bar, int status_bar, int refresh)                                  int update_screen_editor(int title_bar, int status_bar, int refresh)
{                                                                                                     {
    int pane_sel_idx;       // 0: not current pane, 1: current pane                                       int pane_sel_idx;       // 0: not current pane, 1: current pane
    int cur_pane_idx;       // pane index                                                                 int cur_pane_idx;       // pane index
    int pane_idx;           // pane index                                                                 int pane_idx;           // pane index

    EPCBVC_CURSOR_Y = MIN(edit_win_get_text_lines()-1, EPCBVC_CURSOR_Y);                                  EPCBVC_CURSOR_Y = MIN(edit_win_get_text_lines()-1, EPCBVC_CURSOR_Y);
////mflf_d_printf("{{{{{{{{{{{{{{{{{{{{{{{{{\n");                                                     ////mflf_d_printf("{{{{{{{{{{{{{{{{{{{{{{{{{\n");
    // title bar                                                                                          // title bar
    if (title_bar) {                                                                                      if (title_bar) {
        editor_disp_title_bar();                                                                              editor_disp_title_bar();
    }                                                                                                     }

    if (get_edit_win_update_needed()) {                                                                   if (get_edit_win_update_needed()) {
        if (GET_APPMD(ed_EDITOR_PANES) == 0) {      // 1 pane                                                 if (GET_APPMD(ed_EDITOR_PANES) == 0) {      // 1 pane
            win_select_win(WIN_IDX_SUB_WHOLE);                                                                    win_select_win(WIN_IDX_SUB_WHOLE);
            disp_edit_win(1);                                                                                     disp_edit_win(1);
        } else {                                    // 2 panes                                                } else {                                    // 2 panes
            cur_pane_idx = get_editor_cur_pane_idx();                                                             cur_pane_idx = get_editor_cur_pane_idx();
            for (pane_sel_idx = 0; pane_sel_idx < EDITOR_PANES; pane_sel_idx++) {                                 for (pane_sel_idx = 0; pane_sel_idx < EDITOR_PANES; pane_sel_idx++) {
                // 1st, update not current pane.                                                                      // 1st, update not current pane.
                // 2nd, update current pane.                                                                          // 2nd, update current pane.
                if (pane_sel_idx == 0) {                                                                              if (pane_sel_idx == 0) {
                    // not current pane                                                                                   // not current pane
                    pane_idx = 1 - cur_pane_idx;    // 0 ==> 1, 1 ==> 0                                                   pane_idx = 1 - cur_pane_idx;    // 0 ==> 1, 1 ==> 0
                } else {                                                                                              } else {
                    // current pane                                                                                       // current pane
                    pane_idx = cur_pane_idx;                                                                              pane_idx = cur_pane_idx;
                }                                                                                                     }
                win_select_win(WIN_IDX_SUB_LEFT + pane_idx);                                                          win_select_win(WIN_IDX_SUB_LEFT + pane_idx);
                if (pane_sel_idx == 0) {                                                                              if (pane_sel_idx == 0) {
                    set_work_space_color_dark();                                                                          set_work_space_color_dark();
                }                                                                                                     }
////flf_d_printf("pane_sel_idx: %d, pane_idx: %d\n", pane_sel_idx, pane_idx);                         ////flf_d_printf("pane_sel_idx: %d, pane_idx: %d\n", pane_sel_idx, pane_idx);
                set_editor_cur_pane_idx(pane_idx);                                                                    set_editor_cur_pane_idx(pane_idx);
                disp_edit_win(pane_sel_idx);                                                                          disp_edit_win(pane_sel_idx);
                if (pane_sel_idx == 0) {                                                                              if (pane_sel_idx == 0) {
                    set_work_space_color_normal();                                                                        set_work_space_color_normal();
                }                                                                                                     }
            }                                                                                                     }
        }                                                                                                     }
    }                                                                                                     }

    // status bar                                                                                         // status bar
    if (status_bar) {                                                                                     if (status_bar) {
        disp_status_bar_editor();                                                                             disp_status_bar_editor();
        // key list                                                                                           // key list
        disp_key_list_editor();                                                                               disp_key_list_editor();
    }                                                                                                     }

    set_edit_cursor_pos();                                                                                set_edit_cursor_pos();

    if (refresh) {                                                                                        if (refresh) {
        tio_refresh();                                                                                        tio_refresh();
    }                                                                                                     }
    clear_edit_win_update_needed();                                                                       clear_edit_win_update_needed();
////mflf_d_printf("}}}}}}}}}}}}}}}}}}}}}}}}}\n");                                                     ////mflf_d_printf("}}}}}}}}}}}}}}}}}}}}}}}}}\n");
    return 0;                                                                                             return 0;
}                                                                                                     }

int disp_status_bar_editor(void)                                                                      int disp_status_bar_editor(void)
{                                                                                                     {
    int bytes, byte_idx;                                                                                  int bytes, byte_idx;
#define UTF8_CODE_LEN       (17+1+8+1)      // "00-00-00-00-00-00(U+xxxxxx)"                          #define UTF8_CODE_LEN       (17+1+8+1)      // "00-00-00-00-00-00(U+xxxxxx)"
    char buf_char_code[UTF8_CODE_LEN+1];    // "00-00-00-00-00-00(U+xxxxxx)"                              char buf_char_code[UTF8_CODE_LEN+1];    // "00-00-00-00-00-00(U+xxxxxx)"
    unsigned long xx;                                                                                     unsigned long xx;
    unsigned long disp_len;                                                                               unsigned long disp_len;
#define SEL_LINES_LEN       (1+4+10+1)      // " LNS:9999999999"                                      #define SEL_LINES_LEN       (1+4+10+1)      // " LNS:9999999999"
    char buf_lines_sel[SEL_LINES_LEN] = "";                                                               char buf_lines_sel[SEL_LINES_LEN] = "";
    char buffer[MAX_EDIT_LINE_LEN+1];                                                                     char buffer[MAX_EDIT_LINE_LEN+1];

    xx = col_idx_from_byte_idx(EPCBVC_CL->data, 0, EPCBVC_CLBI) + 1;                                      xx = col_idx_from_byte_idx(EPCBVC_CL->data, 0, EPCBVC_CLBI) + 1;
    disp_len = col_idx_from_byte_idx(EPCBVC_CL->data, 0, MAX_EDIT_LINE_LEN) + 1;                          disp_len = col_idx_from_byte_idx(EPCBVC_CL->data, 0, MAX_EDIT_LINE_LEN) + 1;

    strcpy__(buf_char_code, "");                                                                          strcpy__(buf_char_code, "");
    bytes = utf8c_bytes(&EPCBVC_CL->data[EPCBVC_CLBI]);                                                   bytes = utf8c_bytes(&EPCBVC_CL->data[EPCBVC_CLBI]);
    for (byte_idx = 0; byte_idx < bytes; byte_idx++) {                                                    for (byte_idx = 0; byte_idx < bytes; byte_idx++) {
        snprintf(&buf_char_code[strnlen(buf_char_code, UTF8_CODE_LEN)], 3+1,                                  snprintf(&buf_char_code[strnlen(buf_char_code, UTF8_CODE_LEN)], 3+1,
         byte_idx == 0 ? "%02x" : "-%02x",                                                                     byte_idx == 0 ? "%02x" : "-%02x",
         (unsigned char)EPCBVC_CL->data[EPCBVC_CLBI + byte_idx]);                                              (unsigned char)EPCBVC_CL->data[EPCBVC_CLBI + byte_idx]);
    }                                                                                                     }
#ifdef ENABLE_UTF8                                                                                    #ifdef ENABLE_UTF8
    // show Unicode                                                                                       // show Unicode
    if (bytes >= 2) {                                                                                     if (bytes >= 2) {
        snprintf(&buf_char_code[strnlen(buf_char_code, UTF8_CODE_LEN)], 8+1, "(U+%04x)",                      snprintf(&buf_char_code[strnlen(buf_char_code, UTF8_CODE_LEN)], 8+1, "(U+%04x)",
         (unsigned int)utf8c_decode(&EPCBVC_CL->data[EPCBVC_CLBI]));                                           (unsigned int)utf8c_decode(&EPCBVC_CL->data[EPCBVC_CLBI]));
    }                                                                                                     }
#endif // ENABLE_UTF8                                                                                 #endif // ENABLE_UTF8

    if (IS_MARK_SET(CUR_EBUF_STATE(buf_CUT_MODE))) {                                                      if (IS_MARK_SET(CUR_EBUF_STATE(buf_CUT_MODE))) {
        snprintf(buf_lines_sel, SEL_LINES_LEN, " LNS:%2d", lines_selected());                                 snprintf(buf_lines_sel, SEL_LINES_LEN, " LNS:%2d", lines_selected());
    }                                                                                                     }

    strcpy__(buffer, "");                                                                                 strcpy__(buffer, "");
    strlcat__(buffer, MAX_EDIT_LINE_LEN,                                                                  strlcat__(buffer, MAX_EDIT_LINE_LEN,
     _("LINE:%4lu/%-4lu COLUMN:%3lu/%-3lu SIZE:%6lu%s CODE:%s ENC:%s EOL:%s"));                            _("LINE:%4lu/%-4lu COLUMN:%3lu/%-3lu SIZE:%6lu%s CODE:%s ENC:%s EOL:%s"));
    disp_status_bar_percent_editor(                                                                       disp_status_bar_percent_editor(
     buffer, EPCBVC_CL->line_num, get_epc_buf()->buf_lines, xx, disp_len,                                  buffer, EPCBVC_CL->line_num, get_epc_buf()->buf_lines, xx, disp_len,
     get_epc_buf()->buf_size, buf_lines_sel, buf_char_code,                                                get_epc_buf()->buf_size, buf_lines_sel, buf_char_code,
     buf_encode_str(get_epc_buf()), buf_eol_str(get_epc_buf()));                                           buf_encode_str(get_epc_buf()), buf_eol_str(get_epc_buf()));
    return 1;                                                                                             return 1;
}                                                                                                     }

void disp_key_list_editor(void)                                                                       void disp_key_list_editor(void)
{                                                                                                     {
    char *editor_key_lists[] = {                                                                          char *editor_key_lists[] = {
 "{Menu} "                                                                                             "{Menu} "
 " {Rec  } {Play } {SchBW} {SchFW} "                                                                   " {Rec  } {Play } {SchBW} {SchFW} "
 " {Mark } {Cut  } {Copy } {Pop  } "                                                                   " {Mark } {Cut  } {Copy } {Pop  } "
 " {Paste} {Dupli} {Files} {TagJp}",                                                                   " {Paste} {Dupli} {Files} {TagJp}",
 "<doe_close_file_ask>Quit "                                                                           "<doe_close_file_ask>Quit "
 "<doe_cut_to_head>CutToHead "                                                                         "<doe_cut_to_head>CutToHead "
 "<doe_cut_text>CutLine "                                                                              "<doe_cut_text>CutLine "
 "<doe_cut_to_tail>CutToTail "                                                                         "<doe_cut_to_tail>CutToTail "
 "<doe_copy_text>CopyLine "                                                                            "<doe_copy_text>CopyLine "
 "<doe_paste_text_with_pop>PasteWPop "                                                                 "<doe_paste_text_with_pop>PasteWPop "
 "<doe_paste_text_without_pop>PasteWoPop "                                                             "<doe_paste_text_without_pop>PasteWoPop "
 "<doe_duplicate_text>DupLine "                                                                        "<doe_duplicate_text>DupLine "
 "<doe_first_line>TopOfFile "                                                                          "<doe_first_line>TopOfFile "
 "<doe_last_line>BotOfFile "                                                                           "<doe_last_line>BotOfFile "
 "<doe_prev_word>PrevWord "                                                                            "<doe_prev_word>PrevWord "
 "<doe_next_word>NextWord ",                                                                           "<doe_next_word>NextWord ",

 "<doe_close_all_ask>CloseAll "                                                                        "<doe_close_all_ask>CloseAll "
 "<doe_open_file>OpenFile "                                                                            "<doe_open_file>OpenFile "
 "<doe_write_file_ask>WriteFile "                                                                      "<doe_write_file_ask>WriteFile "
 "<doe_search_backward_first>Search BW "                                                               "<doe_search_backward_first>Search BW "
 "<doe_search_forward_first>Search FW "                                                                "<doe_search_forward_first>Search FW "
 "<doe_replace>Replace "                                                                               "<doe_replace>Replace "
 "<doe_switch_to_file_list>FileList "                                                                  "<doe_switch_to_file_list>FileList "
 "<doe_switch_to_prev_file>PrevFile "                                                                  "<doe_switch_to_prev_file>PrevFile "
 "<doe_switch_to_next_file>NextFile "                                                                  "<doe_switch_to_next_file>NextFile "
#if APP_REL_LVL == APP_REL_LVL_EXPERIMENTAL                                                           #if APP_REL_LVL == APP_REL_LVL_EXPERIMENTAL
 "<doe_switch_to_prev_buffers>PrevBufs "                                                               "<doe_switch_to_prev_buffers>PrevBufs "
 "<doe_switch_to_next_buffers>NextBufs "                                                               "<doe_switch_to_next_buffers>NextBufs "
#endif // APP_REL_LVL                                                                                 #endif // APP_REL_LVL
 "<doe_switch_to_key_list>KeyList "                                                                    "<doe_switch_to_key_list>KeyList "
 "<doe_switch_to_func_list>FuncList ",                                                                 "<doe_switch_to_func_list>FuncList ",
    };                                                                                                    };
    disp_key_list(editor_key_lists);                                                                      disp_key_list(editor_key_lists);
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

int is_view_mode_then_warn_it(void)                                                                   int is_view_mode_then_warn_it(void)
{                                                                                                     {
    if (is_app_list_mode()) {                                                                             if (is_app_list_mode()) {
        disp_status_bar_done(_("Modification not allowed in LIST mode"));                                     disp_status_bar_done(_("Modification not allowed in LIST mode"));
        return 1;                                                                                             return 1;
    }                                                                                                     }
    if (IS_NODE_ANCH(get_epc_buf())) {                                                                    if (IS_NODE_ANCH(get_epc_buf())) {
        disp_status_bar_done(_("Modification not allowed in Anchor buffer"));                                 disp_status_bar_done(_("Modification not allowed in Anchor buffer"));
        return 1;                                                                                             return 1;
    }                                                                                                     }
    if (CUR_EBUF_STATE(buf_VIEW_MODE)) {                                                                  if (CUR_EBUF_STATE(buf_VIEW_MODE)) {
        disp_status_bar_done(_("Modification not allowed in VIEW mode"));                                     disp_status_bar_done(_("Modification not allowed in VIEW mode"));
        return 1;                                                                                             return 1;
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
void dump_cur_pointers(void)                                                                          void dump_cur_pointers(void)
{                                                                                                     {
    flf_d_printf("epc_buf:[%s]\n", get_epc_buf()->file_path);                                             flf_d_printf("epc_buf:[%s]\n", get_epc_buf()->file_path);
    flf_d_printf("%d:[%s]\n", EPCBVC_CL->line_num, EPCBVC_CL->data);                                      flf_d_printf("%d:[%s]\n", EPCBVC_CL->line_num, EPCBVC_CL->data);
    flf_d_printf("EPCBVC_CLBI:%d\n", EPCBVC_CLBI);                                                        flf_d_printf("EPCBVC_CLBI:%d\n", EPCBVC_CLBI);
    flf_d_printf("cursor_y:%d\n", EPCBVC_CURSOR_Y);                                                       flf_d_printf("cursor_y:%d\n", EPCBVC_CURSOR_Y);
    flf_d_printf("cursor_x_to_keep:%d\n", EPCBVC_CURSOR_X_TO_KEEP);                                       flf_d_printf("cursor_x_to_keep:%d\n", EPCBVC_CURSOR_X_TO_KEEP);
    flf_d_printf("min_text_x_to_keep:%d\n", EPCBVC_MIN_TEXT_X_TO_KEEP);                                   flf_d_printf("min_text_x_to_keep:%d\n", EPCBVC_MIN_TEXT_X_TO_KEEP);
}                                                                                                     }
#endif // ENABLE_DEBUG                                                                                #endif // ENABLE_DEBUG

// End of editor.c                                                                                    // End of editor.c
kdiff3 ../old/be/editor2.c editor2.c #========================
kdiff3 ../old/be/editor3.c editor3.c #========================
kdiff3 ../old/be/editorcut.c editorcut.c #========================
kdiff3 ../old/be/editorcut2.c editorcut2.c #========================
/**************************************************************************                           /**************************************************************************
 *   editorcut2.c                                                         *                            *   editorcut2.c                                                         *
 *                                                                        *                            *                                                                        *
 *   Copyright (C) 1999-2003 Chris Allegretta                             *                            *   Copyright (C) 1999-2003 Chris Allegretta                             *
 *                                                                        *                            *                                                                        *
 *   This program is free software; you can redistribute it and/or modify *                            *   This program is free software; you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published by *                            *   it under the terms of the GNU General Public License as published by *
 *   the Free Software Foundation; either version 2, or (at your option)  *                            *   the Free Software Foundation; either version 2, or (at your option)  *
 *   any later version.                                                   *                            *   any later version.                                                   *
 *                                                                        *                            *                                                                        *
 *   This program is distributed in the hope that it will be useful,      *                            *   This program is distributed in the hope that it will be useful,      *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *                            *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *                            *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 *   GNU General Public License for more details.                         *                            *   GNU General Public License for more details.                         *
 *                                                                        *                            *                                                                        *
 *   You should have received a copy of the GNU General Public License    *                            *   You should have received a copy of the GNU General Public License    *
 *   along with this program; if not, write to the Free Software          *                            *   along with this program; if not, write to the Free Software          *
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *                            *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *
 *                                                                        *                            *                                                                        *
 **************************************************************************/                           **************************************************************************/

#include "headers.h"                                                                                  #include "headers.h"

// mark beginning position                                                                            // mark beginning position
// cut region (minimum)                                                                               // cut region (minimum)
be_line_t *mark_min_line;       // the line top of the marked area                                    be_line_t *mark_min_line;       // the line top of the marked area
int mark_min_byte_idx;          // byte_idx in the line top of the marked area                        int mark_min_byte_idx;          // byte_idx in the line top of the marked area
int mark_min_col_idx;           // col_idx left most in the marked area                               int mark_min_col_idx;           // col_idx left most in the marked area
// cut region (maximum)                                                                               // cut region (maximum)
be_line_t *mark_max_line;       // the line bottom of the marked area                                 be_line_t *mark_max_line;       // the line bottom of the marked area
int mark_max_byte_idx;          // byte_idx in the line bottom of the marked area                     int mark_max_byte_idx;          // byte_idx in the line bottom of the marked area
int mark_max_col_idx;           // col_idx right most in the marked area                              int mark_max_col_idx;           // col_idx right most in the marked area

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
void clear_mark_pos(void)                                                                             void clear_mark_pos(void)
{                                                                                                     {
    EPCB_ML = BUF_TOP_ANCH(get_epc_buf());                                                                EPCB_ML = BUF_TOP_ANCH(get_epc_buf());
    EPCB_MLBI = 0;                                                                                        EPCB_MLBI = 0;
}                                                                                                     }
void set_mark_pos(void)                                                                               void set_mark_pos(void)
{                                                                                                     {
    EPCB_ML = EPCBVC_CL;                                                                                  EPCB_ML = EPCBVC_CL;
    EPCB_MLBI = EPCBVC_CLBI;                                                                              EPCB_MLBI = EPCBVC_CLBI;
}                                                                                                     }

PRIVATE void change_cut_mode_after_cursor_horiz_vert_move(cursor_horiz_vert_move_t cursor_move);      PRIVATE void change_cut_mode_after_cursor_horiz_vert_move(cursor_horiz_vert_move_t cursor_move);
PRIVATE void change_cut_mode_on_mark_region_special_cases(void);                                      PRIVATE void change_cut_mode_on_mark_region_special_cases(void);

void setup_cut_region_after_cursor_move(cursor_horiz_vert_move_t cursor_move)                         void setup_cut_region_after_cursor_move(cursor_horiz_vert_move_t cursor_move)
{                                                                                                     {
    if (IS_MARK_SET(CUR_EBUF_STATE(buf_CUT_MODE)) == 0) {                                                 if (IS_MARK_SET(CUR_EBUF_STATE(buf_CUT_MODE)) == 0) {
        // no mark set                                                                                        // no mark set
        return;                                                                                               return;
    }                                                                                                     }
    change_cut_mode_after_cursor_horiz_vert_move(cursor_move);                                            change_cut_mode_after_cursor_horiz_vert_move(cursor_move);
    setup_cut_region();                                                                                   setup_cut_region();
    change_cut_mode_on_mark_region_special_cases();                                                       change_cut_mode_on_mark_region_special_cases();
    setup_cut_region(); // cut-mode may be changed, setup mark region again                               setup_cut_region(); // cut-mode may be changed, setup mark region again
    set_edit_win_update_needed(UPDATE_SCRN_ALL);                                                          set_edit_win_update_needed(UPDATE_SCRN_ALL);
}                                                                                                     }
// [cut-mode transition]                                                                              // [cut-mode transition]
//                                                                                                    //
// CUT_MODE_0_LINE:                                                                                   // CUT_MODE_0_LINE:
// CUT_MODE_N_LINE:                                                                                   // CUT_MODE_N_LINE:
//  (no move)                                                                                         //  (no move)
//                                                                                                    //
// CUT_MODE_H_CHAR:                                                                                   // CUT_MODE_H_CHAR:
//  ====>                                                                                             //  ====>
//                                                                                                    //
// CUT_MODE_HV_LINE:                                                                                  // CUT_MODE_HV_LINE:
// CUT_MODE_HV_BOX:                                                                                   // CUT_MODE_HV_BOX:
//  ====>                                                                                             //  ====>
//      |                                                                                             //      |
//      v                                                                                             //      v
//                                                                                                    //
// CUT_MODE_H_CHAR:                                                                                   // CUT_MODE_H_CHAR:
//  ====>                                                                                             //  ====>
//      |                                                                                             //      |
//      v                                                                                             //      v
//      ====>                                                                                         //      ====>
//                                                                                                    //
// CUT_MODE_V_LINE:                                                                                   // CUT_MODE_V_LINE:
//  |                                                                                                 //  |
//  v                                                                                                 //  v
//                                                                                                    //
// CUT_MODE_VH_CHAR:                                                                                  // CUT_MODE_VH_CHAR:
// CUT_MODE_VH_BOX:                                                                                   // CUT_MODE_VH_BOX:
//  |                                                                                                 //  |
//  v                                                                                                 //  v
//  ====>                                                                                             //  ====>
//                                                                                                    //
// CUT_MODE_V_LINE:                                                                                   // CUT_MODE_V_LINE:
//  |                                                                                                 //  |
//  v                                                                                                 //  v
//  ====>                                                                                             //  ====>
//      |                                                                                             //      |
//      v                                                                                             //      v
//                                                                                                    //
PRIVATE void change_cut_mode_after_cursor_horiz_vert_move(cursor_horiz_vert_move_t cursor_move)       PRIVATE void change_cut_mode_after_cursor_horiz_vert_move(cursor_horiz_vert_move_t cursor_move)
{                                                                                                     {
    switch (CUR_EBUF_STATE(buf_CUT_MODE)) {                                                               switch (CUR_EBUF_STATE(buf_CUT_MODE)) {
    default:                                                                                              default:
    case CUT_MODE_0_LINE:                                                                                 case CUT_MODE_0_LINE:
        break;                                                                                                break;
    case CUT_MODE_N_LINE:                                                                                 case CUT_MODE_N_LINE:
        if (cursor_move == CURS_MOVE_HORIZ) {                                                                 if (cursor_move == CURS_MOVE_HORIZ) {
            CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_H_CHAR;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_H_CHAR;
        } else if (cursor_move == CURS_MOVE_VERT) {                                                           } else if (cursor_move == CURS_MOVE_VERT) {
            CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_V_LINE;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_V_LINE;
        }                                                                                                     }
        break;                                                                                                break;
    case CUT_MODE_H_CHAR:                                                                                 case CUT_MODE_H_CHAR:
        if (cursor_move == CURS_MOVE_HORIZ) {                                                                 if (cursor_move == CURS_MOVE_HORIZ) {
            CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_H_CHAR;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_H_CHAR;
        } else if (cursor_move == CURS_MOVE_VERT) {                                                           } else if (cursor_move == CURS_MOVE_VERT) {
#ifdef HV_IS_BOX_VH_IS_CHAR                                                                           #ifdef HV_IS_BOX_VH_IS_CHAR
            CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_HV_BOX;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_HV_BOX;
#else                                                                                                 #else
            CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_HV_LINE;                                                      CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_HV_LINE;
#endif                                                                                                #endif
        }                                                                                                     }
        break;                                                                                                break;
    case CUT_MODE_HV_LINE:                                                                                case CUT_MODE_HV_LINE:
        if (cursor_move == CURS_MOVE_HORIZ) {                                                                 if (cursor_move == CURS_MOVE_HORIZ) {
            CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_H_CHAR;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_H_CHAR;
        } else if (cursor_move == CURS_MOVE_VERT) {                                                           } else if (cursor_move == CURS_MOVE_VERT) {
            CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_HV_LINE;                                                      CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_HV_LINE;
        }                                                                                                     }
        break;                                                                                                break;
    case CUT_MODE_V_LINE:                                                                                 case CUT_MODE_V_LINE:
        if (cursor_move == CURS_MOVE_HORIZ) {                                                                 if (cursor_move == CURS_MOVE_HORIZ) {
#ifdef HV_IS_BOX_VH_IS_CHAR                                                                           #ifdef HV_IS_BOX_VH_IS_CHAR
            CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_VH_CHAR;                                                      CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_VH_CHAR;
#else                                                                                                 #else
            CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_VH_BOX;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_VH_BOX;
#endif                                                                                                #endif
        } else if (cursor_move == CURS_MOVE_VERT) {                                                           } else if (cursor_move == CURS_MOVE_VERT) {
            CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_V_LINE;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_V_LINE;
        }                                                                                                     }
        break;                                                                                                break;
    case CUT_MODE_VH_CHAR:                                                                                case CUT_MODE_VH_CHAR:
        if (cursor_move == CURS_MOVE_HORIZ) {                                                                 if (cursor_move == CURS_MOVE_HORIZ) {
            CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_VH_CHAR;                                                      CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_VH_CHAR;
        } else if (cursor_move == CURS_MOVE_VERT) {                                                           } else if (cursor_move == CURS_MOVE_VERT) {
            CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_V_LINE;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_V_LINE;
        }                                                                                                     }
        break;                                                                                                break;
    case CUT_MODE_HV_BOX:                                                                                 case CUT_MODE_HV_BOX:
        if (cursor_move == CURS_MOVE_HORIZ) {                                                                 if (cursor_move == CURS_MOVE_HORIZ) {
            CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_H_CHAR;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_H_CHAR;
        } else if (cursor_move == CURS_MOVE_VERT) {                                                           } else if (cursor_move == CURS_MOVE_VERT) {
            CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_HV_BOX;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_HV_BOX;
        }                                                                                                     }
        break;                                                                                                break;
    case CUT_MODE_VH_BOX:                                                                                 case CUT_MODE_VH_BOX:
        if (cursor_move == CURS_MOVE_HORIZ) {                                                                 if (cursor_move == CURS_MOVE_HORIZ) {
            CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_VH_BOX;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_VH_BOX;
        } else if (cursor_move == CURS_MOVE_VERT) {                                                           } else if (cursor_move == CURS_MOVE_VERT) {
            CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_V_LINE;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_V_LINE;
        }                                                                                                     }
        break;                                                                                                break;
    }                                                                                                     }
}                                                                                                     }
PRIVATE void change_cut_mode_on_mark_region_special_cases(void)                                       PRIVATE void change_cut_mode_on_mark_region_special_cases(void)
{                                                                                                     {
    if (EPCBVC_CL == EPCB_ML) {                                                                           if (EPCBVC_CL == EPCB_ML) {
        // current line == beginning line                                                                     // current line == beginning line
        mark_min_line = EPCBVC_CL;                                                                            mark_min_line = EPCBVC_CL;
        mark_max_line = EPCBVC_CL;                                                                            mark_max_line = EPCBVC_CL;
        if (EPCBVC_CLBI == EPCB_MLBI) {                                                                       if (EPCBVC_CLBI == EPCB_MLBI) {
            // the same line and the same column                                                                  // the same line and the same column
            // change cut-mode to initial mode                                                                    // change cut-mode to initial mode
            CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_N_LINE;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_N_LINE;
        } else {                                                                                              } else {
            // the same line, different column                                                                    // the same line, different column
            switch (CUR_EBUF_STATE(buf_CUT_MODE)) {                                                               switch (CUR_EBUF_STATE(buf_CUT_MODE)) {
            default:                                                                                              default:
            case CUT_MODE_0_LINE:                                                                                 case CUT_MODE_0_LINE:
            case CUT_MODE_N_LINE:                                                                                 case CUT_MODE_N_LINE:
            case CUT_MODE_H_CHAR:                                                                                 case CUT_MODE_H_CHAR:
            case CUT_MODE_VH_CHAR:                                                                                case CUT_MODE_VH_CHAR:
                break;                                                                                                break;
            case CUT_MODE_V_LINE:                                                                                 case CUT_MODE_V_LINE:
            case CUT_MODE_HV_LINE:                                                                                case CUT_MODE_HV_LINE:
                // change cut-mode                                                                                    // change cut-mode
                CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_N_LINE;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_N_LINE;
                break;                                                                                                break;
            case CUT_MODE_HV_BOX:                                                                                 case CUT_MODE_HV_BOX:
                // change cut-mode                                                                                    // change cut-mode
                CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_H_CHAR;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_H_CHAR;
                break;                                                                                                break;
            case CUT_MODE_VH_BOX:                                                                                 case CUT_MODE_VH_BOX:
                // change cut-mode                                                                                    // change cut-mode
                CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_V_LINE;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_V_LINE;
                break;                                                                                                break;
            }                                                                                                     }
        }                                                                                                     }
    }                                                                                                     }
    switch (CUR_EBUF_STATE(buf_CUT_MODE)) {                                                               switch (CUR_EBUF_STATE(buf_CUT_MODE)) {
    default:                                                                                              default:
    case CUT_MODE_0_LINE:                                                                                 case CUT_MODE_0_LINE:
    case CUT_MODE_N_LINE:                                                                                 case CUT_MODE_N_LINE:
    case CUT_MODE_H_CHAR:                                                                                 case CUT_MODE_H_CHAR:
    case CUT_MODE_VH_CHAR:                                                                                case CUT_MODE_VH_CHAR:
    case CUT_MODE_V_LINE:                                                                                 case CUT_MODE_V_LINE:
    case CUT_MODE_HV_LINE:                                                                                case CUT_MODE_HV_LINE:
        break;                                                                                                break;
    case CUT_MODE_HV_BOX:                                                                                 case CUT_MODE_HV_BOX:
    case CUT_MODE_VH_BOX:                                                                                 case CUT_MODE_VH_BOX:
        // different line, the same column                                                                    // different line, the same column
        if (col_idx_from_byte_idx(mark_min_line->data, 0, mark_min_byte_idx)                                  if (col_idx_from_byte_idx(mark_min_line->data, 0, mark_min_byte_idx)
         == col_idx_from_byte_idx(mark_max_line->data, 0, mark_max_byte_idx)) {                                == col_idx_from_byte_idx(mark_max_line->data, 0, mark_max_byte_idx)) {
            switch (CUR_EBUF_STATE(buf_CUT_MODE)) {                                                               switch (CUR_EBUF_STATE(buf_CUT_MODE)) {
            default:                                                                                              default:
            case CUT_MODE_0_LINE:                                                                                 case CUT_MODE_0_LINE:
            case CUT_MODE_N_LINE:                                                                                 case CUT_MODE_N_LINE:
            case CUT_MODE_H_CHAR:                                                                                 case CUT_MODE_H_CHAR:
            case CUT_MODE_HV_LINE:                                                                                case CUT_MODE_HV_LINE:
            case CUT_MODE_V_LINE:                                                                                 case CUT_MODE_V_LINE:
            case CUT_MODE_VH_CHAR:                                                                                case CUT_MODE_VH_CHAR:
                break;                                                                                                break;
            case CUT_MODE_HV_BOX:                                                                                 case CUT_MODE_HV_BOX:
                // change cut-mode                                                                                    // change cut-mode
                CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_H_CHAR;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_H_CHAR;
                break;                                                                                                break;
            case CUT_MODE_VH_BOX:                                                                                 case CUT_MODE_VH_BOX:
                // change cut-mode                                                                                    // change cut-mode
                CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_V_LINE;                                                       CUR_EBUF_STATE(buf_CUT_MODE) = CUT_MODE_V_LINE;
                break;                                                                                                break;
            }                                                                                                     }
            break;                                                                                                break;
        }                                                                                                     }
    }                                                                                                     }
}                                                                                                     }
void setup_cut_region(void)                                                                           void setup_cut_region(void)
{                                                                                                     {
    int mark_min_line_col_idx;                                                                            int mark_min_line_col_idx;
    int mark_max_line_col_idx;                                                                            int mark_max_line_col_idx;

    switch (CUR_EBUF_STATE(buf_CUT_MODE)) {                                                               switch (CUR_EBUF_STATE(buf_CUT_MODE)) {
    default:                                                                                              default:
    case CUT_MODE_0_LINE:                                                                                 case CUT_MODE_0_LINE:
    case CUT_MODE_N_LINE:                                                                                 case CUT_MODE_N_LINE:
        if (IS_NODE_BOT(EPCBVC_CL)) {                                                                         if (IS_NODE_BOT(EPCBVC_CL)) {
            // No next line                                                                                       // No next line
            // {aaaaaaaaaaaaaaaaaa}                                                                               // {aaaaaaaaaaaaaaaaaa}
            mark_min_line = EPCBVC_CL;                                                                            mark_min_line = EPCBVC_CL;
            mark_max_line = EPCBVC_CL;                                                                            mark_max_line = EPCBVC_CL;
            mark_min_byte_idx = 0;                                                                                mark_min_byte_idx = 0;
            mark_max_byte_idx = line_data_len(EPCBVC_CL);                                                         mark_max_byte_idx = line_data_len(EPCBVC_CL);
        } else {                                                                                              } else {
            // There is next line                                                                                 // There is next line
            // {aaaaaaaaaaaaaaaaaaa                                                                               // {aaaaaaaaaaaaaaaaaaa
            // }bbbbbbbbbbbbbbbbbbb                                                                               // }bbbbbbbbbbbbbbbbbbb
            mark_min_line = EPCBVC_CL;                                                                            mark_min_line = EPCBVC_CL;
            mark_max_line = NODE_NEXT(EPCBVC_CL);                                                                 mark_max_line = NODE_NEXT(EPCBVC_CL);
            mark_min_byte_idx = 0;                                                                                mark_min_byte_idx = 0;
            mark_max_byte_idx = 0;                                                                                mark_max_byte_idx = 0;
        }                                                                                                     }
        break;                                                                                                break;
    case CUT_MODE_H_CHAR:                                                                                 case CUT_MODE_H_CHAR:
    case CUT_MODE_VH_CHAR:                                                                                case CUT_MODE_VH_CHAR:
    case CUT_MODE_HV_BOX:                                                                                 case CUT_MODE_HV_BOX:
    case CUT_MODE_VH_BOX:                                                                                 case CUT_MODE_VH_BOX:
        if (EPCBVC_CL == EPCB_ML) {                                                                           if (EPCBVC_CL == EPCB_ML) {
            // current == begin                                                                                   // current == begin
            mark_min_line = EPCBVC_CL;                                                                            mark_min_line = EPCBVC_CL;
            mark_max_line = EPCBVC_CL;                                                                            mark_max_line = EPCBVC_CL;
            if (EPCBVC_CLBI == EPCB_MLBI) {                                                                       if (EPCBVC_CLBI == EPCB_MLBI) {
                // the same line, the same column                                                                     // the same line, the same column
                mark_min_byte_idx = EPCBVC_CLBI;                                                                      mark_min_byte_idx = EPCBVC_CLBI;
                mark_max_byte_idx = EPCBVC_CLBI;                                                                      mark_max_byte_idx = EPCBVC_CLBI;
            } else {                                                                                              } else {
                // the same line, different column                                                                    // the same line, different column
                if (EPCBVC_CLBI < EPCB_MLBI) {                                                                        if (EPCBVC_CLBI < EPCB_MLBI) {
                    mark_min_byte_idx = EPCBVC_CLBI;                                                                      mark_min_byte_idx = EPCBVC_CLBI;
                    mark_max_byte_idx = EPCB_MLBI;                                                                        mark_max_byte_idx = EPCB_MLBI;
                } else {                                                                                              } else {
                    mark_min_byte_idx = EPCB_MLBI;                                                                        mark_min_byte_idx = EPCB_MLBI;
                    mark_max_byte_idx = EPCBVC_CLBI;                                                                      mark_max_byte_idx = EPCBVC_CLBI;
                }                                                                                                     }
            }                                                                                                     }
        } else {                                                                                              } else {
            // different line                                                                                     // different line
            if (EPCB_ML->line_num < EPCBVC_CL->line_num) {                                                        if (EPCB_ML->line_num < EPCBVC_CL->line_num) {
                // begin < current                                                                                    // begin < current
                mark_min_line = EPCB_ML;                                                                              mark_min_line = EPCB_ML;
                mark_min_byte_idx = EPCB_MLBI;                                                                        mark_min_byte_idx = EPCB_MLBI;
                mark_max_line = EPCBVC_CL;                                                                            mark_max_line = EPCBVC_CL;
                mark_max_byte_idx = EPCBVC_CLBI;                                                                      mark_max_byte_idx = EPCBVC_CLBI;
            } else {                                                                                              } else {
                // current < begin                                                                                    // current < begin
                mark_min_line = EPCBVC_CL;                                                                            mark_min_line = EPCBVC_CL;
                mark_min_byte_idx = EPCBVC_CLBI;                                                                      mark_min_byte_idx = EPCBVC_CLBI;
                mark_max_line = EPCB_ML;                                                                              mark_max_line = EPCB_ML;
                mark_max_byte_idx = EPCB_MLBI;                                                                        mark_max_byte_idx = EPCB_MLBI;
            }                                                                                                     }
        }                                                                                                     }
        break;                                                                                                break;
    case CUT_MODE_V_LINE:                                                                                 case CUT_MODE_V_LINE:
    case CUT_MODE_HV_LINE:                                                                                case CUT_MODE_HV_LINE:
        if (EPCBVC_CL == EPCB_ML) {                                                                           if (EPCBVC_CL == EPCB_ML) {
            // current == begin                                                                                   // current == begin
            mark_min_line = EPCBVC_CL;                                                                            mark_min_line = EPCBVC_CL;
            mark_max_line = EPCBVC_CL;                                                                            mark_max_line = EPCBVC_CL;
        } else {                                                                                              } else {
            // different line                                                                                     // different line
            if (EPCB_ML->line_num < EPCBVC_CL->line_num) {                                                        if (EPCB_ML->line_num < EPCBVC_CL->line_num) {
                // begin < current                                                                                    // begin < current
                mark_min_line = EPCB_ML;                                                                              mark_min_line = EPCB_ML;
                mark_max_line = EPCBVC_CL;                                                                            mark_max_line = EPCBVC_CL;
            } else {                                                                                              } else {
                // current < begin                                                                                    // current < begin
                mark_min_line = EPCBVC_CL;                                                                            mark_min_line = EPCBVC_CL;
                mark_max_line = EPCB_ML;                                                                              mark_max_line = EPCB_ML;
            }                                                                                                     }
        }                                                                                                     }
        mark_min_byte_idx = 0;                                                                                mark_min_byte_idx = 0;
        mark_max_byte_idx = 0;                                                                                mark_max_byte_idx = 0;
        break;                                                                                                break;
    }                                                                                                     }

    // setup mark_min_col_idx, mark_max_col_idx                                                           // setup mark_min_col_idx, mark_max_col_idx
    switch (CUR_EBUF_STATE(buf_CUT_MODE)) {                                                               switch (CUR_EBUF_STATE(buf_CUT_MODE)) {
    default:                                                                                              default:
    case CUT_MODE_0_LINE:                                                                                 case CUT_MODE_0_LINE:
    case CUT_MODE_N_LINE:                                                                                 case CUT_MODE_N_LINE:
    case CUT_MODE_H_CHAR:                                                                                 case CUT_MODE_H_CHAR:
    case CUT_MODE_VH_CHAR:                                                                                case CUT_MODE_VH_CHAR:
    case CUT_MODE_V_LINE:                                                                                 case CUT_MODE_V_LINE:
    case CUT_MODE_HV_LINE:                                                                                case CUT_MODE_HV_LINE:
        mark_min_col_idx = 0;   // not used                                                                   mark_min_col_idx = 0;   // not used
        mark_max_col_idx = 0;   // not used                                                                   mark_max_col_idx = 0;   // not used
        break;                                                                                                break;
    case CUT_MODE_HV_BOX:                                                                                 case CUT_MODE_HV_BOX:
    case CUT_MODE_VH_BOX:                                                                                 case CUT_MODE_VH_BOX:
        mark_min_line_col_idx = col_idx_from_byte_idx(mark_min_line->data, 0, mark_min_byte_idx);             mark_min_line_col_idx = col_idx_from_byte_idx(mark_min_line->data, 0, mark_min_byte_idx);
        mark_max_line_col_idx = col_idx_from_byte_idx(mark_max_line->data, 0, mark_max_byte_idx);             mark_max_line_col_idx = col_idx_from_byte_idx(mark_max_line->data, 0, mark_max_byte_idx);
        if (mark_min_line_col_idx <= mark_max_line_col_idx) {                                                 if (mark_min_line_col_idx <= mark_max_line_col_idx) {
            mark_min_col_idx = mark_min_line_col_idx;                                                             mark_min_col_idx = mark_min_line_col_idx;
            mark_max_col_idx = mark_max_line_col_idx;                                                             mark_max_col_idx = mark_max_line_col_idx;
        } else {                                                                                              } else {
            // swap left and right                                                                                // swap left and right
            mark_min_col_idx = mark_max_line_col_idx;                                                             mark_min_col_idx = mark_max_line_col_idx;
            mark_max_col_idx = mark_min_line_col_idx;                                                             mark_max_col_idx = mark_min_line_col_idx;
        }                                                                                                     }
        break;                                                                                                break;
    }                                                                                                     }
/////flf_d_printf("EPCB_ML: [%s]\n", EPCB_ML->data);                                               |  ////flf_d_printf("EPCB_ML: [%s]\n", EPCB_ML->data);
/////flf_d_printf("EPCB_MLBI: %d\n", EPCB_MLBI);                                                   |  ////flf_d_printf("EPCB_MLBI: %d\n", EPCB_MLBI);
/////flf_d_printf("EPCBVC_CL: [%s]\n", EPCBVC_CL->data);                                           |  ////flf_d_printf("EPCBVC_CL: [%s]\n", EPCBVC_CL->data);
/////flf_d_printf("EPCBVC_CLBI: %d\n", EPCBVC_CLBI);                                               |  ////flf_d_printf("EPCBVC_CLBI: %d\n", EPCBVC_CLBI);
/////flf_d_printf("mark_min_line: [%s]\n", mark_min_line->data);                                   |  ////flf_d_printf("mark_min_line: [%s]\n", mark_min_line->data);
/////flf_d_printf("mark_min_byte_idx: %d\n", mark_min_byte_idx);                                   |  ////flf_d_printf("mark_min_byte_idx: %d\n", mark_min_byte_idx);
/////flf_d_printf("mark_max_line: [%s]\n", mark_max_line->data);                                   |  ////flf_d_printf("mark_max_line: [%s]\n", mark_max_line->data);
/////flf_d_printf("mark_max_byte_idx: %d\n", mark_max_byte_idx);                                   |  ////flf_d_printf("mark_max_byte_idx: %d\n", mark_max_byte_idx);
/////flf_d_printf("mark_min_col_idx: %d\n", mark_min_col_idx);                                     |  ////flf_d_printf("mark_min_col_idx: %d\n", mark_min_col_idx);
/////flf_d_printf("mark_max_col_idx: %d\n", mark_max_col_idx);                                     |  ////flf_d_printf("mark_max_col_idx: %d\n", mark_max_col_idx);
}                                                                                                     }

int is_there_cut_region(void)                                                                         int is_there_cut_region(void)
{                                                                                                     {
    return (mark_max_line - mark_min_line) | (mark_max_byte_idx - mark_min_byte_idx);                     return (mark_max_line - mark_min_line) | (mark_max_byte_idx - mark_min_byte_idx);
}                                                                                                     }

int lines_selected(void)                                                                              int lines_selected(void)
{                                                                                                     {
    int lines = abs(EPCB_ML->line_num - EPCBVC_CL->line_num);                                             int lines = abs(EPCB_ML->line_num - EPCBVC_CL->line_num);
    switch (CUR_EBUF_STATE(buf_CUT_MODE)) {                                                               switch (CUR_EBUF_STATE(buf_CUT_MODE)) {
    default:                                                                                              default:
    case CUT_MODE_0_LINE:                                                                                 case CUT_MODE_0_LINE:
    case CUT_MODE_N_LINE:                                                                                 case CUT_MODE_N_LINE:
    case CUT_MODE_H_CHAR:                                                                                 case CUT_MODE_H_CHAR:
    case CUT_MODE_VH_CHAR:                                                                                case CUT_MODE_VH_CHAR:
    case CUT_MODE_HV_BOX:                                                                                 case CUT_MODE_HV_BOX:
    case CUT_MODE_VH_BOX:                                                                                 case CUT_MODE_VH_BOX:
        lines++;                                                                                              lines++;
        break;                                                                                                break;
    case CUT_MODE_V_LINE:                                                                                 case CUT_MODE_V_LINE:
    case CUT_MODE_HV_LINE:                                                                                case CUT_MODE_HV_LINE:
        break;                                                                                                break;
    }                                                                                                     }
    return lines;                                                                                         return lines;
}                                                                                                     }

// End of editorcut2.c                                                                                // End of editorcut2.c
kdiff3 ../old/be/editorgoto.c editorgoto.c #========================
/**************************************************************************                           /**************************************************************************
 *   editorgoto.c                                                         *                            *   editorgoto.c                                                         *
 *                                                                        *                            *                                                                        *
 *   Copyright (C) 1999-2003 Chris Allegretta                             *                            *   Copyright (C) 1999-2003 Chris Allegretta                             *
 *                                                                        *                            *                                                                        *
 *   This program is free software; you can redistribute it and/or modify *                            *   This program is free software; you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published by *                            *   it under the terms of the GNU General Public License as published by *
 *   the Free Software Foundation; either version 2, or (at your option)  *                            *   the Free Software Foundation; either version 2, or (at your option)  *
 *   any later version.                                                   *                            *   any later version.                                                   *
 *                                                                        *                            *                                                                        *
 *   This program is distributed in the hope that it will be useful,      *                            *   This program is distributed in the hope that it will be useful,      *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *                            *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *                            *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 *   GNU General Public License for more details.                         *                            *   GNU General Public License for more details.                         *
 *                                                                        *                            *                                                                        *
 *   You should have received a copy of the GNU General Public License    *                            *   You should have received a copy of the GNU General Public License    *
 *   along with this program; if not, write to the Free Software          *                            *   along with this program; if not, write to the Free Software          *
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *                            *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *
 *                                                                        *                            *                                                                        *
 **************************************************************************/                           **************************************************************************/

#include "headers.h"                                                                                  #include "headers.h"

PRIVATE int load_files_in_string_(const char *string, int files_to_load,                              PRIVATE int load_files_in_string_(const char *string, int files_to_load,
 int try_upp_low, int open_on_err, int msg_on_err, int load_from_history, int recursive);              int try_upp_low, int open_on_err, int msg_on_err, int load_from_history, int recursive);
PRIVATE int load_file_in_string_(const char *string,                                                  PRIVATE int load_file_in_string_(const char *string,
 int try_upp_low, int open_on_err, int msg_on_err, int load_from_history, int recursive);              int try_upp_low, int open_on_err, int msg_on_err, int load_from_history, int recursive);

PRIVATE int load_file_name_recurs_(const char *file_name, int open_on_err, int msg_on_err,            PRIVATE int load_file_name_recurs_(const char *file_name, int open_on_err, int msg_on_err,
 int load_from_history, int recursive);                                                                int load_from_history, int recursive);
PRIVATE int load_files_in_cur_buf_(void);                                                             PRIVATE int load_files_in_cur_buf_(void);
PRIVATE int load_file_name__(const char *file_name, int open_on_err, int msg_on_err,                  PRIVATE int load_file_name__(const char *file_name, int open_on_err, int msg_on_err,
 int load_from_history);                                                                               int load_from_history);

#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
PRIVATE int load_and_goto_from_history(const char *file_name);                                        PRIVATE int load_and_goto_from_history(const char *file_name);
PRIVATE void goto_pos_by_history(const char *full_path);                                              PRIVATE void goto_pos_by_history(const char *full_path);
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY

PRIVATE const char *skip_n_file_names(const char *line, int field_idx);                               PRIVATE const char *skip_n_file_names(const char *line, int field_idx);

// 123                                                                                                // 123
// file.ext:123:45                                                                                    // file.ext:123:45
int doe_goto_input_line(void)                                                                         int doe_goto_input_line(void)
{                                                                                                     {
    char string[MAX_PATH_LEN+1];                                                                          char string[MAX_PATH_LEN+1];
    int line_num;                                                                                         int line_num;

    int ret = input_string_tail("", string, HISTORY_TYPE_IDX_CURSPOS, _("Enter line number:"));           int ret = input_string_tail("", string, HISTORY_TYPE_IDX_CURSPOS, _("Enter line number:"));
    if (ret < 0) {                                                                                        if (ret < 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (ret <= 0) {                                                                                       if (ret <= 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (sscanf(string, "%d", &line_num) > 0) {                                                            if (sscanf(string, "%d", &line_num) > 0) {
        // go to line                                                                                         // go to line
        goto_line_col_in_cur_buf(line_num, 1);                                                                goto_line_col_in_cur_buf(line_num, 1);
        post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_CENTER, UPDATE_SCRN_ALL);                       post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_CENTER, UPDATE_SCRN_ALL);
        return 1;                                                                                             return 1;
    }                                                                                                     }
    // go to file                                                                                         // go to file
    // CURDIR: changed in editor                                                                          // CURDIR: changed in editor
    // file.ext:123:45                                                                                    // file.ext:123:45
    load_files_in_string(string, 1, TUL0, OOE0, MOE1, LFH0, RECURSIVE0);                                  load_files_in_string(string, 1, TUL0, OOE0, MOE1, LFH0, RECURSIVE0);
    post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_CENTER, UPDATE_SCRN_ALL);                       post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_CENTER, UPDATE_SCRN_ALL);
    return 1;                                                                                             return 1;
}                                                                                                     }

int doe_goto_file_or_dir_in_cur_line(void)                                                            int doe_goto_file_or_dir_in_cur_line(void)
{                                                                                                     {
    if (doe_goto_file_in_cur_line() > 0) {                                                                if (doe_goto_file_in_cur_line() > 0) {
        // files opened                                                                                       // files opened
        return 1;                                                                                             return 1;
    }                                                                                                     }
    // going to change directory                                                                          // going to change directory
    return doe_goto_directory_in_cur_line();                                                              return doe_goto_directory_in_cur_line();
}                                                                                                     }
int doe_goto_file_or_dir_in_cur_cursor_pos(void)                                                      int doe_goto_file_or_dir_in_cur_cursor_pos(void)
{                                                                                                     {
    if (doe_goto_file_in_cur_cursor_pos() > 0) {                                                          if (doe_goto_file_in_cur_cursor_pos() > 0) {
        // files opened                                                                                       // files opened
        return 1;                                                                                             return 1;
    }                                                                                                     }
    // going to change directory                                                                          // going to change directory
    return doe_goto_directory_in_cur_line();                                                              return doe_goto_directory_in_cur_line();
}                                                                                                     }

PRIVATE int _doe_goto_file_in_cur_line_byte_idx(int line_byte_idx);                                   PRIVATE int _doe_goto_file_in_cur_line_byte_idx(int line_byte_idx);
// TAG JUMP (file_path is taken from the head of current line)                                        // TAG JUMP (file_path is taken from the head of current line)
int doe_goto_file_in_cur_line(void)                                                                   int doe_goto_file_in_cur_line(void)
{                                                                                                     {
    return _doe_goto_file_in_cur_line_byte_idx(0);                                                        return _doe_goto_file_in_cur_line_byte_idx(0);
}                                                                                                     }
// TAG JUMP (file_path is taken from the current cursor position)                                     // TAG JUMP (file_path is taken from the current cursor position)
int doe_goto_file_in_cur_cursor_pos(void)                                                             int doe_goto_file_in_cur_cursor_pos(void)
{                                                                                                     {
    return _doe_goto_file_in_cur_line_byte_idx(EPCBVC_CLBI);                                              return _doe_goto_file_in_cur_line_byte_idx(EPCBVC_CLBI);
}                                                                                                     }
PRIVATE int _doe_goto_file_in_cur_line_byte_idx(int line_byte_idx)                                    PRIVATE int _doe_goto_file_in_cur_line_byte_idx(int line_byte_idx)
{                                                                                                     {
    char dir_save[MAX_PATH_LEN+1];                                                                        char dir_save[MAX_PATH_LEN+1];
    clear_files_loaded();                                                                                 clear_files_loaded();

    memorize_cur_file_pos_before_jump();                                                                  memorize_cur_file_pos_before_jump();
    // CURDIR: changed to cur-file's abs-dir                                                              // CURDIR: changed to cur-file's abs-dir
    change_cur_dir_by_file_path_after_save(dir_save, get_epc_buf()->file_path);                           change_cur_dir_by_file_path_after_save(dir_save, get_epc_buf()->file_path);
    // file_path is taken from the line_byte_idx of current line                                          // file_path is taken from the line_byte_idx of current line
    int files = load_files_in_string(&(EPCBVC_CL->data[line_byte_idx]), 1,                                int files = load_files_in_string(&(EPCBVC_CL->data[line_byte_idx]), 1,
     TUL1, OOE0, MOE1, LFH1, RECURSIVE1);                                                                  TUL1, OOE0, MOE1, LFH1, RECURSIVE1);
    change_cur_dir(dir_save);                                                                             change_cur_dir(dir_save);

    disp_files_loaded_if_ge_0();                                                                          disp_files_loaded_if_ge_0();
    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_CENTER, UPDATE_SCRN_ALL);                      post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_CENTER, UPDATE_SCRN_ALL);
    return files;                                                                                         return files;
}                                                                                                     }

int doe_goto_directory_in_cur_line(void)                                                              int doe_goto_directory_in_cur_line(void)
{                                                                                                     {
#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];
    change_cur_dir_by_file_path(get_epc_buf()->file_path);                                                change_cur_dir_by_file_path(get_epc_buf()->file_path);
    if (change_dirs_in_string(EPCBVC_CL->data, get_cur_filer_view()->cur_dir,                             if (change_dirs_in_string(EPCBVC_CL->data, get_cur_filer_view()->cur_dir,
     get_cur_filer_view()->prev_dir, get_cur_filer_view()->next_file) == 0) {                              get_cur_filer_view()->prev_dir, get_cur_filer_view()->next_file) == 0) {
        // directory can not be changed                                                                       // directory can not be changed
        return 0;                                                                                             return 0;
    }                                                                                                     }
#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
    update_dir_history(get_cur_filer_view()->prev_dir, get_cur_filer_view()->cur_dir);                    update_dir_history(get_cur_filer_view()->prev_dir, get_cur_filer_view()->cur_dir);
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
    call_filer(1, 0, get_cur_filer_view()->cur_dir, "", file_path, MAX_PATH_LEN);                         call_filer(1, 0, get_cur_filer_view()->cur_dir, "", file_path, MAX_PATH_LEN);
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER
    editor_quit = EDITOR_CANCELLED;                                                                       editor_quit = EDITOR_CANCELLED;
    return 1;                                                                                             return 1;
}                                                                                                     }

int change_dirs_in_string(const char *string, char *cur_dir, char *prev_dir, char *next_file)         int change_dirs_in_string(const char *string, char *cur_dir, char *prev_dir, char *next_file)
{                                                                                                     {
    const char *ptr;                                                                                      const char *ptr;
    char dir[MAX_PATH_LEN+1];                                                                             char dir[MAX_PATH_LEN+1];

    for (int field_idx = 0; ; field_idx++) {                                                              for (int field_idx = 0; ; field_idx++) {
        ptr = skip_n_file_names(string, field_idx);                                                           ptr = skip_n_file_names(string, field_idx);
        if (*ptr == '\0')                                                                                     if (*ptr == '\0')
            break;                                                                                                break;
        if (get_file_line_col_from_str_null(ptr, dir, NULL, NULL)) {                                          if (get_file_line_col_from_str_null(ptr, dir, NULL, NULL)) {
            // directory gotten                                                                                   // directory gotten
            if ((contain_redundant_slash(dir) == 0)                                                               if ((contain_redundant_slash(dir) == 0)
             && change_cur_dir_saving_prev_next_dir(dir, cur_dir, prev_dir, next_file)) {                          && change_cur_dir_saving_prev_next_dir(dir, cur_dir, prev_dir, next_file)) {
                return 1;   // changed                                                                                return 1;   // changed
            }                                                                                                     }
            // not changed, try the next directory                                                                // not changed, try the next directory
        }                                                                                                     }
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }

int doe_open_files_in_buf(void)                                                                       int doe_open_files_in_buf(void)
{                                                                                                     {
    clear_files_loaded();                                                                                 clear_files_loaded();
    load_files_in_cur_buf();                                                                              load_files_in_cur_buf();
    disp_files_loaded_if_ge_0();                                                                          disp_files_loaded_if_ge_0();
    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);                   post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);
    return 0;                                                                                             return 0;
}                                                                                                     }
//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int doe_switch_to_top_file(void)                                                                      int doe_switch_to_top_file(void)
{                                                                                                     {
    if (switch_epc_buf_to_top() == 0) {                                                                   if (switch_epc_buf_to_top() == 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);                   post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);
    return 1;                                                                                             return 1;
}                                                                                                     }
int doe_switch_to_bot_file(void)                                                                      int doe_switch_to_bot_file(void)
{                                                                                                     {
    if (switch_epc_buf_to_bot() == 0) {                                                                   if (switch_epc_buf_to_bot() == 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);                   post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);
    return 1;                                                                                             return 1;
}                                                                                                     }
//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int doe_switch_to_prev_file(void)                                                                     int doe_switch_to_prev_file(void)
{                                                                                                     {
    int ret;                                                                                              int ret;

    if ((ret = switch_epc_buf_to_prev(1, 0)) == 0) {                                                      if ((ret = switch_epc_buf_to_prev(1, 0)) == 0) {
        disp_status_bar_err(_("No previous open files"));                                                     disp_status_bar_err(_("No previous open files"));
        return ret;                                                                                           return ret;
    }                                                                                                     }
////_D_(dump_editor_panes())                                                                          ////_D_(dump_editor_panes())
    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);                        post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);
    disp_status_bar_done(_("Previous file"));                                                             disp_status_bar_done(_("Previous file"));
    return ret;                                                                                           return ret;
}                                                                                                     }
int doe_switch_to_next_file(void)                                                                     int doe_switch_to_next_file(void)
{                                                                                                     {
    int ret;                                                                                              int ret;

    if ((ret = switch_epc_buf_to_next(1, 0)) == 0) {                                                      if ((ret = switch_epc_buf_to_next(1, 0)) == 0) {
        disp_status_bar_err(_("No next open files"));                                                         disp_status_bar_err(_("No next open files"));
        return ret;                                                                                           return ret;
    }                                                                                                     }
////_D_(dump_editor_panes())                                                                          ////_D_(dump_editor_panes())
    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);                        post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);
    disp_status_bar_done(_("Next file"));                                                                 disp_status_bar_done(_("Next file"));
    return ret;                                                                                           return ret;
}                                                                                                     }
#if APP_REL_LVL == APP_REL_LVL_EXPERIMENTAL                                                           #if APP_REL_LVL == APP_REL_LVL_EXPERIMENTAL
int doe_switch_to_prev_buffers(void)                                                                  int doe_switch_to_prev_buffers(void)
{                                                                                                     {
    be_bufs_t *bufs = get_bufs_contains_buf(&bufss_top_anchor, get_epc_buf());                            be_bufs_t *bufs = get_bufs_contains_buf(&bufss_top_anchor, get_epc_buf());
    if (IS_NODE_TOP(bufs))                                                                                if (IS_NODE_TOP(bufs))
        return 0;                                                                                             return 0;
    set_epc_buf(NODE_PREV(bufs)->cur_buf);                                                                set_epc_buf(NODE_PREV(bufs)->cur_buf);
    post_cmd_processing(EPCBVC_CL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);              post_cmd_processing(EPCBVC_CL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);
    return 1;                                                                                             return 1;
}                                                                                                     }
int doe_switch_to_next_buffers(void)                                                                  int doe_switch_to_next_buffers(void)
{                                                                                                     {
    be_bufs_t *bufs = get_bufs_contains_buf(&bufss_top_anchor, get_epc_buf());                            be_bufs_t *bufs = get_bufs_contains_buf(&bufss_top_anchor, get_epc_buf());
    if (IS_NODE_BOT(bufs))                                                                                if (IS_NODE_BOT(bufs))
        return 0;                                                                                             return 0;
    set_epc_buf(NODE_NEXT(bufs)->cur_buf);                                                                set_epc_buf(NODE_NEXT(bufs)->cur_buf);
    post_cmd_processing(EPCBVC_CL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);              post_cmd_processing(EPCBVC_CL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);
    return 1;                                                                                             return 1;
}                                                                                                     }
#endif // APP_REL_LVL                                                                                 #endif // APP_REL_LVL
//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
PRIVATE char cur_file_pos_before_jump[MAX_PATH_LEN+1] = "";                                           PRIVATE char cur_file_pos_before_jump[MAX_PATH_LEN+1] = "";
void memorize_cur_file_pos_before_jump()                                                              void memorize_cur_file_pos_before_jump()
{                                                                                                     {
    memorize_cur_file_pos_null(cur_file_pos_before_jump);                                                 memorize_cur_file_pos_null(cur_file_pos_before_jump);
}                                                                                                     }
int doe_return_to_prev_file_pos(void)                                                                 int doe_return_to_prev_file_pos(void)
{                                                                                                     {
    recall_file_pos_null(cur_file_pos_before_jump);                                                       recall_file_pos_null(cur_file_pos_before_jump);

    doe_refresh_editor();                                                                                 doe_refresh_editor();
    disp_status_bar_done(_("Returned to previous pos"));                                                  disp_status_bar_done(_("Returned to previous pos"));
    return 1;                                                                                             return 1;
}                                                                                                     }
//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int doe_switch_editor_pane(void)                                                                      int doe_switch_editor_pane(void)
{                                                                                                     {
    doe_switch_editor_pane_();                                                                            doe_switch_editor_pane_();
    post_cmd_processing(NULL, CURS_MOVE_NONE, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);                    post_cmd_processing(NULL, CURS_MOVE_NONE, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);
    disp_status_bar_done(_("Switched current editor pane to %d"), get_editor_cur_pane_idx()+1);           disp_status_bar_done(_("Switched current editor pane to %d"), get_editor_cur_pane_idx()+1);
    return 1;                                                                                             return 1;
}                                                                                                     }
void doe_switch_editor_pane_(void)                                                                    void doe_switch_editor_pane_(void)
{                                                                                                     {
    int pane_idx = get_editor_cur_pane_idx() ? 0 : 1;                                                     int pane_idx = get_editor_cur_pane_idx() ? 0 : 1;
    set_editor_cur_pane_idx(pane_idx);                                                                    set_editor_cur_pane_idx(pane_idx);
////_D_(dump_editor_panes())                                                                          ////_D_(dump_editor_panes())
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

int load_file_name_upp_low(const char *file_name,                                                     int load_file_name_upp_low(const char *file_name,
 int try_upp_low, int open_on_err, int msg_on_err, int load_from_history, int recursive)               int try_upp_low, int open_on_err, int msg_on_err, int load_from_history, int recursive)
{                                                                                                     {
    clear_files_loaded();                                                                                 clear_files_loaded();
    begin_check_break_key();                                                                              begin_check_break_key();
    int ret = load_file_name_upp_low_(file_name,                                                          int ret = load_file_name_upp_low_(file_name,
     try_upp_low, open_on_err, msg_on_err, load_from_history, recursive);                                  try_upp_low, open_on_err, msg_on_err, load_from_history, recursive);
    end_check_break_key();                                                                                end_check_break_key();
    return ret;                                                                                           return ret;
}                                                                                                     }
int load_files_in_cur_buf(void)                                                                       int load_files_in_cur_buf(void)
{                                                                                                     {
    begin_check_break_key();                                                                              begin_check_break_key();
    int ret = load_files_in_cur_buf_();                                                                   int ret = load_files_in_cur_buf_();
    end_check_break_key();                                                                                end_check_break_key();
    return ret;                                                                                           return ret;
}                                                                                                     }
int load_files_in_string(const char *string, int files_to_load,                                       int load_files_in_string(const char *string, int files_to_load,
 int try_upp_low, int open_on_err, int msg_on_err, int load_from_history, int recursive)               int try_upp_low, int open_on_err, int msg_on_err, int load_from_history, int recursive)
{                                                                                                     {
flf_d_printf("string: [%s]\n", string);                                                               flf_d_printf("string: [%s]\n", string);
    begin_check_break_key();                                                                              begin_check_break_key();
    int files = load_files_in_string_(string, files_to_load,                                              int files = load_files_in_string_(string, files_to_load,
     try_upp_low, open_on_err, msg_on_err, load_from_history, recursive);                                  try_upp_low, open_on_err, msg_on_err, load_from_history, recursive);
    end_check_break_key();                                                                                end_check_break_key();
    return files;                                                                                         return files;
}                                                                                                     }

//=============================================================================                       //=============================================================================

// sub-function of load_files_in_string()                                                             // sub-function of load_files_in_string()
PRIVATE int load_files_in_string_(const char *string, int files_to_load,                              PRIVATE int load_files_in_string_(const char *string, int files_to_load,
 int try_upp_low, int open_on_err, int msg_on_err, int load_from_history, int recursive)               int try_upp_low, int open_on_err, int msg_on_err, int load_from_history, int recursive)
{                                                                                                     {
    int files_loaded = 0;                                                                                 int files_loaded = 0;

    for (int field_idx = 0; files_loaded < files_to_load; field_idx++) {                                  for (int field_idx = 0; files_loaded < files_to_load; field_idx++) {
        const char *ptr = skip_n_file_names(string, field_idx);                                               const char *ptr = skip_n_file_names(string, field_idx);
        if (*ptr == '\0')                                                                                     if (*ptr == '\0')
            break;                                                                                                break;
        int files = load_file_in_string_(ptr,                                                                 int files = load_file_in_string_(ptr,
         try_upp_low, open_on_err, msg_on_err, load_from_history, recursive);                                  try_upp_low, open_on_err, msg_on_err, load_from_history, recursive);
        if (files > 0) {                                                                                      if (files > 0) {
            // once any file has loaded, show no more error message                                               // once any file has loaded, show no more error message
            files_loaded++;                                                                                       files_loaded++;
            open_on_err = 0;                                                                                      open_on_err = 0;
            msg_on_err = 0;                                                                                       msg_on_err = 0;
        }                                                                                                     }
    }                                                                                                     }
    return files_loaded;                                                                                  return files_loaded;
}                                                                                                     }
PRIVATE int load_file_in_string_(const char *string,                                                  PRIVATE int load_file_in_string_(const char *string,
 int try_upp_low, int open_on_err, int msg_on_err, int load_from_history, int recursive)               int try_upp_low, int open_on_err, int msg_on_err, int load_from_history, int recursive)
{                                                                                                     {
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];
    int line_num, col_num;                                                                                int line_num, col_num;
    int files;                                                                                            int files;

    if (get_file_line_col_from_str_null(string, file_path, &line_num, &col_num) == 0) {                   if (get_file_line_col_from_str_null(string, file_path, &line_num, &col_num) == 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if ((files = load_file_name_upp_low_(file_path,                                                       if ((files = load_file_name_upp_low_(file_path,
     try_upp_low, open_on_err, msg_on_err, load_from_history, recursive)) > 0) {                           try_upp_low, open_on_err, msg_on_err, load_from_history, recursive)) > 0) {
        if (recursive) {                                                                                      if (recursive) {
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                            ////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))
            // Tag-jump to line, col                                                                              // Tag-jump to line, col
            goto_line_col_in_cur_buf(line_num, col_num);    // appdefs.h|100,8                                    goto_line_col_in_cur_buf(line_num, col_num);    // appdefs.h|100,8
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                            ////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))
        }                                                                                                     }
    }                                                                                                     }
    return files;                                                                                         return files;
}                                                                                                     }

int load_file_name_upp_low_(const char *file_name,                                                    int load_file_name_upp_low_(const char *file_name,
 int try_upp_low, int open_on_err, int msg_on_err, int load_from_history, int recursive)               int try_upp_low, int open_on_err, int msg_on_err, int load_from_history, int recursive)
{                                                                                                     {
    char file_name_buf[MAX_PATH_LEN+1];                                                                   char file_name_buf[MAX_PATH_LEN+1];
    char file_name_prev[MAX_PATH_LEN+1];                                                                  char file_name_prev[MAX_PATH_LEN+1];

    for (int name_type_idx = 0; name_type_idx < (try_upp_low ? 3 : 1); name_type_idx++) {                 for (int name_type_idx = 0; name_type_idx < (try_upp_low ? 3 : 1); name_type_idx++) {
        strlcpy__(file_name_buf, file_name, MAX_PATH_LEN);                                                    strlcpy__(file_name_buf, file_name, MAX_PATH_LEN);
        switch (name_type_idx) {                                                                              switch (name_type_idx) {
        case 0:                                                                                               case 0:
            // try to open specified file name (FileName.Ext)                                                     // try to open specified file name (FileName.Ext)
            break;                                                                                                break;
        case 1:                                                                                               case 1:
            // try to open in upper case file name (FILENAME.EXT)                                                 // try to open in upper case file name (FILENAME.EXT)
            strupper(file_name_buf);                                                                              strupper(file_name_buf);
            break;                                                                                                break;
        case 2:                                                                                               case 2:
            // try to open in lower case file name (filename.ext)                                                 // try to open in lower case file name (filename.ext)
            strlower(file_name_buf);                                                                              strlower(file_name_buf);
            break;                                                                                                break;
        }                                                                                                     }
        if (strcmp(file_name_buf, file_name_prev) != 0) {                                                     if (strcmp(file_name_buf, file_name_prev) != 0) {
            int files;                                                                                            int files;
            if ((files = load_file_name_recurs_(file_name_buf, open_on_err, msg_on_err,                           if ((files = load_file_name_recurs_(file_name_buf, open_on_err, msg_on_err,
             load_from_history, recursive)) > 0)                                                                   load_from_history, recursive)) > 0)
                return files;                                                                                         return files;
        }                                                                                                     }
        if (check_break_key()) {                                                                              if (check_break_key()) {
            break;                                                                                                break;
        }                                                                                                     }
        strlcpy__(file_name_prev, file_name_buf, MAX_PATH_LEN);                                               strlcpy__(file_name_prev, file_name_buf, MAX_PATH_LEN);
    }                                                                                                     }
    return 0;   // 0                                                                                      return 0;   // 0
}                                                                                                     }

// Open file. If it is a project file, open file(s) described in it.                                  // Open file. If it is a project file, open file(s) described in it.
PRIVATE int load_file_name_recurs_(const char *file_name, int open_on_err, int msg_on_err,            PRIVATE int load_file_name_recurs_(const char *file_name, int open_on_err, int msg_on_err,
 int load_from_history, int recursive)                                                                 int load_from_history, int recursive)
{                                                                                                     {
    static int recursive_call_count = 0;                                                                  static int recursive_call_count = 0;
    int files = 0;                                                                                        int files = 0;

    if (load_file_name__(file_name, open_on_err, msg_on_err, load_from_history) > 0) {                    if (load_file_name__(file_name, open_on_err, msg_on_err, load_from_history) > 0) {
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                         <
        files = 1;                                                                                            files = 1;
        if (recursive && (recursive_call_count == 0) && is_file_name_proj_file(file_name, 0)) {               if (recursive && (recursive_call_count == 0) && is_file_name_proj_file(file_name, 0)) {
            recursive_call_count++;                                                                               recursive_call_count++;
            files += load_files_in_cur_buf_();      // recursive call                                             files += load_files_in_cur_buf_();      // recursive call
            recursive_call_count--;                                                                               recursive_call_count--;
        }                                                                                                     }
    }                                                                                                     }
    return files;                                                                                         return files;
}                                                                                                     }

// sub-function of load_files_in_cur_buf()                                                            // sub-function of load_files_in_cur_buf()
PRIVATE int load_files_in_cur_buf_(void)                                                              PRIVATE int load_files_in_cur_buf_(void)
{                                                                                                     {
#define MAX_LINES_TO_TRY_TO_LOAD        10000                                                         #define MAX_LINES_TO_TRY_TO_LOAD        10000
#define MAX_FILES_TO_LOAD               2000                                                          #define MAX_FILES_TO_LOAD               2000
#define MIN_FREE_MEM_KB                 (100 * 1000)    // 100 MB                                     #define MIN_FREE_MEM_KB                 (100 * 1000)    // 100 MB
    char file_pos_str1[MAX_PATH_LEN+1];                                                                   char file_pos_str1[MAX_PATH_LEN+1];
    memorize_cur_file_pos_null(file_pos_str1);                                                            memorize_cur_file_pos_null(file_pos_str1);
    first_line();                                                                                         first_line();
    int files = 0;                                                                                        int files = 0;
    for (int lines = 0; lines < MAX_LINES_TO_TRY_TO_LOAD; lines++) {                                      for (int lines = 0; lines < MAX_LINES_TO_TRY_TO_LOAD; lines++) {
        if (line_data_len(EPCBVC_CL)) {                                                                       if (line_data_len(EPCBVC_CL)) {
            if (EPCBVC_CL->data[0] != '#') {                                                                      if (EPCBVC_CL->data[0] != '#') {
                char file_pos_str2[MAX_PATH_LEN+1];                                                                   char file_pos_str2[MAX_PATH_LEN+1];
                char dir_save[MAX_PATH_LEN+1];                                                                        char dir_save[MAX_PATH_LEN+1];

////_D_(buf_dump_state(get_epc_buf()))                                                             <
////_D_(dump_buf_views(get_epc_buf()))                                                             <
                memorize_cur_file_pos_null(file_pos_str2);                                                            memorize_cur_file_pos_null(file_pos_str2);
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                         <
////flf_d_printf("[%s]\n", file_pos_str2);                                                         <
                // CURDIR: changed to cur-file's abs-dir                                                              // CURDIR: changed to cur-file's abs-dir
                change_cur_dir_by_file_path_after_save(dir_save, get_epc_buf()->file_path);                           change_cur_dir_by_file_path_after_save(dir_save, get_epc_buf()->file_path);
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                         <
////flf_d_printf("[%s]\n", EPCBVC_CL->data);                                                       <
                files += load_files_in_string_(EPCBVC_CL->data, 10,                                                   files += load_files_in_string_(EPCBVC_CL->data, 10,
                 TUL1, OOE0, MOE0, LFH0, RECURSIVE0);                                                                  TUL1, OOE0, MOE0, LFH0, RECURSIVE0);
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                         <
                change_cur_dir(dir_save);                                                                             change_cur_dir(dir_save);

                editor_disp_title_bar();                                                                              editor_disp_title_bar();
                tio_refresh();                                                                                        tio_refresh();
////flf_d_printf("[%s]\n", file_pos_str2);                                                         <
                recall_file_pos_null(file_pos_str2);                                                                  recall_file_pos_null(file_pos_str2);
////_D_(dump_buf_views(get_epc_buf()))                                                             <
            }                                                                                                     }
        }                                                                                                     }
        if (cursor_next_line() == 0)                                                                          if (cursor_next_line() == 0)
            break;                                                                                                break;
        if (files >= MAX_FILES_TO_LOAD)                                                                       if (files >= MAX_FILES_TO_LOAD)
            break;                                                                                                break;
        if (get_mem_free_in_kb(1) <= MIN_FREE_MEM_KB)                                                         if (get_mem_free_in_kb(1) <= MIN_FREE_MEM_KB)
            break;                                                                                                break;
        if (check_break_key()) {                                                                              if (check_break_key()) {
flf_d_printf("sigint_signaled\n");                                                                    flf_d_printf("sigint_signaled\n");
            break;                                                                                                break;
        }                                                                                                     }
    }                                                                                                     }
    recall_file_pos_null(file_pos_str1);                                                                  recall_file_pos_null(file_pos_str1);
    return files;                                                                                         return files;
}                                                                                                     }

PRIVATE int load_file_name__(const char *file_name, int open_on_err, int msg_on_err,                  PRIVATE int load_file_name__(const char *file_name, int open_on_err, int msg_on_err,
 int load_from_history)                                                                                int load_from_history)
{                                                                                                     {
    char full_path[MAX_PATH_LEN+1];                                                                       char full_path[MAX_PATH_LEN+1];
    char abs_path[MAX_PATH_LEN+1];                                                                        char abs_path[MAX_PATH_LEN+1];

////flf_d_printf("file_name:[%s]-----------\n", file_name);                                           ////flf_d_printf("file_name:[%s]-----------\n", file_name);
    get_full_path(file_name, full_path);                                                                  get_full_path(file_name, full_path);
    get_abs_path(file_name, abs_path);                                                                    get_abs_path(file_name, abs_path);
    // switch to if the file of the "file-path" already loaded                                     |      // switch to the file of "full_path" if it already loaded
    if (switch_epc_buf_by_file_path(full_path)) {                                                         if (switch_epc_buf_by_file_path(full_path)) {
        add_files_loaded(0);    // switched                                                                   add_files_loaded(0);    // switched
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                         <
        // already loaded and select it                                                                       // already loaded and select it
        goto not_goto_line;                                                                                   goto not_goto_line;
    }                                                                                                     }
    // try to load the file                                                                               // try to load the file
    if (load_file_into_new_buf(full_path, open_on_err, msg_on_err) >= 0) {                                if (load_file_into_new_buf(full_path, open_on_err, msg_on_err) >= 0) {
        add_files_loaded(1);                                                                                  add_files_loaded(1);
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                         <
        goto goto_line;                                                                                       goto goto_line;
    }                                                                                                     }
    // switch to if the file of the "file-name" already loaded                                            // switch to if the file of the "file-name" already loaded
    if (switch_epc_buf_by_file_name(file_name)) {                                                         if (switch_epc_buf_by_file_name(file_name)) {
        add_files_loaded(0);    // switched                                                                   add_files_loaded(0);    // switched
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                         <
        // already loaded and select it                                                                       // already loaded and select it
        goto not_goto_line;                                                                                   goto not_goto_line;
    }                                                                                                     }
#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
/////flf_d_printf("full_path:[%s]\n", file_name);                                                  <
    if (load_from_history) {                                                                              if (load_from_history) {
        // try to load a file of the same "file-name" memorized in history                                    // try to load a file of the same "file-name" memorized in history
/////flf_d_printf("file_name:[%s]\n", file_name);                                                  <
        if (load_and_goto_from_history(file_name)) {                                                          if (load_and_goto_from_history(file_name)) {
            add_files_loaded(0);    // switched                                                                   add_files_loaded(0);    // switched
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                         <
            goto goto_line;                                                                                       goto goto_line;
        }                                                                                                     }
    }                                                                                                     }
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
    return 0;                                                                                             return 0;
goto_line:                                                                                            goto_line:
#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
    goto_pos_by_history(full_path);                                                                       goto_pos_by_history(full_path);
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
not_goto_line:                                                                                        not_goto_line:
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                         <
    return 1;                                                                                             return 1;
}                                                                                                     }

#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
// may load one of below files                                                                        // may load one of below files
// /path/to/filename.ext                                                                              // /path/to/filename.ext
// /path/to/dir1/filename.ext                                                                         // /path/to/dir1/filename.ext
// /path/to/dir1/dir2/filename.ext                                                                    // /path/to/dir1/dir2/filename.ext
PRIVATE int load_and_goto_from_history(const char *file_name)                                         PRIVATE int load_and_goto_from_history(const char *file_name)
{                                                                                                     {
    set_history_newest(HISTORY_TYPE_IDX_CURSPOS);                                                         set_history_newest(HISTORY_TYPE_IDX_CURSPOS);
    for ( ; ; ) {                                                                                         for ( ; ; ) {
        char *history = get_history_older(HISTORY_TYPE_IDX_CURSPOS);                                          char *history = get_history_older(HISTORY_TYPE_IDX_CURSPOS);
        if (strlen_path(history) == 0) {                                                                      if (strlen_path(history) == 0) {
            break;                                                                                                break;
        }                                                                                                     }
/////flf_d_printf("history:[%s]\n", history);                                                      <
        char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];
        if (get_file_line_col_from_str_null(history, file_path, NULL, NULL)) {                                if (get_file_line_col_from_str_null(history, file_path, NULL, NULL)) {
/////flf_d_printf("file:[%s]\n", file);                                                            <
            if (compare_file_path_from_tail(file_path, file_name) == 0) {                                         if (compare_file_path_from_tail(file_path, file_name) == 0) {
/////flf_d_printf("history:[%s]\n", history);                                                      <
                return load_file_in_string_(history, TUL0, OOE0, MOE0, LFH0, RECURSIVE0);                             return load_file_in_string_(history, TUL0, OOE0, MOE0, LFH0, RECURSIVE0);
            }                                                                                                     }
        }                                                                                                     }
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }

PRIVATE void goto_pos_by_history(const char *full_path)                                               PRIVATE void goto_pos_by_history(const char *full_path)
{                                                                                                     {
    // search in history                                                                                  // search in history
    const char *str = search_history_file_path(HISTORY_TYPE_IDX_CURSPOS, full_path);                      const char *str = search_history_file_path(HISTORY_TYPE_IDX_CURSPOS, full_path);
    // get line-num and col-num                                                                           // get line-num and col-num
    if (goto_str_line_col_in_cur_buf(str)) {                                                              if (goto_str_line_col_in_cur_buf(str)) {
////flf_d_printf("full_path:[%s]\n", full_path);                                                      ////flf_d_printf("full_path:[%s]\n", full_path);
////flf_d_printf("history  :[%s]\n", str);                                                            ////flf_d_printf("history  :[%s]\n", str);
        EPCBVX_CL(0) = EPCBVX_CL(1) = EPCBVC_CL;                                                              EPCBVX_CL(0) = EPCBVX_CL(1) = EPCBVC_CL;
        EPCBVX_CLBI(0) = EPCBVX_CLBI(1) = EPCBVC_CLBI;                                                        EPCBVX_CLBI(0) = EPCBVX_CLBI(1) = EPCBVC_CLBI;
    }                                                                                                     }
}                                                                                                     }
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int is_file_name_proj_file(const char *file_name, int type)                                           int is_file_name_proj_file(const char *file_name, int type)
{                                                                                                     {
    if ((type == 0 || type == 1)                                                                          if ((type == 0 || type == 1)
     && strlen_path(file_name) >= strlen(PROJ_FILE_EXTENSION1)) {                                          && strlen_path(file_name) >= strlen(PROJ_FILE_EXTENSION1)) {
        if (strcasecmp(                                                                                       if (strcasecmp(
         &file_name[strlen_path(file_name) - strlen(PROJ_FILE_EXTENSION1)],                                    &file_name[strlen_path(file_name) - strlen(PROJ_FILE_EXTENSION1)],
         PROJ_FILE_EXTENSION1) == 0) {                                                                         PROJ_FILE_EXTENSION1) == 0) {
            return 1;                                                                                             return 1;
        }                                                                                                     }
    }                                                                                                     }
    if ((type == 0 || type == 2)                                                                          if ((type == 0 || type == 2)
     && strlen_path(file_name) >= strlen(PROJ_FILE_EXTENSION2)) {                                          && strlen_path(file_name) >= strlen(PROJ_FILE_EXTENSION2)) {
        if (strcasecmp(                                                                                       if (strcasecmp(
         &file_name[strlen_path(file_name) - strlen(PROJ_FILE_EXTENSION2)],                                    &file_name[strlen_path(file_name) - strlen(PROJ_FILE_EXTENSION2)],
         PROJ_FILE_EXTENSION2) == 0) {                                                                         PROJ_FILE_EXTENSION2) == 0) {
            return 1;                                                                                             return 1;
        }                                                                                                     }
    }                                                                                                     }
    return 0;   // not project file                                                                       return 0;   // not project file
}                                                                                                     }

#ifdef START_UP_TEST                                                                                  #ifdef START_UP_TEST
void test_get_n_th_file_name(void)                                                                    void test_get_n_th_file_name(void)
{                                                                                                     {
    char test_str[] =                                                                                     char test_str[] =
     "history.c 345 hist_type_idx:3:['/home/user/ filename including space .txt '|1:1]";                   "history.c 345 hist_type_idx:3:['/home/user/ filename including space .txt '|1:1]";
    const char *ptr;                                                                                      const char *ptr;
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];
    int line_num, col_num;                                                                                int line_num, col_num;

    flf_d_printf("test_str:[%s]\n", test_str);                                                            flf_d_printf("test_str:[%s]\n", test_str);
    for (int field_idx = 0; field_idx < 10; field_idx++) {                                                for (int field_idx = 0; field_idx < 10; field_idx++) {
        ptr = skip_n_file_names(test_str, field_idx);                                                         ptr = skip_n_file_names(test_str, field_idx);
        if (*ptr == '\0')                                                                                     if (*ptr == '\0')
            break;                                                                                                break;
        if (get_file_line_col_from_str_null(ptr, file_path, &line_num, &col_num)) {                           if (get_file_line_col_from_str_null(ptr, file_path, &line_num, &col_num)) {
            flf_d_printf("%d: file_path:[%s],%d,%d\n", field_idx, file_path, line_num, col_num);                  flf_d_printf("%d: file_path:[%s],%d,%d\n", field_idx, file_path, line_num, col_num);
        }                                                                                                     }
    }                                                                                                     }
}                                                                                                     }
#endif // START_UP_TEST                                                                               #endif // START_UP_TEST

PRIVATE const char *skip_n_file_names(const char *line, int field_idx)                                PRIVATE const char *skip_n_file_names(const char *line, int field_idx)
{                                                                                                     {
    const char *ptr;                                                                                      const char *ptr;
    int field_cnt;                                                                                        int field_cnt;

    ptr = line;                                                                                           ptr = line;
    for (field_cnt = 0; ; field_cnt++) {                                                                  for (field_cnt = 0; ; field_cnt++) {
        ptr = skip_to_file_path(ptr);                                                                         ptr = skip_to_file_path(ptr);
        if (*ptr == '\0')                                                                                     if (*ptr == '\0')
            break;      // EOL                                                                                    break;      // EOL
        if (field_cnt >= field_idx)                                                                           if (field_cnt >= field_idx)
            break;                                                                                                break;
        const char *prev_ptr = ptr;                                                                           const char *prev_ptr = ptr;
        ptr = skip_file_path(ptr);                                                                            ptr = skip_file_path(ptr);
        if (ptr == prev_ptr)                                                                                  if (ptr == prev_ptr)
            // not progressed                                                                                     // not progressed
            break;                                                                                                break;
    }                                                                                                     }
    return ptr;                                                                                           return ptr;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
int goto_last_file_line_col_in_history()                                                              int goto_last_file_line_col_in_history()
{                                                                                                     {
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];
    int line_num, col_num;                                                                                int line_num, col_num;

    if (get_file_line_col_from_str_null(get_history_newest(HISTORY_TYPE_IDX_CURSPOS, 1),                  if (get_file_line_col_from_str_null(get_history_newest(HISTORY_TYPE_IDX_CURSPOS, 1),
     file_path, &line_num, &col_num) == 0) {                                                               file_path, &line_num, &col_num) == 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (switch_epc_buf_by_file_path(file_path) == 0) {                                                    if (switch_epc_buf_by_file_path(file_path) == 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    return goto_line_col_in_cur_buf(line_num, col_num);                                                   return goto_line_col_in_cur_buf(line_num, col_num);
}                                                                                                     }
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
PRIVATE char memorized_file_pos_buf[MAX_PATH_LEN+1] = "";                                             PRIVATE char memorized_file_pos_buf[MAX_PATH_LEN+1] = "";
char *get_memorized_file_pos_buf(char *buffer)                                                        char *get_memorized_file_pos_buf(char *buffer)
{                                                                                                     {
    return buffer ? buffer : memorized_file_pos_buf;                                                      return buffer ? buffer : memorized_file_pos_buf;
}                                                                                                     }
const char *get_memorized_file_pos_str(const char *str)                                               const char *get_memorized_file_pos_str(const char *str)
{                                                                                                     {
    return str ? str : memorized_file_pos_buf;                                                            return str ? str : memorized_file_pos_buf;
}                                                                                                     }
char *memorize_cur_file_pos_null(char *buffer)                                                        char *memorize_cur_file_pos_null(char *buffer)
{                                                                                                     {
    buffer = get_memorized_file_pos_buf(buffer);                                                          buffer = get_memorized_file_pos_buf(buffer);
    mk_cur_file_pos_str_buf(buffer);                                                                      mk_cur_file_pos_str_buf(buffer);
    return buffer;                                                                                        return buffer;
}                                                                                                     }

int recall_file_pos_null(const char *str)                                                             int recall_file_pos_null(const char *str)
{                                                                                                     {
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];

////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                         <
    if (get_file_line_col_from_str_null(str, file_path, NULL, NULL)) {                                    if (get_file_line_col_from_str_null(str, file_path, NULL, NULL)) {
        if (switch_epc_buf_by_file_path(file_path) == 0) {                                                    if (switch_epc_buf_by_file_path(file_path) == 0) {
            return 0;                                                                                             return 0;
        }                                                                                                     }
    }                                                                                                     }
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                         <
    return goto_str_line_col_in_cur_buf(str);                                                             return goto_str_line_col_in_cur_buf(str);
}                                                                                                     }
int goto_str_line_col_in_cur_buf(const char *str)                                                     int goto_str_line_col_in_cur_buf(const char *str)
{                                                                                                     {
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];
    int line_num, col_num;                                                                                int line_num, col_num;

    get_file_line_col_from_str_null(str, file_path, &line_num, &col_num);                                 get_file_line_col_from_str_null(str, file_path, &line_num, &col_num);
    return goto_line_col_in_cur_buf(line_num, col_num);                                                   return goto_line_col_in_cur_buf(line_num, col_num);
}                                                                                                     }
int goto_line_col_in_cur_buf(int line_num, int col_num)                                               int goto_line_col_in_cur_buf(int line_num, int col_num)
{                                                                                                     {
    if (line_num <= 0) {                                                                                  if (line_num <= 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    EPCBVC_CL = get_line_ptr_from_cur_buf_line_num(line_num);                                             EPCBVC_CL = get_line_ptr_from_cur_buf_line_num(line_num);
    EPCBVC_CLBI = 0;                                                                                      EPCBVC_CLBI = 0;
    if (col_num < 0) {  // if colnum == -1, updata both pane                                              if (col_num < 0) {  // if colnum == -1, updata both pane
        buf_set_view_x_cur_line(get_epc_buf(), 0, EPCBVC_CL);                                                 buf_set_view_x_cur_line(get_epc_buf(), 0, EPCBVC_CL);
        buf_set_view_x_cur_line(get_epc_buf(), 1, EPCBVC_CL);                                                 buf_set_view_x_cur_line(get_epc_buf(), 1, EPCBVC_CL);
        BUFVX_CLBI(get_epc_buf(), 0) = EPCBVC_CLBI;                                                           BUFVX_CLBI(get_epc_buf(), 0) = EPCBVC_CLBI;
        BUFVX_CLBI(get_epc_buf(), 1) = EPCBVC_CLBI;                                                           BUFVX_CLBI(get_epc_buf(), 1) = EPCBVC_CLBI;
    }                                                                                                     }
    if (col_num <= 0) {                                                                                   if (col_num <= 0) {
        return 1;                                                                                             return 1;
    }                                                                                                     }
    // col_num is byte count                                                                              // col_num is byte count
    EPCBVC_CLBI = byte_idx_from_byte_idx(EPCBVC_CL->data, col_num-1);                                     EPCBVC_CLBI = byte_idx_from_byte_idx(EPCBVC_CL->data, col_num-1);
/// BUFVX_CLBI(get_epc_buf(), 0) = EPCBVC_CLBI;                                                       /// BUFVX_CLBI(get_epc_buf(), 0) = EPCBVC_CLBI;
/// BUFVX_CLBI(get_epc_buf(), 1) = EPCBVC_CLBI;                                                       /// BUFVX_CLBI(get_epc_buf(), 1) = EPCBVC_CLBI;
    return 2;                                                                                             return 2;
}                                                                                                     }
//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
char *mk_cur_file_pos_str_static(void)                                                                char *mk_cur_file_pos_str_static(void)
{                                                                                                     {
    static char buffer[MAX_PATH_LEN+1];                                                                   static char buffer[MAX_PATH_LEN+1];
    return mk_cur_file_pos_str_buf(buffer);                                                               return mk_cur_file_pos_str_buf(buffer);
}                                                                                                     }
char *mk_cur_file_pos_str_buf(char *buffer)                                                           char *mk_cur_file_pos_str_buf(char *buffer)
{                                                                                                     {
    // memorize byte number                                                                               // memorize byte number
    return mk_file_pos_str(buffer, get_epc_buf()->file_path, EPCBVC_CL->line_num,                         return mk_file_pos_str(buffer, get_epc_buf()->file_path, EPCBVC_CL->line_num,
     EPCBVC_CL->data ? byte_idx_from_byte_idx(EPCBVC_CL->data, EPCBVC_CLBI)+1 : 0);                        EPCBVC_CL->data ? byte_idx_from_byte_idx(EPCBVC_CL->data, EPCBVC_CLBI)+1 : 0);
}                                                                                                     }
char *mk_file_pos_str(char *buffer, const char *file_path, int line_num, int col_num)                 char *mk_file_pos_str(char *buffer, const char *file_path, int line_num, int col_num)
{                                                                                                     {
    file_path = quote_file_name_static(file_path);                                                        file_path = quote_file_name_static(file_path);
    if (col_num <= 0) {                                                                                   if (col_num <= 0) {
        if (line_num <= 0) {                                                                                  if (line_num <= 0) {
            // /path/to/file.ext                                                                                  // /path/to/file.ext
            snprintf_(buffer, MAX_PATH_LEN+1, "%s", file_path);                                                   snprintf_(buffer, MAX_PATH_LEN+1, "%s", file_path);
        } else {                                                                                              } else {
            // /path/to/file.ext|999                                                                              // /path/to/file.ext|999
            snprintf_(buffer, MAX_PATH_LEN+1, "%s%s%d", file_path, FILE_PATH_SEPARATOR, line_num);                snprintf_(buffer, MAX_PATH_LEN+1, "%s%s%d", file_path, FILE_PATH_SEPARATOR, line_num);
        }                                                                                                     }
    } else {                                                                                              } else {
        // /path/to/file.ext|999:99                                                                           // /path/to/file.ext|999:99
        snprintf_(buffer, MAX_PATH_LEN+1, "%s%s%d:%d",                                                        snprintf_(buffer, MAX_PATH_LEN+1, "%s%s%d:%d",
         file_path, FILE_PATH_SEPARATOR, line_num, col_num);                                                   file_path, FILE_PATH_SEPARATOR, line_num, col_num);
    }                                                                                                     }
    return buffer;                                                                                        return buffer;
}                                                                                                     }
//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
PRIVATE int get_file_line_col_from_str(const char *str, char *file_path,                              PRIVATE int get_file_line_col_from_str(const char *str, char *file_path,
 int *line_num_, int *col_num_);                                                                       int *line_num_, int *col_num_);

int get_file_line_col_from_str_null(const char *str, char *file_path,                                 int get_file_line_col_from_str_null(const char *str, char *file_path,
 int *line_num, int *col_num)                                                                          int *line_num, int *col_num)
{                                                                                                     {
    str = get_memorized_file_pos_str(str);                                                                str = get_memorized_file_pos_str(str);
    return get_file_line_col_from_str(str, file_path, line_num, col_num);                                 return get_file_line_col_from_str(str, file_path, line_num, col_num);
}                                                                                                     }

// supported formats:                                                                                 // supported formats:
//  ##                      // ignore any string                                                      //  ##                      // ignore any string
//  #fileio.h               // file name in comment                                                   //  #fileio.h               // file name in comment
//  #include <fileio.h>     // C include directive                                                    //  #include <fileio.h>     // C include directive
//  fileio.h:20:10          // GCC error message                                                      //  fileio.h:20:10          // GCC error message
//  fileio.h,10             // C compiler error message                                               //  fileio.h,10             // C compiler error message
//  fileio.h(20:10)         // M$ C compiler error message                                            //  fileio.h(20:10)         // M$ C compiler error message
//  #:fileio.h,10           // gettext *.po file                                                      //  #:fileio.h,10           // gettext *.po file
//  fileio.h 20:10          // file-name line-num:col-num                                             //  fileio.h 20:10          // file-name line-num:col-num
//  fileio.h   20 10        // (separate by less than 4 spaces -> goto line-N)                        //  fileio.h   20 10        // (separate by less than 4 spaces -> goto line-N)
//  11/04/13 16:40:00, fileio.h:20:10,  // event log file                                             //  11/04/13 16:40:00, fileio.h:20:10,  // event log file
//  <location filename="fileio.h" line="10"/>   // Qt-lupdate                                         //  <location filename="fileio.h" line="10"/>   // Qt-lupdate
//  diff fileio.h fileio.h~ // command line                                                           //  diff fileio.h fileio.h~ // command line
//  SOURCES += fileio.h     // Qt project file                                                        //  SOURCES += fileio.h     // Qt project file
//  /home/user/tools/be/be/editorgoto.c|400:10 // BE file pos format                                  //  /home/user/tools/be/be/editorgoto.c|400:10 // BE file pos format
//    => "/home/user/tools/be/src/editorgoto.c", 400, 10                                              //    => "/home/user/tools/be/src/editorgoto.c", 400, 10
//  '/home/user/tools/be/src/ file name.txt '|400:10 // BE file pos format (quoted)                   //  '/home/user/tools/be/src/ file name.txt '|400:10 // BE file pos format (quoted)
//    => "/home/user/tools/be/src/ file name.txt ", 400, 10                                           //    => "/home/user/tools/be/src/ file name.txt ", 400, 10
// un-supported or avoided formats:                                                                   // un-supported or avoided formats:
//  fileio.h    20 10       // (separate by more than 4 spaces -> does not goto line-N)               //  fileio.h    20 10       // (separate by more than 4 spaces -> does not goto line-N)

PRIVATE int get_file_line_col_from_str(const char *str, char *file_path,                              PRIVATE int get_file_line_col_from_str(const char *str, char *file_path,
 int *line_num_, int *col_num_)                                                                        int *line_num_, int *col_num_)
{                                                                                                     {
    const char *ptr;                                                                                      const char *ptr;
    const char *fn_begin;                                                                                 const char *fn_begin;
    const char *fn_end;                                                                                   const char *fn_end;
    int line_num;                                                                                         int line_num;
    int col_num;                                                                                          int col_num;

    strcpy__(file_path, "");                                                                              strcpy__(file_path, "");
    line_num = 0;                                                                                         line_num = 0;
    col_num = 0;                                                                                          col_num = 0;

    ptr = skip_to_file_path(str);                                                                         ptr = skip_to_file_path(str);
    if (! is_file_path_char(ptr)) {                                                                       if (! is_file_path_char(ptr)) {
        goto no_file_path;                                                                                    goto no_file_path;
    }                                                                                                     }
    fn_begin = ptr;                                                                                       fn_begin = ptr;
    ptr = skip_file_path(ptr);                                                                            ptr = skip_file_path(ptr);
    fn_end = ptr;                                                                                         fn_end = ptr;
    strlcpy__(file_path, fn_begin, LIM_MAX(MAX_PATH_LEN, fn_end - fn_begin));                             strlcpy__(file_path, fn_begin, LIM_MAX(MAX_PATH_LEN, fn_end - fn_begin));
    unquote_string(file_path);                                                                            unquote_string(file_path);
    // skip to beginning of a line number                                                                 // skip to beginning of a line number
    ptr = skip_one_separator(ptr);                                                                        ptr = skip_one_separator(ptr);
    ptr = skip_two_spaces(ptr);                                                                           ptr = skip_two_spaces(ptr);
    if (! isdigit(*ptr)) {                                                                                if (! isdigit(*ptr)) {
        goto no_file_path;                                                                                    goto no_file_path;
    }                                                                                                     }
    line_num = atoi(ptr);                                                                                 line_num = atoi(ptr);
    ptr = skip_digits(ptr);                                                                               ptr = skip_digits(ptr);
    // skip to beginning of a column number                                                               // skip to beginning of a column number
    ptr = skip_to_digit(ptr);                                                                             ptr = skip_to_digit(ptr);
    if (! isdigit(*ptr)) {                                                                                if (! isdigit(*ptr)) {
        goto no_file_path;                                                                                    goto no_file_path;
    }                                                                                                     }
    col_num = atoi(ptr);                                                                                  col_num = atoi(ptr);
no_file_path:;                                                                                        no_file_path:;
    if (line_num_)                                                                                        if (line_num_)
        *line_num_ = line_num;                                                                                *line_num_ = line_num;
    if (col_num_)                                                                                         if (col_num_)
        *col_num_ = col_num;                                                                                  *col_num_ = col_num;
    return strlen_path(file_path);                                                                        return strlen_path(file_path);
}                                                                                                     }
//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int switch_epc_buf_by_file_path(const char *file_path)                                                int switch_epc_buf_by_file_path(const char *file_path)
{                                                                                                     {
    be_buf_t *buf = get_edit_buf_by_file_path(file_path);                                                 be_buf_t *buf = get_edit_buf_by_file_path(file_path);
    if (buf) {                                                                                            if (buf) {
        set_epc_buf(buf);                                                                                     set_epc_buf(buf);
        return 1;   // switched                                                                               return 1;   // switched
    }                                                                                                     }
    return 0;       // not found                                                                          return 0;       // not found
}                                                                                                     }
int switch_epc_buf_by_file_name(const char *file_name)                                                int switch_epc_buf_by_file_name(const char *file_name)
{                                                                                                     {
    be_buf_t *buf = get_edit_buf_by_file_name(file_name);                                                 be_buf_t *buf = get_edit_buf_by_file_name(file_name);
    if (buf) {                                                                                            if (buf) {
        set_epc_buf(buf);                                                                                     set_epc_buf(buf);
        return 1;   // switched                                                                               return 1;   // switched
    }                                                                                                     }
    return 0;       // not found                                                                          return 0;       // not found
}                                                                                                     }

int switch_epc_buf_to_top(void)                                                                       int switch_epc_buf_to_top(void)
{                                                                                                     {
    if (IS_NODE_ANCH(EDIT_BUFS_TOP_BUF))                                                                  if (IS_NODE_ANCH(EDIT_BUFS_TOP_BUF))
        return 0;                                                                                             return 0;
    set_epc_buf(EDIT_BUFS_TOP_BUF);                                                                       set_epc_buf(EDIT_BUFS_TOP_BUF);
    return 1;                                                                                             return 1;
}                                                                                                     }
int switch_epc_buf_to_bot(void)                                                                       int switch_epc_buf_to_bot(void)
{                                                                                                     {
    if (IS_NODE_ANCH(EDIT_BUFS_BOT_BUF))                                                                  if (IS_NODE_ANCH(EDIT_BUFS_BOT_BUF))
        return 0;                                                                                             return 0;
    set_epc_buf(EDIT_BUFS_BOT_BUF);                                                                       set_epc_buf(EDIT_BUFS_BOT_BUF);
    return 1;                                                                                             return 1;
}                                                                                                     }
int switch_epc_buf_to_prev(int beep_at_end, int goto_bottom)                                          int switch_epc_buf_to_prev(int beep_at_end, int goto_bottom)
{                                                                                                     {
    if (IS_NODE_TOP(get_epc_buf())) {                                                                     if (IS_NODE_TOP(get_epc_buf())) {
        if (beep_at_end)                                                                                      if (beep_at_end)
            tio_beep();                                                                                           tio_beep();
        return 0;                                                                                             return 0;
    }                                                                                                     }
    set_epc_buf(NODE_PREV(get_epc_buf()));                                                                set_epc_buf(NODE_PREV(get_epc_buf()));
    if (goto_bottom) {                                                                                    if (goto_bottom) {
        EPCBVC_CL = CUR_EDIT_BUF_BOT_LINE;                                                                    EPCBVC_CL = CUR_EDIT_BUF_BOT_LINE;
    }                                                                                                     }
    return 1;                                                                                             return 1;
}                                                                                                     }
int switch_epc_buf_to_next(int beep_at_end, int goto_top)                                             int switch_epc_buf_to_next(int beep_at_end, int goto_top)
{                                                                                                     {
    if (IS_NODE_BOT(get_epc_buf())) {                                                                     if (IS_NODE_BOT(get_epc_buf())) {
        if (beep_at_end)                                                                                      if (beep_at_end)
            tio_beep();                                                                                           tio_beep();
        return 0;                                                                                             return 0;
    }                                                                                                     }
    set_epc_buf(NODE_NEXT(get_epc_buf()));                                                                set_epc_buf(NODE_NEXT(get_epc_buf()));
    if (goto_top) {                                                                                       if (goto_top) {
        EPCBVC_CL = CUR_EDIT_BUF_TOP_LINE;                                                                    EPCBVC_CL = CUR_EDIT_BUF_TOP_LINE;
    }                                                                                                     }
    return 1;                                                                                             return 1;
}                                                                                                     }
int switch_epc_buf_to_valid_buf(void)                                                                 int switch_epc_buf_to_valid_buf(void)
{                                                                                                     {
    if (IS_NODE_INT(get_epc_buf()) == 0) {                                                                if (IS_NODE_INT(get_epc_buf()) == 0) {
        return switch_epc_buf_to_another_buf();                                                               return switch_epc_buf_to_another_buf();
    }                                                                                                     }
    return 1;                                                                                             return 1;
}                                                                                                     }
int switch_epc_buf_to_another_buf(void)                                                               int switch_epc_buf_to_another_buf(void)
{                                                                                                     {
    if (switch_epc_buf_to_next(0, 0) == 0) {                                                              if (switch_epc_buf_to_next(0, 0) == 0) {
        if (switch_epc_buf_to_prev(0, 0) == 0) {                                                              if (switch_epc_buf_to_prev(0, 0) == 0) {
///         set_epc_buf(EDIT_BUFS_TOP_ANCH);                                                          ///         set_epc_buf(EDIT_BUFS_TOP_ANCH);
            set_epc_buf(EDIT_BUFS_TOP_BUF);                                                                       set_epc_buf(EDIT_BUFS_TOP_BUF);
            return 0;                                                                                             return 0;
        }                                                                                                     }
    }                                                                                                     }
    return 1;                                                                                             return 1;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
// supported file names:                                                                              // supported file names:
//  |No.| file type                                                | command line | file list |       //  |No.| file type                                                | command line | file list |
//  |---|----------------------------------------------------------|--------------|-----------|       //  |---|----------------------------------------------------------|--------------|-----------|
//  | 1 |" file name.txt "(includes spaces in head, middle or tail)| supported    | supported |       //  | 1 |" file name.txt "(includes spaces in head, middle or tail)| supported    | supported |
//  | 2 |'"filename".txt' (includes '"')                           | supported    | supported |       //  | 2 |'"filename".txt' (includes '"')                           | supported    | supported |
//  | 3 |"file|name.txt"  (includes special chars [|'])            | supported    | supported |       //  | 3 |"file|name.txt"  (includes special chars [|'])            | supported    | supported |
// workaround:                                                                                        // workaround:
//  |No.| command line      | file list                 | project file             |                  //  |No.| command line      | file list                 | project file             |
//  |---|-------------------|---------------------------|--------------------------|                  //  |---|-------------------|---------------------------|--------------------------|
//  | 1 | " file name.txt " | " file name.txt ",100,10  | 100,10," file name.txt " |                  //  | 1 | " file name.txt " | " file name.txt ",100,10  | 100,10," file name.txt " |
//  | 2 | "filename".txt    | "\"filename.txt\"",100,10 | 100,10,"\"filename.txt\""|                  //  | 2 | "filename".txt    | "\"filename.txt\"",100,10 | 100,10,"\"filename.txt\""|
//  | 2 | "file|name.txt"   | "file|name.txt",100,10    | 100,10,"file|name.txt"   |                  //  | 2 | "file|name.txt"   | "file|name.txt",100,10    | 100,10,"file|name.txt"   |
//  | 2 | "file'name.txt"   | "file'name.txt",100,10    | 100,10,"file|name.txt"   |                  //  | 2 | "file'name.txt"   | "file'name.txt",100,10    | 100,10,"file|name.txt"   |

// End of editorgoto.c                                                                                // End of editorgoto.c
kdiff3 ../old/be/editorkeys.c editorkeys.c #========================
/**************************************************************************                           /**************************************************************************
 *   editorkeys.c                                                         *                            *   editorkeys.c                                                         *
 *                                                                        *                            *                                                                        *
 *   Copyright (C) 1999-2003 Chris Allegretta                             *                            *   Copyright (C) 1999-2003 Chris Allegretta                             *
 *   Copyright (C) 2010-2018 PCR                                          *                            *   Copyright (C) 2010-2018 PCR                                          *
 *                                                                        *                            *                                                                        *
 *   This program is free software; you can redistribute it and/or modify *                            *   This program is free software; you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published by *                            *   it under the terms of the GNU General Public License as published by *
 *   the Free Software Foundation; either version 2, or (at your option)  *                            *   the Free Software Foundation; either version 2, or (at your option)  *
 *   any later version.                                                   *                            *   any later version.                                                   *
 *                                                                        *                            *                                                                        *
 *   This program is distributed in the hope that it will be useful,      *                            *   This program is distributed in the hope that it will be useful,      *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *                            *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *                            *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 *   GNU General Public License for more details.                         *                            *   GNU General Public License for more details.                         *
 *                                                                        *                            *                                                                        *
 *   You should have received a copy of the GNU General Public License    *                            *   You should have received a copy of the GNU General Public License    *
 *   along with this program; if not, write to the Free Software          *                            *   along with this program; if not, write to the Free Software          *
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *                            *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *
 *                                                                        *                            *                                                                        *
 **************************************************************************/                           **************************************************************************/

#include "headers.h"                                                                                  #include "headers.h"

func_key_table_t editor_func_key_table[] = {                                                          func_key_table_t editor_func_key_table[] = {
//  12345678901234567890   123456789012345678901234567890   123456789012345678901234567890            //  12345678901234567890   123456789012345678901234567890   123456789012345678901234567890
//      12345678901234567890                                                                          //      12345678901234567890
 { "",                    "File Menu",                      K_ESC,        KNA, KNA,                    { "",                    "File Menu",                      K_ESC,        KNA, KNA,
   XA, F_I(doe_editor_menu_1), NULL },                                                                   XA, F_I(doe_editor_menu_1), NULL },
 { "Prev.Menu",           "Previous Menu",                  K_M_ESC, K_M_BACKQUOTE, KNA,               { "Prev.Menu",           "Previous Menu",                  K_M_ESC, K_M_BACKQUOTE, KNA,
   XL, F_I(doe_editor_menu_0), NULL },                                                                   XL, F_I(doe_editor_menu_0), NULL },
 { "Open File",           "Open file",                      K_M_e,        KNA, KNA,                    { "Open File",           "Open file",                      K_M_e,        KNA, KNA,
   XL, F_I(doe_open_file), NULL },                                                                       XL, F_I(doe_open_file), NULL },
 { "Open New File",       "Open new file",                  K_M_E, K_M_n,      KNA,                    { "Open New File",       "Open new file",                  K_M_E, K_M_n,      KNA,
   XL, F_I(doe_open_new_file), NULL },                                                                   XL, F_I(doe_open_new_file), NULL },
 { "Reopen",              "Reopen file",                    K_C_Z,        KNA, KNA,                    { "Reopen",              "Reopen file",                    K_C_Z,        KNA, KNA,
   XL, F_I(doe_reopen_file), NULL },                                                                     XL, F_I(doe_reopen_file), NULL },
 { "Reopen, goto Last pos.", "Reopen and go to Last line",  KNA,          KNA, KNA,                    { "Reopen, goto Last pos.", "Reopen and go to Last line",  KNA,          KNA, KNA,
   XL, F_I(doe_reopen_file_last_line), NULL },                                                           XL, F_I(doe_reopen_file_last_line), NULL },
 { "Write File as",       "Write file as",                  K_M_s, K_M_S,      KNA,                    { "Write File as",       "Write file as",                  K_M_s, K_M_S,      KNA,
   XL, F_I(doe_write_file_to), NULL },                                                                   XL, F_I(doe_write_file_to), NULL },
 { "Write File",          "Write file",                     K_M_w,        KNA, KNA,                    { "Write File",          "Write file",                     K_M_w,        KNA, KNA,
   XL, F_I(doe_write_file_ask), NULL },                                                                  XL, F_I(doe_write_file_ask), NULL },
 { "Write File always.",  "Write file always",              K_M_W,        KNA, KNA,                    { "Write File always.",  "Write file always",              K_M_W,        KNA, KNA,
   XL, F_I(doe_write_file_always), NULL },                                                               XL, F_I(doe_write_file_always), NULL },
 { "Write All",           "Write all files",                K_M_a,        KNA, KNA,                    { "Write All",           "Write all files",                K_M_a,        KNA, KNA,
   XL, F_I(doe_write_all_ask), NULL },                                                                   XL, F_I(doe_write_all_ask), NULL },
 { "Write All Modif.",    "Write all files modified",       K_M_A,        KNA, KNA,                    { "Write All Modif.",    "Write all files modified",       K_M_A,        KNA, KNA,
   XL, F_I(doe_write_all_modified), NULL },                                                              XL, F_I(doe_write_all_modified), NULL },
 { "Close",               "Close file",                     K_C_Q,        KNA, KNA,                    { "Close",               "Close file",                     K_C_Q,        KNA, KNA,
   XA, F_I(doe_close_file_ask), NULL },                                                                  XA, F_I(doe_close_file_ask), NULL },
 { "Close always",        "Close file",                     K_MC_Q,       KNA, KNA,                    { "Close always",        "Close file",                     K_MC_Q,       KNA, KNA,
   XA, F_I(doe_close_file_always), NULL },                                                               XA, F_I(doe_close_file_always), NULL },
 { "Close All inter.",    "Close all files",                K_M_q,        KNA, KNA,                    { "Close All inter.",    "Close all files",                K_M_q,        KNA, KNA,
   XA, F_I(doe_close_all_ask), NULL },                                                                   XA, F_I(doe_close_all_ask), NULL },
 { "Close All Modif.",    "Close all files modified",       K_M_Q,        KNA, KNA,                    { "Close All Modif.",    "Close all files modified",       K_M_Q,        KNA, KNA,
   XA, F_I(doe_close_all_modified), NULL },                                                              XA, F_I(doe_close_all_modified), NULL },
 { "Open Files",          "Open files in buffer",           K_M_L,        KNA, KNA,                    { "Open Files",          "Open files in buffer",           K_M_L,        KNA, KNA,
   XL, F_I(doe_open_files_in_buf), NULL },                                                               XL, F_I(doe_open_files_in_buf), NULL },
 { "Read into buffer",    "Read file into current pos",     K_M_i,        KNA, KNA,                    { "Read into buffer",    "Read file into current pos",     K_M_i,        KNA, KNA,
   XL, F_I(doe_read_file_into_cur_pos), NULL },                                                          XL, F_I(doe_read_file_into_cur_pos), NULL },
#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
 { "Filer",               "Open filer",                     K_M_f,        KNA, KNA,                    { "Filer",               "Open filer",                     K_M_f,        KNA, KNA,
   XA, F_I(doe_call_filer), NULL },                                                                      XA, F_I(doe_call_filer), NULL },
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER

 { "",                    "Cursor Menu",                    KNA,          KNA, KNA,                    { "",                    "Cursor Menu",                    KNA,          KNA, KNA,
   XL, F_I(doe_editor_menu_2), NULL },                                                                   XL, F_I(doe_editor_menu_2), NULL },
 { "Up",                  "Move cursor UP",                 K_C_E, KNA,   K_UP,                        { "Up",                  "Move cursor UP",                 K_C_E, KNA,   K_UP,
   XA, F_I(doe_up), NULL },                                                                              XA, F_I(doe_up), NULL },
 { "Down",                "Move cursor DOWN",               K_C_X, KNA,   K_DOWN,                      { "Down",                "Move cursor DOWN",               K_C_X, KNA,   K_DOWN,
   XA, F_I(doe_down), NULL },                                                                            XA, F_I(doe_down), NULL },
 { "Left",                "Move cursor LEFT",               K_C_S, KNA,   K_LEFT,                      { "Left",                "Move cursor LEFT",               K_C_S, KNA,   K_LEFT,
   XA, F_I(doe_left), NULL },                                                                            XA, F_I(doe_left), NULL },
 { "Right",               "Move cursor RIGHT",              K_C_D, KNA,   K_RIGHT,                     { "Right",               "Move cursor RIGHT",              K_C_D, KNA,   K_RIGHT,
   XA, F_I(doe_right), NULL },                                                                           XA, F_I(doe_right), NULL },
 { "Prev Page",           "Page UP",                        K_C_R, KNA,   K_PPAGE,                     { "Prev Page",           "Page UP",                        K_C_R, KNA,   K_PPAGE,
   XA, F_I(doe_page_up), NULL },                                                                         XA, F_I(doe_page_up), NULL },
 { "Next Page",           "Page DOWN",                      K_C_C, KNA,   K_NPAGE,                     { "Next Page",           "Page DOWN",                      K_C_C, KNA,   K_NPAGE,
   XA, F_I(doe_page_down), NULL },                                                                       XA, F_I(doe_page_down), NULL },
 { "Prev Word",           "Move backward one word",         K_C_A,        KNA, KNA,                    { "Prev Word",           "Move backward one word",         K_C_A,        KNA, KNA,
   XA, F_I(doe_prev_word), NULL },                                                                       XA, F_I(doe_prev_word), NULL },
 { "Next Word",           "Move forward one word",          K_C_F,        KNA, KNA,                    { "Next Word",           "Move forward one word",          K_C_F,        KNA, KNA,
   XA, F_I(doe_next_word), NULL },                                                                       XA, F_I(doe_next_word), NULL },
 { "Start of line",       "Start of the line",              K_C_T, KNA,   K_HOME,                      { "Start of line",       "Start of the line",              K_C_T, KNA,   K_HOME,
   XA, F_I(doe_start_of_line), NULL },                                                                   XA, F_I(doe_start_of_line), NULL },
 { "End of line",         "End of the line",                K_C_B, K_C_V, K_END,                       { "End of line",         "End of the line",                K_C_B, K_C_V, K_END,
   XA, F_I(doe_end_of_line), NULL },                                                                     XA, F_I(doe_end_of_line), NULL },
 { "First line",          "Top of the file",                K_M_t,        KNA, KNA,                    { "First line",          "Top of the file",                K_M_t,        KNA, KNA,
   XA, F_I(doe_first_line), NULL },                                                                      XA, F_I(doe_first_line), NULL },
 { "Last line",           "Bottom of the file",             K_M_b,        KNA, KNA,                    { "Last line",           "Bottom of the file",             K_M_b,        KNA, KNA,
   XA, F_I(doe_last_line), NULL },                                                                       XA, F_I(doe_last_line), NULL },
 { "Go To Line",          "Go to specified line",           K_C_UNDERLINE,KNA, KNA,                    { "Go To Line",          "Go to specified line",           K_C_UNDERLINE,KNA, KNA,
   XA, F_I(doe_goto_input_line), NULL },                                                                 XA, F_I(doe_goto_input_line), NULL },
 { "Tag-Jump",            "Tag-jump to file or directory",  K_F12,        KNA, KNA,                    { "Tag-Jump",            "Tag-jump to file or directory",  K_F12,        KNA, KNA,
   XA, F_I(doe_goto_file_or_dir_in_cur_line), NULL },                                                    XA, F_I(doe_goto_file_or_dir_in_cur_line), NULL },
 { "Tag-Jump to directory","Tag-jump to file or directory", K_F11,        KNA, KNA,                    { "Tag-Jump to directory","Tag-jump to file or directory", K_F11,        KNA, KNA,
   XA, F_I(doe_goto_file_or_dir_in_cur_cursor_pos), NULL },                                              XA, F_I(doe_goto_file_or_dir_in_cur_cursor_pos), NULL },
 { "Tag-Jump",            "Tag-jump",                       K_M_j,        KNA, KNA,                    { "Tag-Jump",            "Tag-jump",                       K_M_j,        KNA, KNA,
   XA, F_I(doe_goto_file_in_cur_line), NULL },                                                           XA, F_I(doe_goto_file_in_cur_line), NULL },
 { "Tag-Jump to directory","Tag-jump to directory",         K_M_J,        KNA, KNA,                    { "Tag-Jump to directory","Tag-jump to directory",         K_M_J,        KNA, KNA,
   XA, F_I(doe_goto_file_in_cur_cursor_pos), NULL },                                                     XA, F_I(doe_goto_file_in_cur_cursor_pos), NULL },

 { "",                    "Edit Menu",                      KNA,          KNA, KNA,                    { "",                    "Edit Menu",                      KNA,          KNA, KNA,
   XL, F_I(doe_editor_menu_3), NULL },                                                                   XL, F_I(doe_editor_menu_3), NULL },
 { "Tab",                 "Insert a TAB character",         K_TAB,        KNA, KNA,                    { "Tab",                 "Insert a TAB character",         K_TAB,        KNA, KNA,
   XL, F_I(doe_tab), NULL },                                                                             XL, F_I(doe_tab), NULL },
 { "Enter",               "Insert a carriage return",       K_C_M, K_ENTER, K_M_ENTER,                 { "Enter",               "Insert a carriage return",       K_C_M, K_ENTER, K_M_ENTER,
   XA, F_I(doe_carriage_return), NULL },                                                                 XA, F_I(doe_carriage_return), NULL },
 { "Backspace",           "Backspace",                      K_C_H, KNA,   K_BS,                        { "Backspace",           "Backspace",                      K_C_H, KNA,   K_BS,
   XL, F_I(doe_backspace), NULL },                                                                       XL, F_I(doe_backspace), NULL },
                                                                                                   >   { "Backspace(limited)",   "Backspace(limited)",            K_MC_H,       KNA, KNA,
                                                                                                   >     XL, F_I(doe_backspace_limited), NULL },
 { "Delete",              "Delete a character",             K_C_G, K_DEL,      KNA,                    { "Delete",              "Delete a character",             K_C_G, K_DEL,      KNA,
   XL, F_I(doe_delete_char), NULL },                                                                     XL, F_I(doe_delete_char), NULL },
 { "UpperLower",          "Invert upper/lower letter",      K_C_W,        KNA, KNA,                    { "UpperLower",          "Invert upper/lower letter",      K_C_W,        KNA, KNA,
   XL, F_I(doe_conv_upp_low_letter), NULL },                                                             XL, F_I(doe_conv_upp_low_letter), NULL },
 { "Ctrl code",           "Input control code",             K_C_AT, K_M_9,     KNA,                    { "Ctrl code",           "Input control code",             K_C_AT, K_M_9,     KNA,
   XL, F_I(doe_control_code), NULL },                                                                    XL, F_I(doe_control_code), NULL },
 { "Char code",           "Input character code",           K_M_AT, K_M_0,     KNA,                    { "Char code",           "Input character code",           K_M_AT, K_M_0,     KNA,
   XL, F_I(doe_charcode), NULL },                                                                        XL, F_I(doe_charcode), NULL },
 { "Paste history",       "Paste from history",             K_M_h,        KNA, KNA,                    { "Paste history",       "Paste from history",             K_M_h,        KNA, KNA,
   XL, F_I(doe_paste_from_history), NULL },                                                              XL, F_I(doe_paste_from_history), NULL },
 { "Record/Stop-rec",     "Start/Stop recording key-macro", K_F01, K_M_r     , KNA,                    { "Record/Stop-rec",     "Start/Stop recording key-macro", K_F01, K_M_r     , KNA,
   XL, F_I(doe_start_rec__cancel_rec), NULL },                                                           XL, F_I(doe_start_rec__cancel_rec), NULL },
 { "End-rec/Playback",    "End-rec/Playback key-macro",     K_F02, K_M_p     , KNA,                    { "End-rec/Playback",    "End-rec/Playback key-macro",     K_F02, K_M_p     , KNA,
   XL, F_I(doe_end_rec__playback), NULL },                                                               XL, F_I(doe_end_rec__playback), NULL },
 { "Playback",            "Playback key-macro",             K_M_2,        KNA, KNA,                    { "Playback",            "Playback key-macro",             K_M_2,        KNA, KNA,
   XL, F_I(doe_playback), NULL },                                                                        XL, F_I(doe_playback), NULL },
 { "Playback-1",          "Playback 1st newest key-macro",  K_S_F01,       KNA, KNA,                   { "Playback-1",          "Playback 1st newest key-macro",  K_S_F01,       KNA, KNA,
   XL, F_I(doe_playback_last_1), NULL },                                                                 XL, F_I(doe_playback_last_1), NULL },
 { "Playback-2",          "Playback 2nd newest key-macro",  K_S_F02,       KNA, KNA,                   { "Playback-2",          "Playback 2nd newest key-macro",  K_S_F02,       KNA, KNA,
   XL, F_I(doe_playback_last_2), NULL },                                                                 XL, F_I(doe_playback_last_2), NULL },
 { "Run line soon",       "Run current line as command",    K_M_x,        KNA, KNA,                    { "Run line soon",       "Run current line as command",    K_M_x,        KNA, KNA,
   XA, F_I(doe_run_line_soon), NULL },                                                                   XA, F_I(doe_run_line_soon), NULL },
#ifdef ENABLE_UNDO                                                                                    #ifdef ENABLE_UNDO
 { "Undo",                "Undo",                           K_M_u, K_M_z,      KNA,                    { "Undo",                "Undo",                           K_M_u, K_M_z,      KNA,
   XL, F_I(doe_undo), NULL },                                                                            XL, F_I(doe_undo), NULL },
 { "Redo",                "Redo",                           K_M_o,        KNA, KNA,                    { "Redo",                "Redo",                           K_M_o,        KNA, KNA,
   XL, F_I(doe_redo), NULL },                                                                            XL, F_I(doe_redo), NULL },
#endif // ENABLE_UNDO                                                                                 #endif // ENABLE_UNDO

 { "",                    "Search/Replace Menu",            KNA,          KNA, KNA,                    { "",                    "Search/Replace Menu",            KNA,          KNA, KNA,
   XL, F_I(doe_editor_menu_4), NULL },                                                                   XL, F_I(doe_editor_menu_4), NULL },
 { "Search Bw",           "Search keyword forward",         K_S_F03, K_C_RBRACKET, KNA,                { "Search Bw",           "Search keyword forward",         K_S_F03, K_C_RBRACKET, KNA,
   XA, F_I(doe_search_backward_first), NULL },                                                           XA, F_I(doe_search_backward_first), NULL },
 { "Search Fw",           "Search keyword backward",        K_S_F04, K_C_BACKSLASH, KNA,               { "Search Fw",           "Search keyword backward",        K_S_F04, K_C_BACKSLASH, KNA,
   XA, F_I(doe_search_forward_first), NULL },                                                            XA, F_I(doe_search_forward_first), NULL },
 { "Srch Nx Bw",          "Search keyword backward again",  K_F03,        KNA, KNA,                    { "Srch Nx Bw",          "Search keyword backward again",  K_F03,        KNA, KNA,
   XA, F_I(doe_search_backward_next), NULL },                                                            XA, F_I(doe_search_backward_next), NULL },
 { "Srch Nx Fw",          "Search keyword forward again",   K_F04,        KNA, KNA,                    { "Srch Nx Fw",          "Search keyword forward again",   K_F04,        KNA, KNA,
   XA, F_I(doe_search_forward_next), NULL },                                                             XA, F_I(doe_search_forward_next), NULL },
 { "Replace",             "Replace keyword",                K_C_CARET,    KNA, KNA,                    { "Replace",             "Replace keyword",                K_C_CARET,    KNA, KNA,
   XL, F_I(doe_replace), NULL },                                                                         XL, F_I(doe_replace), NULL },
#ifdef ENABLE_REGEX                                                                                   #ifdef ENABLE_REGEX
 { "Find Bracket()",      "Find counter bracket()", K_M_LBRACKET, K_M_RBRACKET, K_M_BACKSLASH,         { "Find Bracket()",      "Find counter bracket()", K_M_LBRACKET, K_M_RBRACKET, K_M_BACKSLASH,
   XL, F_I(doe_find_bracket), NULL },                                                                    XL, F_I(doe_find_bracket), NULL },
 { "Find Bracket)(",      "Find counter bracket)(", K_M_LBRACE, K_M_RBRACE, K_M_VERTBAR,               { "Find Bracket)(",      "Find counter bracket)(", K_M_LBRACE, K_M_RBRACE, K_M_VERTBAR,
   XL, F_I(doe_find_bracket_reverse), NULL },                                                            XL, F_I(doe_find_bracket_reverse), NULL },
#endif // ENABLE_REGEX                                                                                #endif // ENABLE_REGEX

 { "",                    "Buffer Menu",                    KNA,          KNA, KNA,                    { "",                    "Buffer Menu",                    KNA,          KNA, KNA,
   XL, F_I(doe_editor_menu_5), NULL },                                                                   XL, F_I(doe_editor_menu_5), NULL },
 { "Previous File",       "Open previous file",             K_M_COMMA,    KNA, KNA,                    { "Previous File",       "Open previous file",             K_M_COMMA,    KNA, KNA,
   XA, F_I(doe_switch_to_prev_file), NULL },                                                             XA, F_I(doe_switch_to_prev_file), NULL },
 { "Next File",           "Open next file",                 K_M_PERIOD,   KNA, KNA,                    { "Next File",           "Open next file",                 K_M_PERIOD,   KNA, KNA,
   XA, F_I(doe_switch_to_next_file), NULL },                                                             XA, F_I(doe_switch_to_next_file), NULL },
 { "Top File",            "Open top file",                  K_M_LESSTHAN, KNA, KNA,                    { "Top File",            "Open top file",                  K_M_LESSTHAN, KNA, KNA,
   XL, F_I(doe_switch_to_top_file), NULL },                                                              XL, F_I(doe_switch_to_top_file), NULL },
 { "Bottom File",         "Open bottom file",               K_M_GREATERTHAN, KNA, KNA,                 { "Bottom File",         "Open bottom file",               K_M_GREATERTHAN, KNA, KNA,
   XL, F_I(doe_switch_to_bot_file), NULL },                                                              XL, F_I(doe_switch_to_bot_file), NULL },
 { "File List",           "Display File List",              K_M_SEMICOLON,   KNA, KNA,                 { "File List",           "Display File List",              K_M_SEMICOLON,   KNA, KNA,
   XL, F_I(doe_switch_to_file_list), NULL },                                                             XL, F_I(doe_switch_to_file_list), NULL },
#if APP_REL_LVL == APP_REL_LVL_EXPERIMENTAL                                                           #if APP_REL_LVL == APP_REL_LVL_EXPERIMENTAL
 { "Previous buffers",    "Goto previous buffers",          K_M_LPARENTHESIS, KNA, KNA,                { "Previous buffers",    "Goto previous buffers",          K_M_LPARENTHESIS, KNA, KNA,
   XL, F_I(doe_switch_to_prev_buffers), NULL },                                                          XL, F_I(doe_switch_to_prev_buffers), NULL },
 { "Next buffers",        "Goto next buffers",              K_M_RPARENTHESIS, KNA, KNA,                { "Next buffers",        "Goto next buffers",              K_M_RPARENTHESIS, KNA, KNA,
   XL, F_I(doe_switch_to_next_buffers), NULL },                                                          XL, F_I(doe_switch_to_next_buffers), NULL },
#endif // APP_REL_LVL                                                                                 #endif // APP_REL_LVL
#ifdef ENABLE_HELP                                                                                    #ifdef ENABLE_HELP
 { "Key List",            "Display Key List",               K_M_K,        KNA, KNA,                    { "Key List",            "Display Key List",               K_M_K,        KNA, KNA,
   XL, F_I(doe_switch_to_key_list), NULL },                                                              XL, F_I(doe_switch_to_key_list), NULL },
 { "Func List",           "Display Function List",          K_M_F,        KNA, KNA,                    { "Func List",           "Display Function List",          K_M_F,        KNA, KNA,
   XL, F_I(doe_switch_to_func_list), NULL },                                                             XL, F_I(doe_switch_to_func_list), NULL },
#endif // ENABLE_HELP                                                                                 #endif // ENABLE_HELP
 { "Open project file",   "Open project file",              K_M_P,        KNA, KNA,                    { "Open project file",   "Open project file",              K_M_P,        KNA, KNA,
   XL, F_I(doe_open_proj_file), NULL },                                                                  XL, F_I(doe_open_proj_file), NULL },
 { "Goto prev. pos",      "Goto previous pos.",             K_M_SLASH,    KNA, KNA,                    { "Goto prev. pos",      "Goto previous pos.",             K_M_SLASH,    KNA, KNA,
   XL, F_I(doe_return_to_prev_file_pos), NULL },                                                         XL, F_I(doe_return_to_prev_file_pos), NULL },
 { "Goto next. pos",      "Goto next pos.",                 K_M_QUESTION, KNA, KNA,                    { "Goto next. pos",      "Goto next pos.",                 K_M_QUESTION, KNA, KNA,
   XL, F_I(doe_return_to_prev_file_pos), NULL },                                                         XL, F_I(doe_return_to_prev_file_pos), NULL },
 { "Split pane",          "Split screen into panes",        K_MC_BACKSLASH, KNA, KNA,                  { "Split pane",          "Split screen into panes",        K_MC_BACKSLASH, KNA, KNA,
   XL, F_I(doe_tog_panes), get_editor_panes },                                                           XL, F_I(doe_tog_panes), get_editor_panes },
 { "Switch pane",         "Switch editor pane",             K_M_TAB,      KNA, KNA,                    { "Switch pane",         "Switch editor pane",             K_M_TAB,      KNA, KNA,
   XL, F_I(doe_switch_editor_pane), NULL },                                                              XL, F_I(doe_switch_editor_pane), NULL },

 { "",                    "Cut-buffer Menu",                KNA,          KNA, KNA,                    { "",                    "Cut-buffer Menu",                KNA,          KNA, KNA,
   XL, F_I(doe_editor_menu_6), NULL },                                                                   XL, F_I(doe_editor_menu_6), NULL },
 { "Mark Text",           "Mark text",                      K_C_N, K_F05,      KNA,                    { "Mark Text",           "Mark text",                      K_C_N, K_F05,      KNA,
   XL, F_I(doe_tog_mark), NULL },                                                                        XL, F_I(doe_tog_mark), NULL },
 { "Clear Cut-buf",       "Clear Cut-buffers",              K_S_F05,       KNA, KNA,                   { "Clear Cut-buf",       "Clear Cut-buffers",              K_S_F05,       KNA, KNA,
   XL, F_I(doe_clear_cut_buf), NULL },                                                                   XL, F_I(doe_clear_cut_buf), NULL },
#if 0                                                                                                 #if 0
///// { "Pop Cut-buf",         "Pop Cut-buffer",                 K_S_F06,       KNA, KNA,          |  //// { "Pop Cut-buf",         "Pop Cut-buffer",                 K_S_F06,       KNA, KNA,
/////   XL, F_I(doe_pop_cut_buf), NULL },                                                          |  ////   XL, F_I(doe_pop_cut_buf), NULL },
#endif                                                                                                #endif
 { "Select all",          "Select all of buffer",           K_M_m,        KNA, KNA,                    { "Select all",          "Select all of buffer",           K_M_m,        KNA, KNA,
   XL, F_I(doe_select_all_lines), NULL },                                                                XL, F_I(doe_select_all_lines), NULL },
 { "Cut Text",            "Cut into Cut-buffer",            K_C_K, K_F06,      KNA,                    { "Cut Text",            "Cut into Cut-buffer",            K_C_K, K_F06,      KNA,
   XL, F_I(doe_cut_text), NULL },                                                                        XL, F_I(doe_cut_text), NULL },
 { "Delete Text",         "Delete text",                    K_M_k, K_S_F06,     KNA,                   { "Delete Text",         "Delete text",                    K_M_k, K_S_F06,     KNA,
   XL, F_I(doe_delete_text), NULL },                                                                     XL, F_I(doe_delete_text), NULL },
 { "Copy Text",           "Copy to Cut-buffer",             K_C_Y, K_F07,      KNA,                    { "Copy Text",           "Copy to Cut-buffer",             K_C_Y, K_F07,      KNA,
   XA, F_I(doe_copy_text), NULL },                                                                       XA, F_I(doe_copy_text), NULL },
 { "Paste Text",          "Paste from Cut-buf with pop",    K_C_P, K_F08,      KNA,                    { "Paste Text",          "Paste from Cut-buf with pop",    K_C_P, K_F08,      KNA,
   XL, F_I(doe_paste_text_with_pop), NULL },                                                             XL, F_I(doe_paste_text_with_pop), NULL },
 { "Paste2 Text",         "Paste from Cut-buf without pop", K_C_O, K_F09, K_INS,                       { "Paste2 Text",         "Paste from Cut-buf without pop", K_C_O, K_F09, K_INS,
   XL, F_I(doe_paste_text_without_pop), NULL },                                                          XL, F_I(doe_paste_text_without_pop), NULL },
 { "Duplic Text",         "Duplicate line",                 K_C_U, K_F10,      KNA,                    { "Duplic Text",         "Duplicate line",                 K_C_U, K_F10,      KNA,
   XL, F_I(doe_duplicate_text), NULL },                                                                  XL, F_I(doe_duplicate_text), NULL },
 { "Copy to clip-board",  "Copy to clip-board",             K_S_F07,       KNA, KNA,                   { "Copy to clip-board",  "Copy to clip-board",             K_S_F07,       KNA, KNA,
   XL, F_I(doe_copy_text_to_system_clipboard), NULL },                                                   XL, F_I(doe_copy_text_to_system_clipboard), NULL },
 { "Paste clip-board",    "Paste clip-board",               K_S_F08,       KNA, KNA,                   { "Paste clip-board",    "Paste clip-board",               K_S_F08,       KNA, KNA,
   XL, F_I(doe_read_clipboard_into_cur_line), NULL },                                                    XL, F_I(doe_read_clipboard_into_cur_line), NULL },
 { "CutToHead",           "Cut to head of the line",        K_C_J,        KNA, KNA,                    { "CutToHead",           "Cut to head of the line",        K_C_J,        KNA, KNA,
   XL, F_I(doe_cut_to_head), NULL },                                                                     XL, F_I(doe_cut_to_head), NULL },
 { "CutToTail",           "Cut to tail of the line",        K_C_L,        KNA, KNA,                    { "CutToTail",           "Cut to tail of the line",        K_C_L,        KNA, KNA,
   XL, F_I(doe_cut_to_tail), NULL },                                                                     XL, F_I(doe_cut_to_tail), NULL },

 { "",                    "Settings Menu-1",                KNA,          KNA, KNA,                    { "",                    "Settings Menu-1",                KNA,          KNA, KNA,
   XL, F_I(doe_editor_menu_7), NULL },                                                                   XL, F_I(doe_editor_menu_7), NULL },
 { "Tab size",            "Toggle Tab size",                K_MC_T,       KNA, KNA,                    { "Tab size",            "Toggle Tab size",                K_MC_T,       KNA, KNA,
   XL, F_I(doe_tog_tab_size),       get_str_tab_size },                                                  XL, F_I(doe_tog_tab_size),       get_str_tab_size },
 { "Tab size",            "Incurement Tab size",            K_MC_Y,       KNA, KNA,                    { "Tab size",            "Incurement Tab size",            K_MC_Y,       KNA, KNA,
   XL, F_I(doe_inc_tab_size),       get_str_tab_size },                                                  XL, F_I(doe_inc_tab_size),       get_str_tab_size },
 { "Draw cursor",         "Toggle Drawing cursor",          K_MC_C,       KNA, KNA,                    { "Draw cursor",         "Toggle Drawing cursor",          K_MC_C,       KNA, KNA,
   XL, F_I(doe_tog_draw_cursor),    get_str_draw_cursor },                                               XL, F_I(doe_tog_draw_cursor),    get_str_draw_cursor },
 { "Ignore case",         "Toggle Ignore case",             K_MC_I,       KNA, KNA,                    { "Ignore case",         "Toggle Ignore case",             K_MC_I,       KNA, KNA,
   XL, F_I(doe_tog_ignore_case),    get_str_ignore_case },                                               XL, F_I(doe_tog_ignore_case),    get_str_ignore_case },
 { "Auto indent",         "Toggle Auto indent",             K_MC_O,       KNA, KNA,                    { "Auto indent",         "Toggle Auto indent",             K_MC_O,       KNA, KNA,
   XL, F_I(doe_tog_auto_indent),    get_str_auto_indent },                                               XL, F_I(doe_tog_auto_indent),    get_str_auto_indent },
 { "Display key list",    "Toggle Displaying key list",     K_MC_K,       KNA, KNA,                    { "Display key list",    "Toggle Displaying key list",     K_MC_K,       KNA, KNA,
   XL, F_I(doe_inc_key_list_lines), get_str_key_list_lines },                                            XL, F_I(doe_inc_key_list_lines), get_str_key_list_lines },
 { "Back up files",       "Increment Back up files",        K_MC_B,       KNA, KNA,                    { "Back up files",       "Increment Back up files",        K_MC_B,       KNA, KNA,
   XL, F_I(doe_inc_backup_files),   get_str_backup_files },                                              XL, F_I(doe_inc_backup_files),   get_str_backup_files },
#ifdef ENABLE_REGEX                                                                                   #ifdef ENABLE_REGEX
 { "RegExp",              "Toggle Regex search/replace",    K_MC_X,       KNA, KNA,                    { "RegExp",              "Toggle Regex search/replace",    K_MC_X,       KNA, KNA,
   XL, F_I(doe_tog_regexp),         get_str_regexp },                                                    XL, F_I(doe_tog_regexp),         get_str_regexp },
#endif // ENABLE_REGEX                                                                                #endif // ENABLE_REGEX
#ifdef ENABLE_UTF8                                                                                    #ifdef ENABLE_UTF8
 { "UTF-8",               "Toggle Display/Input UTF-8 code",K_MC_U,       KNA, KNA,                    { "UTF-8",               "Toggle Display/Input UTF-8 code",K_MC_U,       KNA, KNA,
   XL, F_I(doe_tog_utf8),           get_str_utf8 },                                                      XL, F_I(doe_tog_utf8),           get_str_utf8 },
#endif // ENABLE_UTF8                                                                                 #endif // ENABLE_UTF8

 { "",                    "Settings Menu-2",                KNA,          KNA, KNA,                    { "",                    "Settings Menu-2",                KNA,          KNA, KNA,
   XL, F_I(doe_editor_menu_8), NULL },                                                                   XL, F_I(doe_editor_menu_8), NULL },
 { "Cursor center",       "Toggle Cursor-center mode",      K_MC_S,       KNA, KNA,                    { "Cursor center",       "Toggle Cursor-center mode",      K_MC_S,       KNA, KNA,
   XL, F_I(doe_inc_cursor_positioning),  get_str_cursor_positioning },                                   XL, F_I(doe_inc_cursor_positioning),  get_str_cursor_positioning },
 { "Dual scroll",         "Toggle Dual scroll",             K_MC_D,       KNA, KNA,                    { "Dual scroll",         "Toggle Dual scroll",             K_MC_D,       KNA, KNA,
   XL, F_I(doe_tog_dual_scroll),    get_str_dual_scroll },                                               XL, F_I(doe_tog_dual_scroll),    get_str_dual_scroll },
 { "View mode",           "Toggle View mode",               K_MC_V,       KNA, KNA,                    { "View mode",           "Toggle View mode",               K_MC_V,       KNA, KNA,
   XL, F_I(doe_tog_view_mode),      get_str_view_mode },                                                 XL, F_I(doe_tog_view_mode),      get_str_view_mode },
 { "Show ruler",          "Toggle Show Ruler",              K_MC_R,       KNA, KNA,                    { "Show ruler",          "Toggle Show Ruler",              K_MC_R,       KNA, KNA,
   XL, F_I(doe_tog_show_ruler),     get_str_show_ruler },                                                XL, F_I(doe_tog_show_ruler),     get_str_show_ruler },
 { "Show line number",    "Toggle Show Line number",        K_MC_N,       KNA, KNA,                    { "Show line number",    "Toggle Show Line number",        K_MC_N,       KNA, KNA,
   XL, F_I(doe_tog_show_line_num),  get_str_show_line_num },                                             XL, F_I(doe_tog_show_line_num),  get_str_show_line_num },
 { "Line-wrap mode",      "Toggle Line-wrap mode",          K_MC_L,       KNA, KNA,                    { "Line-wrap mode",      "Toggle Line-wrap mode",          K_MC_L,       KNA, KNA,
   XL, F_I(doe_tog_line_wrap_mode), get_str_line_wrap_mode },                                            XL, F_I(doe_tog_line_wrap_mode), get_str_line_wrap_mode },
#ifdef ENABLE_SYNTAX                                                                                  #ifdef ENABLE_SYNTAX
 { "Syntax HL",           "Toggle Syntax Highlighting",     K_MC_H,        KNA, KNA,               |   { "Syntax HL",           "Toggle Syntax Highlighting",     K_M_H,        KNA, KNA,
   XL, F_I(doe_tog_syntax_hl),      get_str_syntax_hl },                                                 XL, F_I(doe_tog_syntax_hl),      get_str_syntax_hl },
 { "TAB/EOL notation",    "Toggle TAB/EOL notation",        K_MC_Z,       KNA, KNA,                    { "TAB/EOL notation",    "Toggle TAB/EOL notation",        K_MC_Z,       KNA, KNA,
   XL, F_I(doe_tog_tab_eol_notation), get_str_tab_eol_notation },                                        XL, F_I(doe_tog_tab_eol_notation), get_str_tab_eol_notation },
#endif // ENABLE_SYNTAX                                                                               #endif // ENABLE_SYNTAX
 { "Code-7F Key-BS",      "Toggle Code-7F Key-BS",          K_M_DEL,      KNA, KNA,                    { "Code-7F Key-BS",      "Toggle Code-7F Key-BS",          K_M_DEL,      KNA, KNA,
   XL, F_I(doe_tog_map_key_7f_bs), get_str_map_key_7f_bs },                                              XL, F_I(doe_tog_map_key_7f_bs), get_str_map_key_7f_bs },

 { "",                    "File type Menu",                 KNA,          KNA, KNA,                    { "",                    "File type Menu",                 KNA,          KNA, KNA,
   XL, F_I(doe_editor_menu_9), NULL },                                                                   XL, F_I(doe_editor_menu_9), NULL },
 { "nix format",          "Set nix format (LF)",            KNA,          KNA, KNA,                    { "nix format",          "Set nix format (LF)",            KNA,          KNA, KNA,
   XL, F_I(doe_set_nix_file),       get_str_nix_file },                                                  XL, F_I(doe_set_nix_file),       get_str_nix_file },
 { "Mac format",          "Set Mac format (CR)",            KNA,          KNA, KNA,                    { "Mac format",          "Set Mac format (CR)",            KNA,          KNA, KNA,
   XL, F_I(doe_set_mac_file),       get_str_mac_file },                                                  XL, F_I(doe_set_mac_file),       get_str_mac_file },
 { "DOS format",          "Set DOS format (CR+LF)",         KNA,          KNA, KNA,                    { "DOS format",          "Set DOS format (CR+LF)",         KNA,          KNA, KNA,
   XL, F_I(doe_set_dos_file),       get_str_dos_file },                                                  XL, F_I(doe_set_dos_file),       get_str_dos_file },
#ifdef USE_NKF                                                                                        #ifdef USE_NKF
 { "ASCII  encoding",     "Set ASCII  encoding",            KNA,          KNA, KNA,                    { "ASCII  encoding",     "Set ASCII  encoding",            KNA,          KNA, KNA,
   XL, F_I(doe_set_encode_ascii),   get_str_encode_ascii },                                              XL, F_I(doe_set_encode_ascii),   get_str_encode_ascii },
 { "UTF-8  encoding",     "Set UTF-8  encoding",            KNA,          KNA, KNA,                    { "UTF-8  encoding",     "Set UTF-8  encoding",            KNA,          KNA, KNA,
   XL, F_I(doe_set_encode_utf8),    get_str_encode_utf8 },                                               XL, F_I(doe_set_encode_utf8),    get_str_encode_utf8 },
 { "EUC-JP encoding",     "Set EUC-JP encoding",            KNA,          KNA, KNA,                    { "EUC-JP encoding",     "Set EUC-JP encoding",            KNA,          KNA, KNA,
   XL, F_I(doe_set_encode_eucjp),   get_str_encode_eucjp },                                              XL, F_I(doe_set_encode_eucjp),   get_str_encode_eucjp },
 { "S-JIS  encoding",     "Set S-JIS  encoding",            KNA,          KNA, KNA,                    { "S-JIS  encoding",     "Set S-JIS  encoding",            KNA,          KNA, KNA,
   XL, F_I(doe_set_encode_sjis),    get_str_encode_sjis },                                               XL, F_I(doe_set_encode_sjis),    get_str_encode_sjis },
 { "JIS    encoding",     "Set JIS    encoding",            KNA,          KNA, KNA,                    { "JIS    encoding",     "Set JIS    encoding",            KNA,          KNA, KNA,
   XL, F_I(doe_set_encode_jis),     get_str_encode_jis },                                                XL, F_I(doe_set_encode_jis),     get_str_encode_jis },
 { "BINARY encoding",     "Set BINARY encoding",            KNA,          KNA, KNA,                    { "BINARY encoding",     "Set BINARY encoding",            KNA,          KNA, KNA,
   XL, F_I(doe_set_encode_binary),  get_str_encode_binary },                                             XL, F_I(doe_set_encode_binary),  get_str_encode_binary },
#endif // USE_NKF                                                                                     #endif // USE_NKF
#ifdef ENABLE_HELP                                                                                    #ifdef ENABLE_HELP
 { "Splash",              "Splash screen",                  K_M_v,        KNA, KNA,                    { "Splash",              "Splash screen",                  K_M_v,        KNA, KNA,
   XL, F_I(doe_editor_splash), NULL },                                                                   XL, F_I(doe_editor_splash), NULL },
#endif // ENABLE_HELP                                                                                 #endif // ENABLE_HELP
 { "Color pairs",         "Display color pairs",            K_M_c,        KNA, KNA,                    { "Color pairs",         "Display color pairs",            K_M_c,        KNA, KNA,
   XL, F_I(doe_display_color_settings), NULL },                                                          XL, F_I(doe_display_color_settings), NULL },
 { "Refresh",             "Refresh editor screen",          K_M_ASTERISK, KNA, KNA,                    { "Refresh",             "Refresh editor screen",          K_M_ASTERISK, KNA, KNA,
   XA, F_I(doe_refresh_editor), NULL },                                                                  XA, F_I(doe_refresh_editor), NULL },

 { "",                    "",                               KNA,          KNA, KNA,                    { "",                    "",                               KNA,          KNA, KNA,
   XA, F_I(NULL), NULL },                                                                                XA, F_I(NULL), NULL },
};                                                                                                    };

// End of editorkeys.c                                                                                // End of editorkeys.c
kdiff3 ../old/be/editorlist.c editorlist.c #========================
kdiff3 ../old/be/editormove.c editormove.c #========================
/**************************************************************************                           /**************************************************************************
 *   editormove.c                                                         *                            *   editormove.c                                                         *
 *                                                                        *                            *                                                                        *
 *   Copyright (C) 1999-2003 Chris Allegretta                             *                            *   Copyright (C) 1999-2003 Chris Allegretta                             *
 *                                                                        *                            *                                                                        *
 *   This program is free software; you can redistribute it and/or modify *                            *   This program is free software; you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published by *                            *   it under the terms of the GNU General Public License as published by *
 *   the Free Software Foundation; either version 2, or (at your option)  *                            *   the Free Software Foundation; either version 2, or (at your option)  *
 *   any later version.                                                   *                            *   any later version.                                                   *
 *                                                                        *                            *                                                                        *
 *   This program is distributed in the hope that it will be useful,      *                            *   This program is distributed in the hope that it will be useful,      *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *                            *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *                            *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 *   GNU General Public License for more details.                         *                            *   GNU General Public License for more details.                         *
 *                                                                        *                            *                                                                        *
 *   You should have received a copy of the GNU General Public License    *                            *   You should have received a copy of the GNU General Public License    *
 *   along with this program; if not, write to the Free Software          *                            *   along with this program; if not, write to the Free Software          *
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *                            *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *
 *                                                                        *                            *                                                                        *
 **************************************************************************/                           **************************************************************************/

#include "headers.h"                                                                                  #include "headers.h"

PRIVATE easy_buffer_switching_t easy_buffer_switching = 0;                                            PRIVATE easy_buffer_switching_t easy_buffer_switching = 0;
PRIVATE char easy_buffer_switching_count = 0;                                                         PRIVATE char easy_buffer_switching_count = 0;

void clear_easy_buffer_switching()                                                                    void clear_easy_buffer_switching()
{                                                                                                     {
    easy_buffer_switching = EBS_NONE;                                                                     easy_buffer_switching = EBS_NONE;
    easy_buffer_switching_count = 0;                                                                      easy_buffer_switching_count = 0;
}                                                                                                     }
void count_easy_buffer_switching()                                                                    void count_easy_buffer_switching()
{                                                                                                     {
    if (easy_buffer_switching != EBS_NONE) {                                                              if (easy_buffer_switching != EBS_NONE) {
        easy_buffer_switching_count++;                                                                        easy_buffer_switching_count++;
        if (easy_buffer_switching_count >= 2) {                                                               if (easy_buffer_switching_count >= 2) {
            clear_easy_buffer_switching();                                                                        clear_easy_buffer_switching();
        }                                                                                                     }
    }                                                                                                     }
}                                                                                                     }
int check_easy_buffer_switching(easy_buffer_switching_t top_bottom)                                   int check_easy_buffer_switching(easy_buffer_switching_t top_bottom)
{                                                                                                     {
    switch (easy_buffer_switching) {                                                                      switch (easy_buffer_switching) {
    default:                                                                                              default:
    case EBS_NONE:                                                                                        case EBS_NONE:
        break;                                                                                                break;
    case EBS_UP_AT_TOP:                                                                                   case EBS_UP_AT_TOP:
        if (top_bottom == EBS_PAGEUP_AT_TOP) {                                                                if (top_bottom == EBS_PAGEUP_AT_TOP) {
            clear_easy_buffer_switching();                                                                        clear_easy_buffer_switching();
            return 1;                                                                                             return 1;
        }                                                                                                     }
        break;                                                                                                break;
    case EBS_PAGEUP_AT_TOP:                                                                               case EBS_PAGEUP_AT_TOP:
        if (top_bottom == EBS_UP_AT_TOP) {                                                                    if (top_bottom == EBS_UP_AT_TOP) {
            clear_easy_buffer_switching();                                                                        clear_easy_buffer_switching();
            return 1;                                                                                             return 1;
        }                                                                                                     }
        break;                                                                                                break;
    case EBS_DOWN_AT_BOTTOM:                                                                              case EBS_DOWN_AT_BOTTOM:
        if (top_bottom == EBS_PAGEDOWN_AT_BOTTOM) {                                                           if (top_bottom == EBS_PAGEDOWN_AT_BOTTOM) {
            clear_easy_buffer_switching();                                                                        clear_easy_buffer_switching();
            return 1;                                                                                             return 1;
        }                                                                                                     }
        break;                                                                                                break;
    case EBS_PAGEDOWN_AT_BOTTOM:                                                                          case EBS_PAGEDOWN_AT_BOTTOM:
        if (top_bottom == EBS_DOWN_AT_BOTTOM) {                                                               if (top_bottom == EBS_DOWN_AT_BOTTOM) {
            clear_easy_buffer_switching();                                                                        clear_easy_buffer_switching();
            return 1;                                                                                             return 1;
        }                                                                                                     }
        break;                                                                                                break;
    }                                                                                                     }
    easy_buffer_switching = top_bottom;                                                                   easy_buffer_switching = top_bottom;
    easy_buffer_switching_count = 0;                                                                      easy_buffer_switching_count = 0;
    return 0;                                                                                             return 0;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int doe_left(void)                                                                                    int doe_left(void)
{                                                                                                     {
    if (is_app_list_mode()) {                                                                             if (is_app_list_mode()) {
        return doe_page_up();                                                                                 return doe_page_up();
    }                                                                                                     }
    move_cursor_left(1);                                                                                  move_cursor_left(1);

    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_CUR);                        post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_CUR);
    return 1;                                                                                             return 1;
}                                                                                                     }

int doe_right(void)                                                                                   int doe_right(void)
{                                                                                                     {
    if (is_app_list_mode()) {                                                                             if (is_app_list_mode()) {
        return doe_page_down();                                                                               return doe_page_down();
    }                                                                                                     }
    move_cursor_right();                                                                                  move_cursor_right();

    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_CUR);                        post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_CUR);
    return 1;                                                                                             return 1;
}                                                                                                     }

PRIVATE int get_char_type(char chr)                                                                   PRIVATE int get_char_type(char chr)
{                                                                                                     {
/* '\0':0, space:1, alpha-numeric:2, others:3, UTF-8:4 */                                             /* '\0':0, space:1, alpha-numeric:2, others:3, UTF-8:4 */
#define CHR_TYPE(chr)   ((chr) == '\0' ? 0 :                                \                         #define CHR_TYPE(chr)   ((chr) == '\0' ? 0 :                                \
                         (((chr) == ' ' || (chr) == '\t') ? 1 :             \                                                  (((chr) == ' ' || (chr) == '\t') ? 1 :             \
                          ((isalnum(chr) || (chr) == '_') ? 2 :             \                                                   ((isalnum(chr) || (chr) == '_') ? 2 :             \
                            (((unsigned char)(chr)) < 0x80 ? 3 : 4)         \                                                     (((unsigned char)(chr)) < 0x80 ? 3 : 4)         \
                          )                                                 \                                                   )                                                 \
                         )                                                  \                                                  )                                                  \
                        )                                                                                                     )
    return CHR_TYPE(chr);                                                                                 return CHR_TYPE(chr);
}                                                                                                     }

// go to previous word                                                                                // go to previous word
int doe_prev_word(void)                                                                               int doe_prev_word(void)
{                                                                                                     {
    if (EPCBVC_CLBI > 0) {                                                                                if (EPCBVC_CLBI > 0) {
        // is head of the word ?                                                                              // is head of the word ?
        if (get_char_type(EPCBVC_CL->data[EPCBVC_CLBI-1])                                                     if (get_char_type(EPCBVC_CL->data[EPCBVC_CLBI-1])
          == get_char_type(EPCBVC_CL->data[EPCBVC_CLBI])) {                                                     == get_char_type(EPCBVC_CL->data[EPCBVC_CLBI])) {
            // not head of the word                                                                               // not head of the word
        } else {                                                                                              } else {
            // head of the word                                                                                   // head of the word
            move_cursor_left(1);                                                                                  move_cursor_left(1);
        }                                                                                                     }
        while (EPCBVC_CLBI > 0                                                                                while (EPCBVC_CLBI > 0
         && (get_char_type(EPCBVC_CL->data[EPCBVC_CLBI-1])                                                     && (get_char_type(EPCBVC_CL->data[EPCBVC_CLBI-1])
          == get_char_type(EPCBVC_CL->data[EPCBVC_CLBI])) ) {                                                   == get_char_type(EPCBVC_CL->data[EPCBVC_CLBI])) ) {
            move_cursor_left(1);                                                                                  move_cursor_left(1);
        }                                                                                                     }
    } else {                                                                                              } else {
        // if top of the line, move to the end of the previous line                                           // if top of the line, move to the end of the previous line
        move_cursor_left(1);                                                                                  move_cursor_left(1);
    }                                                                                                     }

    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_CUR);                        post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_CUR);
    return 0;                                                                                             return 0;
}                                                                                                     }
// go to next word                                                                                    // go to next word
int doe_next_word(void)                                                                               int doe_next_word(void)
{                                                                                                     {
    int chr_type;                                                                                         int chr_type;

    if (EPCBVC_CL->data[EPCBVC_CLBI]) {                                                                   if (EPCBVC_CL->data[EPCBVC_CLBI]) {
        // skip current block                                                                                 // skip current block
        chr_type = get_char_type(EPCBVC_CL->data[EPCBVC_CLBI]);                                               chr_type = get_char_type(EPCBVC_CL->data[EPCBVC_CLBI]);
        // move to the beginning of the next block                                                            // move to the beginning of the next block
        while (EPCBVC_CL->data[EPCBVC_CLBI]                                                                   while (EPCBVC_CL->data[EPCBVC_CLBI]
         && chr_type == get_char_type(EPCBVC_CL->data[EPCBVC_CLBI]))                                           && chr_type == get_char_type(EPCBVC_CL->data[EPCBVC_CLBI]))
            move_cursor_right();                                                                                  move_cursor_right();
    } else {                                                                                              } else {
        // if end of the line, move to the top of the next line                                               // if end of the line, move to the top of the next line
        move_cursor_right();                                                                                  move_cursor_right();
    }                                                                                                     }

    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_CUR);                        post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_CUR);
    return 0;                                                                                             return 0;
}                                                                                                     }

int doe_start_of_line(void)                                                                           int doe_start_of_line(void)
{                                                                                                     {
    EPCBVC_CLBI = 0;                                                                                      EPCBVC_CLBI = 0;

    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_CUR);                        post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_CUR);
    return 1;                                                                                             return 1;
}                                                                                                     }

int doe_end_of_line(void)                                                                             int doe_end_of_line(void)
{                                                                                                     {
    EPCBVC_CLBI = line_data_len(EPCBVC_CL);                                                               EPCBVC_CLBI = line_data_len(EPCBVC_CL);

    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_CUR);                        post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_CUR);
    return 1;                                                                                             return 1;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
PRIVATE void doe_up_(void);                                                                           PRIVATE void doe_up_(void);
int doe_up(void)                                                                                      int doe_up(void)
{                                                                                                     {
    if (GET_APPMD(ed_DUAL_SCROLL) == 0) {                                                                 if (GET_APPMD(ed_DUAL_SCROLL) == 0) {
        doe_up_();                                                                                            doe_up_();
    } else {                                                                                              } else {
        doe_switch_editor_pane_();                                                                            doe_switch_editor_pane_();
        doe_up_();                                                                                            doe_up_();
        doe_switch_editor_pane_();                                                                            doe_switch_editor_pane_();
        doe_up_();                                                                                            doe_up_();
    }                                                                                                     }
    return 1;                                                                                             return 1;
}                                                                                                     }
PRIVATE void doe_up_(void)                                                                            PRIVATE void doe_up_(void)
{                                                                                                     {
    if (c_l_up(&EPCBVC_CL, &EPCBVC_CLBI)) {                                                               if (c_l_up(&EPCBVC_CL, &EPCBVC_CLBI)) {
        EPCBVC_CURSOR_Y--;                                                                                    EPCBVC_CURSOR_Y--;
    } else {                                                                                              } else {
        if (check_easy_buffer_switching(EBS_UP_AT_TOP)) {                                                     if (check_easy_buffer_switching(EBS_UP_AT_TOP)) {
            // already top of buffer, go to the previous buffer's last line                                       // already top of buffer, go to the previous buffer's last line
            tio_beep();                                                                                           tio_beep();
            if (switch_epc_buf_to_prev(1, 1)) {                                                                   if (switch_epc_buf_to_prev(1, 1)) {
                post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);                         post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);
            }                                                                                                     }
        }                                                                                                     }
    }                                                                                                     }
    post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);                    post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);
}                                                                                                     }
PRIVATE void doe_down_(void);                                                                         PRIVATE void doe_down_(void);
int doe_down(void)                                                                                    int doe_down(void)
{                                                                                                     {
    if (GET_APPMD(ed_DUAL_SCROLL) == 0) {                                                                 if (GET_APPMD(ed_DUAL_SCROLL) == 0) {
        doe_down_();                                                                                          doe_down_();
    } else {                                                                                              } else {
        doe_switch_editor_pane_();                                                                            doe_switch_editor_pane_();
        doe_down_();                                                                                          doe_down_();
        doe_switch_editor_pane_();                                                                            doe_switch_editor_pane_();
        doe_down_();                                                                                          doe_down_();
    }                                                                                                     }
    return 1;                                                                                             return 1;
}                                                                                                     }
PRIVATE void doe_down_(void)                                                                          PRIVATE void doe_down_(void)
{                                                                                                     {
    if (c_l_down(&EPCBVC_CL, &EPCBVC_CLBI)) {                                                             if (c_l_down(&EPCBVC_CL, &EPCBVC_CLBI)) {
        EPCBVC_CURSOR_Y++;                                                                                    EPCBVC_CURSOR_Y++;
    } else {                                                                                              } else {
        if (check_easy_buffer_switching(EBS_DOWN_AT_BOTTOM)) {                                                if (check_easy_buffer_switching(EBS_DOWN_AT_BOTTOM)) {
            // already bottom of buffer, go to the next buffer's top line                                         // already bottom of buffer, go to the next buffer's top line
            tio_beep();                                                                                           tio_beep();
            if (switch_epc_buf_to_next(1, 1)) {                                                                   if (switch_epc_buf_to_next(1, 1)) {
                post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_TOP, UPDATE_SCRN_ALL);                          post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_TOP, UPDATE_SCRN_ALL);
            }                                                                                                     }
        }                                                                                                     }
    }                                                                                                     }
    post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);                    post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);
}                                                                                                     }

PRIVATE void doe_page_up_(void);                                                                      PRIVATE void doe_page_up_(void);
int doe_page_up(void)                                                                                 int doe_page_up(void)
{                                                                                                     {
    if (GET_APPMD(ed_DUAL_SCROLL) == 0) {                                                                 if (GET_APPMD(ed_DUAL_SCROLL) == 0) {
        doe_page_up_();                                                                                       doe_page_up_();
    } else {                                                                                              } else {
        doe_switch_editor_pane_();                                                                            doe_switch_editor_pane_();
        doe_page_up_();                                                                                       doe_page_up_();
        doe_switch_editor_pane_();                                                                            doe_switch_editor_pane_();
        doe_page_up_();                                                                                       doe_page_up_();
    }                                                                                                     }
    return 1;                                                                                             return 1;
}                                                                                                     }
PRIVATE void doe_page_up_(void)                                                                       PRIVATE void doe_page_up_(void)
{                                                                                                     {
    int lines;                                                                                            int lines;
    int cnt;                                                                                              int cnt;

    if (c_l_up(&EPCBVC_CL, &EPCBVC_CLBI) == 0) {                                                          if (c_l_up(&EPCBVC_CL, &EPCBVC_CLBI) == 0) {
        if (check_easy_buffer_switching(EBS_PAGEUP_AT_TOP)) {                                                 if (check_easy_buffer_switching(EBS_PAGEUP_AT_TOP)) {
            // already top of buffer, go to the previous buffer's last line                                       // already top of buffer, go to the previous buffer's last line
            tio_beep();                                                                                           tio_beep();
            if (switch_epc_buf_to_prev(1, 1)) {                                                                   if (switch_epc_buf_to_prev(1, 1)) {
                post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);                         post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);
            }                                                                                                     }
        }                                                                                                     }
    } else {                                                                                              } else {
        lines = (EPCBVC_CURSOR_Y - TOP_SCROLL_MARGIN_Y) + EDITOR_VERT_SCROLL_LINES - 1;                       lines = (EPCBVC_CURSOR_Y - TOP_SCROLL_MARGIN_Y) + EDITOR_VERT_SCROLL_LINES - 1;
///     lines = EDITOR_VERT_SCROLL_LINES - 1;   // smaller scroll                                     ///     lines = EDITOR_VERT_SCROLL_LINES - 1;   // smaller scroll
        for (cnt = 0; cnt < lines; cnt++) {                                                                   for (cnt = 0; cnt < lines; cnt++) {
            EPCBVC_CURSOR_Y--;                                                                                    EPCBVC_CURSOR_Y--;
            if (c_l_up(&EPCBVC_CL, &EPCBVC_CLBI) == 0) {                                                          if (c_l_up(&EPCBVC_CL, &EPCBVC_CLBI) == 0) {
                break;                                                                                                break;
            }                                                                                                     }
        }                                                                                                     }
        post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);                         post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);
    }                                                                                                     }
}                                                                                                     }

PRIVATE int doe_page_down_(void);                                                                     PRIVATE int doe_page_down_(void);
int doe_page_down(void)                                                                               int doe_page_down(void)
{                                                                                                     {
    if (GET_APPMD(ed_DUAL_SCROLL) == 0) {                                                                 if (GET_APPMD(ed_DUAL_SCROLL) == 0) {
        doe_page_down_();                                                                                     doe_page_down_();
    } else {                                                                                              } else {
        doe_switch_editor_pane_();                                                                            doe_switch_editor_pane_();
        doe_page_down_();                                                                                     doe_page_down_();
        doe_switch_editor_pane_();                                                                            doe_switch_editor_pane_();
        doe_page_down_();                                                                                     doe_page_down_();
    }                                                                                                     }
    return 1;                                                                                             return 1;
}                                                                                                     }
PRIVATE int doe_page_down_(void)                                                                      PRIVATE int doe_page_down_(void)
{                                                                                                     {
    int lines;                                                                                            int lines;
    int cnt;                                                                                              int cnt;

    if (c_l_down(&EPCBVC_CL, &EPCBVC_CLBI) == 0) {                                                        if (c_l_down(&EPCBVC_CL, &EPCBVC_CLBI) == 0) {
        if (check_easy_buffer_switching(EBS_PAGEDOWN_AT_BOTTOM)) {                                            if (check_easy_buffer_switching(EBS_PAGEDOWN_AT_BOTTOM)) {
            // already bottom of buffer, go to the next buffer's top line                                         // already bottom of buffer, go to the next buffer's top line
            tio_beep();                                                                                           tio_beep();
            if (switch_epc_buf_to_next(1, 1)) {                                                                   if (switch_epc_buf_to_next(1, 1)) {
                post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_TOP, UPDATE_SCRN_ALL);                          post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_TOP, UPDATE_SCRN_ALL);
            }                                                                                                     }
        }                                                                                                     }
    } else {                                                                                              } else {
        lines = (BOTTOM_SCROLL_MARGIN_Y - EPCBVC_CURSOR_Y) + EDITOR_VERT_SCROLL_LINES - 1;                    lines = (BOTTOM_SCROLL_MARGIN_Y - EPCBVC_CURSOR_Y) + EDITOR_VERT_SCROLL_LINES - 1;
///     lines = EDITOR_VERT_SCROLL_LINES - 1;   // smaller scroll                                     ///     lines = EDITOR_VERT_SCROLL_LINES - 1;   // smaller scroll
        for (cnt = 0; cnt < lines; cnt++) {                                                                   for (cnt = 0; cnt < lines; cnt++) {
            EPCBVC_CURSOR_Y++;                                                                                    EPCBVC_CURSOR_Y++;
            if (c_l_down(&EPCBVC_CL, &EPCBVC_CLBI) == 0) {                                                        if (c_l_down(&EPCBVC_CL, &EPCBVC_CLBI) == 0) {
                break;                                                                                                break;
            }                                                                                                     }
        }                                                                                                     }
        post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);                         post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);
    }                                                                                                     }
    return 1;                                                                                             return 1;
}                                                                                                     }

int doe_first_line(void)                                                                              int doe_first_line(void)
{                                                                                                     {
    first_line();                                                                                         first_line();
    post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_TOP, UPDATE_SCRN_ALL);                          post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_TOP, UPDATE_SCRN_ALL);
    return 1;                                                                                             return 1;
}                                                                                                     }
int doe_last_line(void)                                                                               int doe_last_line(void)
{                                                                                                     {
    last_line();                                                                                          last_line();
    post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_BOTTOM, UPDATE_SCRN_ALL);                       post_cmd_processing(NULL, CURS_MOVE_VERT, LOCATE_CURS_BOTTOM, UPDATE_SCRN_ALL);
    return 1;                                                                                             return 1;
}                                                                                                     }

PRIVATE int do_enter_utf8s(const char *utf8s);                                                        PRIVATE int do_enter_utf8s(const char *utf8s);
PRIVATE int do_enter_utf8c(const char *utf8c);                                                        PRIVATE int do_enter_utf8c(const char *utf8c);
int doe_control_code(void)                                                                            int doe_control_code(void)
{                                                                                                     {
    key_code_t key;                                                                                       key_code_t key;

    if (is_view_mode_then_warn_it())                                                                      if (is_view_mode_then_warn_it())
        return 0;                                                                                             return 0;

    disp_status_bar_ing(_("Input control character [^A-^Z,^[,^\\,^],^^,^_,\x7f]"));                       disp_status_bar_ing(_("Input control character [^A-^Z,^[,^\\,^],^^,^_,\x7f]"));
    key = input_key_loop();                                                                               key = input_key_loop();
    disp_status_bar_ing(_("Key code: %04x"), key);                                                        disp_status_bar_ing(_("Key code: %04x"), key);
    if ((0x01 <= key && key < 0x20) || key == CHAR_DEL) {                                                 if ((0x01 <= key && key < 0x20) || key == CHAR_DEL) {
        doe_enter_char(key);                                                                                  doe_enter_char(key);
    }                                                                                                     }
    return 1;                                                                                             return 1;
}                                                                                                     }
int doe_charcode(void)                                                                                int doe_charcode(void)
{                                                                                                     {
    char string[MAX_PATH_LEN+1];                                                                          char string[MAX_PATH_LEN+1];
    unsigned int chr;                                                                                     unsigned int chr;
#ifdef ENABLE_UTF8                                                                                    #ifdef ENABLE_UTF8
    char utf8c[MAX_UTF8C_BYTES+1];                                                                        char utf8c[MAX_UTF8C_BYTES+1];
#endif // ENABLE_UTF8                                                                                 #endif // ENABLE_UTF8

    if (is_view_mode_then_warn_it())                                                                      if (is_view_mode_then_warn_it())
        return 0;                                                                                             return 0;

    int ret = input_string_tail("", string,                                                               int ret = input_string_tail("", string,
     HISTORY_TYPE_IDX_SEARCH, _("Enter Unicode number in hex:"));                                          HISTORY_TYPE_IDX_SEARCH, _("Enter Unicode number in hex:"));
    if (ret < 0) {                                                                                        if (ret < 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (ret <= 0) {                                                                                       if (ret <= 0) {
        disp_key_list_editor();                                                                               disp_key_list_editor();
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (sscanf(string, "%x", &chr) == 1) {                                                                if (sscanf(string, "%x", &chr) == 1) {
#ifdef ENABLE_UTF8                                                                                    #ifdef ENABLE_UTF8
        utf8c_encode(chr, utf8c);                                                                             utf8c_encode(chr, utf8c);
        do_enter_utf8s(utf8c);                                                                                do_enter_utf8s(utf8c);
#else // ENABLE_UTF8                                                                                  #else // ENABLE_UTF8
        doe_enter_char(chr);                                                                                  doe_enter_char(chr);
#endif // ENABLE_UTF8                                                                                 #endif // ENABLE_UTF8
        return 1;                                                                                             return 1;
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }

int doe_paste_from_history(void)                                                                      int doe_paste_from_history(void)
{                                                                                                     {
    char string[MAX_PATH_LEN+1];                                                                          char string[MAX_PATH_LEN+1];

    if (is_view_mode_then_warn_it())                                                                      if (is_view_mode_then_warn_it())
        return 0;                                                                                             return 0;

    int ret = input_string_tail("", string,                                                               int ret = input_string_tail("", string,
     HISTORY_TYPE_IDX_SEARCH, _("Select history string to paste:"));                                       HISTORY_TYPE_IDX_SEARCH, _("Select history string to paste:"));
    if (ret < 0) {                                                                                        if (ret < 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (ret <= 0) {                                                                                       if (ret <= 0) {
        disp_key_list_editor();                                                                               disp_key_list_editor();
        return 0;                                                                                             return 0;
    }                                                                                                     }
    do_enter_utf8s(string);                                                                               do_enter_utf8s(string);
    return 0;                                                                                             return 0;
}                                                                                                     }

int doe_tab(void)                                                                                     int doe_tab(void)
{                                                                                                     {
    return doe_enter_char('\t');                                                                          return doe_enter_char('\t');
}                                                                                                     }

#define UTF8S_SEND_BUF_LEN          (MAX_UTF8C_BYTES * 2)                                             #define UTF8S_SEND_BUF_LEN          (MAX_UTF8C_BYTES * 2)
PRIVATE int utf8s_send_buf_bytes = 0;                                                                 PRIVATE int utf8s_send_buf_bytes = 0;
PRIVATE char utf8s_send_buf[UTF8S_SEND_BUF_LEN+1] = "";                                               PRIVATE char utf8s_send_buf[UTF8S_SEND_BUF_LEN+1] = "";
int doe_enter_char(char chr)                                                                          int doe_enter_char(char chr)
{                                                                                                     {
    static char utf8c_state = 0;                                                                          static char utf8c_state = 0;

    utf8c_state = utf8c_len(utf8c_state, chr);                                                            utf8c_state = utf8c_len(utf8c_state, chr);
flf_d_printf("<%02x>\n", (unsigned char)chr);                                                         flf_d_printf("<%02x>\n", (unsigned char)chr);
    // put to send buffer                                                                                 // put to send buffer
    if (utf8s_send_buf_bytes < UTF8S_SEND_BUF_LEN) {                                                      if (utf8s_send_buf_bytes < UTF8S_SEND_BUF_LEN) {
        utf8s_send_buf[utf8s_send_buf_bytes++] = chr;                                                         utf8s_send_buf[utf8s_send_buf_bytes++] = chr;
        utf8s_send_buf[utf8s_send_buf_bytes] = '\0';                                                          utf8s_send_buf[utf8s_send_buf_bytes] = '\0';
    }                                                                                                     }
    if (utf8c_state == 0) {                                                                               if (utf8c_state == 0) {
        doe_enter_char_send();                                                                                doe_enter_char_send();
    }                                                                                                     }
    return 1;                                                                                             return 1;
}                                                                                                     }
int doe_enter_char_send(void)                                                                         int doe_enter_char_send(void)
{                                                                                                     {
    if (utf8s_send_buf_bytes == 0) {                                                                      if (utf8s_send_buf_bytes == 0) {
        return 0;   // no character sent                                                                      return 0;   // no character sent
    }                                                                                                     }
    do_enter_utf8s(utf8s_send_buf);                                                                       do_enter_utf8s(utf8s_send_buf);
    // clear send buffer                                                                                  // clear send buffer
    utf8s_send_buf_bytes = 0;                                                                             utf8s_send_buf_bytes = 0;
    utf8s_send_buf[utf8s_send_buf_bytes] = '\0';                                                          utf8s_send_buf[utf8s_send_buf_bytes] = '\0';
    return 1;   // sent                                                                                   return 1;   // sent
}                                                                                                     }
PRIVATE int do_enter_utf8s(const char *utf8s)                                                         PRIVATE int do_enter_utf8s(const char *utf8s)
{                                                                                                     {
    int bytes_str;                                                                                        int bytes_str;
    int byte_idx;                                                                                         int byte_idx;
#ifdef ENABLE_UTF8                                                                                    #ifdef ENABLE_UTF8
    int bytes_chr;                                                                                        int bytes_chr;
#endif // ENABLE_UTF8                                                                                 #endif // ENABLE_UTF8
    char utf8c[MAX_UTF8C_BYTES+1];                                                                        char utf8c[MAX_UTF8C_BYTES+1];

flf_d_printf("[%s]\n", utf8s);                                                                        flf_d_printf("[%s]\n", utf8s);
    do_clear_mark_();                                                                                     do_clear_mark_();
    if (is_view_mode_then_warn_it())                                                                      if (is_view_mode_then_warn_it())
        return 0;                                                                                             return 0;

#ifdef ENABLE_UNDO                                                                                    #ifdef ENABLE_UNDO
    undo_set_region_n_save_before_change(EPCBVC_CL, EPCBVC_CL, 1);                                        undo_set_region_n_save_before_change(EPCBVC_CL, EPCBVC_CL, 1);
#endif // ENABLE_UNDO                                                                                 #endif // ENABLE_UNDO

    bytes_str = strlen_path(utf8s);                                                                       bytes_str = strlen_path(utf8s);
#ifdef ENABLE_UTF8                                                                                    #ifdef ENABLE_UTF8
    for (byte_idx = 0; byte_idx < bytes_str; byte_idx += bytes_chr) {                                     for (byte_idx = 0; byte_idx < bytes_str; byte_idx += bytes_chr) {
        bytes_chr = utf8c_bytes(&utf8s[byte_idx]);                                                            bytes_chr = utf8c_bytes(&utf8s[byte_idx]);
        strlcpy__(utf8c, &utf8s[byte_idx], bytes_chr);                                                        strlcpy__(utf8c, &utf8s[byte_idx], bytes_chr);
        do_enter_utf8c(utf8c);                                                                                do_enter_utf8c(utf8c);
    }                                                                                                     }
#else // ENABLE_UTF8                                                                                  #else // ENABLE_UTF8
    for (byte_idx = 0; byte_idx < bytes_str; byte_idx++) {                                                for (byte_idx = 0; byte_idx < bytes_str; byte_idx++) {
        utf8c[0] = utf8s[byte_idx];                                                                           utf8c[0] = utf8s[byte_idx];
        utf8c[1] = '\0';                                                                                      utf8c[1] = '\0';
        do_enter_utf8c(utf8c);                                                                                do_enter_utf8c(utf8c);
    }                                                                                                     }
#endif // ENABLE_UTF8                                                                                 #endif // ENABLE_UTF8
    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);                        post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);
    return 1;                                                                                             return 1;
}                                                                                                     }
PRIVATE int do_enter_utf8c(const char *utf8c)                                                         PRIVATE int do_enter_utf8c(const char *utf8c)
{                                                                                                     {
    int bytes_insert;                                                                                     int bytes_insert;

flf_d_printf("[%s]\n", utf8c);                                                                        flf_d_printf("[%s]\n", utf8c);
    bytes_insert = strnlen(utf8c, MAX_UTF8C_BYTES);                                                       bytes_insert = strnlen(utf8c, MAX_UTF8C_BYTES);
    if (line_data_len(EPCBVC_CL) + bytes_insert > MAX_EDIT_LINE_LEN) {                                    if (line_data_len(EPCBVC_CL) + bytes_insert > MAX_EDIT_LINE_LEN) {
        // exceeds MAX_EDIT_LINE_LEN, do not enter                                                            // exceeds MAX_EDIT_LINE_LEN, do not enter
        return 0;                                                                                             return 0;
    }                                                                                                     }
    line_string_insert(EPCBVC_CL, EPCBVC_CLBI, utf8c, bytes_insert);                                      line_string_insert(EPCBVC_CL, EPCBVC_CLBI, utf8c, bytes_insert);
    EPCBVC_CLBI += bytes_insert;                                                                          EPCBVC_CLBI += bytes_insert;
    get_epc_buf()->buf_size += bytes_insert;                                                              get_epc_buf()->buf_size += bytes_insert;

    set_cur_buf_modified();                                                                               set_cur_buf_modified();
    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);                        post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);
    return 1;                                                                                             return 1;
}                                                                                                     }

int doe_carriage_return(void)                                                                         int doe_carriage_return(void)
{                                                                                                     {
    const char *ptr_s, *ptr_d;                                                                            const char *ptr_s, *ptr_d;
    int len_s, len_d;                                                                                     int len_s, len_d;

    do_clear_mark_();                                                                                     do_clear_mark_();
    if (is_app_list_mode()) {                                                                             if (is_app_list_mode()) {
        editor_quit = EDITOR_ENTERED;                                                                         editor_quit = EDITOR_ENTERED;
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (is_view_mode_then_warn_it())                                                                      if (is_view_mode_then_warn_it())
        return 0;                                                                                             return 0;

#ifdef ENABLE_UNDO                                                                                    #ifdef ENABLE_UNDO
    undo_set_region_n_save_before_change(EPCBVC_CL, EPCBVC_CL, 1);                                        undo_set_region_n_save_before_change(EPCBVC_CL, EPCBVC_CL, 1);
#endif // ENABLE_UNDO                                                                                 #endif // ENABLE_UNDO

    set_cur_buf_modified();                                                                               set_cur_buf_modified();
    // >aaaa^bbbb                                                                                         // >aaaa^bbbb
    line_separate(EPCBVC_CL, EPCBVC_CLBI, INSERT_BEFORE);                                                 line_separate(EPCBVC_CL, EPCBVC_CLBI, INSERT_BEFORE);
    EPCBVC_CLBI = 0;                                                                                      EPCBVC_CLBI = 0;
    //  aaaa                                                                                              //  aaaa
    // >^bbbb                                                                                             // >^bbbb

    if (GET_APPMD(ed_AUTO_INDENT)) {                                                                      if (GET_APPMD(ed_AUTO_INDENT)) {
        // autoindent: auto insert the previous lines preceeding spaces to the next line                      // autoindent: auto insert the previous lines preceeding spaces to the next line
        ptr_s = NODE_PREV(EPCBVC_CL)->data;                                                                   ptr_s = NODE_PREV(EPCBVC_CL)->data;
        SKIP_SPACE(ptr_s);                                                                                    SKIP_SPACE(ptr_s);
        ptr_d = EPCBVC_CL->data;                                                                              ptr_d = EPCBVC_CL->data; 
        SKIP_SPACE(ptr_d);                                                                                    SKIP_SPACE(ptr_d);
        len_s = ptr_s - NODE_PREV(EPCBVC_CL)->data;                                                           len_s = ptr_s - NODE_PREV(EPCBVC_CL)->data;
        len_d = ptr_d - EPCBVC_CL->data;                                                                      len_d = ptr_d - EPCBVC_CL->data;
        line_string_replace(EPCBVC_CL, 0, len_d, NODE_PREV(EPCBVC_CL)->data, len_s);                          line_string_replace(EPCBVC_CL, 0, len_d, NODE_PREV(EPCBVC_CL)->data, len_s);
        EPCBVC_CLBI = len_s;                                                                                  EPCBVC_CLBI = len_s;
    }                                                                                                     }

    if (EPCBVC_CURSOR_Y < BOTTOM_SCROLL_MARGIN_Y) {                                                       if (EPCBVC_CURSOR_Y < BOTTOM_SCROLL_MARGIN_Y) {
        EPCBVC_CURSOR_Y++;                                                                                    EPCBVC_CURSOR_Y++;
        post_cmd_processing(NODE_PREV(EPCBVC_CL), CURS_MOVE_HORIZ, LOCATE_CURS_NONE,                          post_cmd_processing(NODE_PREV(EPCBVC_CL), CURS_MOVE_HORIZ, LOCATE_CURS_NONE,
         UPDATE_SCRN_FORWARD);                                                                                 UPDATE_SCRN_FORWARD);
    } else {                                                                                              } else {
        post_cmd_processing(NODE_PREV(EPCBVC_CL), CURS_MOVE_HORIZ, LOCATE_CURS_NONE,                          post_cmd_processing(NODE_PREV(EPCBVC_CL), CURS_MOVE_HORIZ, LOCATE_CURS_NONE,
         UPDATE_SCRN_ALL);                                                                                     UPDATE_SCRN_ALL);
    }                                                                                                     }
    return 1;                                                                                             return 1;
}                                                                                                     }

                                                                                                   >  int doe_backspace_limited(void)
                                                                                                   >  {
                                                                                                   >      if (EPCBVC_CLBI <= 0) {
                                                                                                   >          return 0;
                                                                                                   >      }
                                                                                                   >      return doe_backspace();
                                                                                                   >  }
int doe_backspace(void)                                                                               int doe_backspace(void)
{                                                                                                     {
    int bytes;                                                                                            int bytes;

    do_clear_mark_();                                                                                     do_clear_mark_();
    if (is_view_mode_then_warn_it())                                                                      if (is_view_mode_then_warn_it())
        return 0;                                                                                             return 0;

    if (EPCBVC_CLBI <= 0) {                                                                               if (EPCBVC_CLBI <= 0) {
        if (IS_NODE_TOP(EPCBVC_CL)) {                                                                         if (IS_NODE_TOP(EPCBVC_CL)) {
            // top of file, can not backspace                                                                     // top of file, can not backspace
            return 0;                                                                                             return 0;
        }                                                                                                     }
        // line top, concatenate to the previous line                                                         // line top, concatenate to the previous line
#ifdef ENABLE_UNDO                                                                                    #ifdef ENABLE_UNDO
        undo_set_region_n_save_before_change(NODE_PREV(EPCBVC_CL), EPCBVC_CL, 1);                             undo_set_region_n_save_before_change(NODE_PREV(EPCBVC_CL), EPCBVC_CL, 1);
#endif // ENABLE_UNDO                                                                                 #endif // ENABLE_UNDO
        EPCBVC_CLBI = line_data_len(NODE_PREV(EPCBVC_CL));                                                    EPCBVC_CLBI = line_data_len(NODE_PREV(EPCBVC_CL));
        EPCBVC_CL = line_concat_with_prev(EPCBVC_CL);                                                         EPCBVC_CL = line_concat_with_prev(EPCBVC_CL);
        if (EPCBVC_CURSOR_Y > 0) {                                                                            if (EPCBVC_CURSOR_Y > 0) {
            EPCBVC_CURSOR_Y--;                                                                                    EPCBVC_CURSOR_Y--;
        }                                                                                                     }
        post_cmd_processing(EPCBVC_CL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_FORWARD);               post_cmd_processing(EPCBVC_CL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_FORWARD);
    } else {                                                                                              } else {
#ifdef ENABLE_UNDO                                                                                    #ifdef ENABLE_UNDO
        undo_set_region_n_save_before_change(EPCBVC_CL, EPCBVC_CL, 1);                                        undo_set_region_n_save_before_change(EPCBVC_CL, EPCBVC_CL, 1);
#endif // ENABLE_UNDO                                                                                 #endif // ENABLE_UNDO
        // not line top, delete character                                                                     // not line top, delete character
        bytes = utf8c_prev_bytes(EPCBVC_CL->data, &EPCBVC_CL->data[EPCBVC_CLBI]);                             bytes = utf8c_prev_bytes(EPCBVC_CL->data, &EPCBVC_CL->data[EPCBVC_CLBI]);
        EPCBVC_CLBI -= bytes;                                                                                 EPCBVC_CLBI -= bytes;
        line_string_delete(EPCBVC_CL, EPCBVC_CLBI, bytes);                                                    line_string_delete(EPCBVC_CL, EPCBVC_CLBI, bytes);
        get_epc_buf()->buf_size -= bytes;                                                                     get_epc_buf()->buf_size -= bytes;
        post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_CUR);                        post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_CUR);
    }                                                                                                     }
    set_cur_buf_modified();                                                                               set_cur_buf_modified();
    return 1;                                                                                             return 1;
}                                                                                                     }

int doe_delete_char(void)                                                                             int doe_delete_char(void)
{                                                                                                     {
    int bytes;                                                                                            int bytes;

    do_clear_mark_();                                                                                     do_clear_mark_();
    if (is_view_mode_then_warn_it())                                                                      if (is_view_mode_then_warn_it())
        return 0;                                                                                             return 0;

    if (EPCBVC_CLBI < line_data_len(EPCBVC_CL)) {                                                         if (EPCBVC_CLBI < line_data_len(EPCBVC_CL)) {
        // not line end                                                                                       // not line end
#ifdef ENABLE_UNDO                                                                                    #ifdef ENABLE_UNDO
        undo_set_region_n_save_before_change(EPCBVC_CL, EPCBVC_CL, 1);                                        undo_set_region_n_save_before_change(EPCBVC_CL, EPCBVC_CL, 1);
#endif // ENABLE_UNDO                                                                                 #endif // ENABLE_UNDO
        bytes = utf8c_bytes(&EPCBVC_CL->data[EPCBVC_CLBI]);                                                   bytes = utf8c_bytes(&EPCBVC_CL->data[EPCBVC_CLBI]);
        line_string_delete(EPCBVC_CL, EPCBVC_CLBI, bytes);                                                    line_string_delete(EPCBVC_CL, EPCBVC_CLBI, bytes);
        if (EPCB_ML == EPCBVC_CL && EPCBVC_CLBI < EPCB_MLBI) {                                                if (EPCB_ML == EPCBVC_CL && EPCBVC_CLBI < EPCB_MLBI) {
            // adjust mark position                                                                               // adjust mark position
            EPCB_MLBI -= bytes;                                                                                   EPCB_MLBI -= bytes;
        }                                                                                                     }

        get_epc_buf()->buf_size -= bytes;                                                                     get_epc_buf()->buf_size -= bytes;
        post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_CUR);                        post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_CUR);
    } else {                                                                                              } else {
        // line end                                                                                           // line end
        if (IS_NODE_BOT_MOST(EPCBVC_CL)) {                                                                    if (IS_NODE_BOT_MOST(EPCBVC_CL)) {
            // line end and the last line                                                                         // line end and the last line
            return 0;                                                                                             return 0;
        }                                                                                                     }
        // line end, concatenate with the next line                                                           // line end, concatenate with the next line
#ifdef ENABLE_UNDO                                                                                    #ifdef ENABLE_UNDO
        undo_set_region_n_save_before_change(EPCBVC_CL, NODE_NEXT(EPCBVC_CL), 1);                             undo_set_region_n_save_before_change(EPCBVC_CL, NODE_NEXT(EPCBVC_CL), 1);
#endif // ENABLE_UNDO                                                                                 #endif // ENABLE_UNDO
        if (EPCB_ML == NODE_NEXT(EPCBVC_CL)) {                                                                if (EPCB_ML == NODE_NEXT(EPCBVC_CL)) {
            // next line will be freed, adjust mark position                                                      // next line will be freed, adjust mark position
            EPCB_ML = EPCBVC_CL;                                                                                  EPCB_ML = EPCBVC_CL;
            EPCB_MLBI += line_data_len(EPCB_ML);                                                                  EPCB_MLBI += line_data_len(EPCB_ML);
        }                                                                                                     }
        line_concat_with_next(EPCBVC_CL);                                                                     line_concat_with_next(EPCBVC_CL);

        get_epc_buf()->buf_lines--;                                                                           get_epc_buf()->buf_lines--;
        get_epc_buf()->buf_size--;                                                                            get_epc_buf()->buf_size--;
        post_cmd_processing(EPCBVC_CL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_FORWARD);               post_cmd_processing(EPCBVC_CL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_FORWARD);
    }                                                                                                     }
    set_cur_buf_modified();                                                                               set_cur_buf_modified();
    return 1;                                                                                             return 1;
}                                                                                                     }

int doe_conv_upp_low_letter(void)                                                                     int doe_conv_upp_low_letter(void)
{                                                                                                     {
    int byte_idx;                                                                                         int byte_idx;
    char *data;                                                                                           char *data;
    char first_chr;                                                                                       char first_chr;
    char chr;                                                                                             char chr;

    do_clear_mark_();                                                                                     do_clear_mark_();
    if (is_view_mode_then_warn_it())                                                                      if (is_view_mode_then_warn_it())
        return 0;                                                                                             return 0;

    byte_idx = EPCBVC_CLBI;                                                                               byte_idx = EPCBVC_CLBI;
    data = EPCBVC_CL->data;                                                                               data = EPCBVC_CL->data;
    if (isalpha(data[byte_idx])) {                                                                        if (isalpha(data[byte_idx])) {
#ifdef ENABLE_UNDO                                                                                    #ifdef ENABLE_UNDO
        undo_set_region_n_save_before_change(EPCBVC_CL, NODE_NEXT(EPCBVC_CL), 1);                             undo_set_region_n_save_before_change(EPCBVC_CL, NODE_NEXT(EPCBVC_CL), 1);
#endif // ENABLE_UNDO                                                                                 #endif // ENABLE_UNDO
        first_chr = data[byte_idx];                                                                           first_chr = data[byte_idx];
        while ((chr = data[byte_idx]) != '\0') {                                                              while ((chr = data[byte_idx]) != '\0') {
            if ((isalpha(chr) || chr == '_' || isalnum(chr)) == 0)                                                if ((isalpha(chr) || chr == '_' || isalnum(chr)) == 0)
                break;                                                                                                break;
            if (isalpha(chr)) {                                                                                   if (isalpha(chr)) {
                // Upper ==> Lower, Lower ==> Upper ==> Lower                                                         // Upper ==> Lower, Lower ==> Upper ==> Lower
                data[byte_idx] = isupper(first_chr) ? tolower(chr) : toupper(chr);                                    data[byte_idx] = isupper(first_chr) ? tolower(chr) : toupper(chr);
                set_cur_buf_modified();                                                                               set_cur_buf_modified();
            }                                                                                                     }
            byte_idx++;                                                                                           byte_idx++;
        }                                                                                                     }
    }                                                                                                     }
    post_cmd_processing(NULL, CURS_MOVE_NONE, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);                         post_cmd_processing(NULL, CURS_MOVE_NONE, LOCATE_CURS_NONE, UPDATE_SCRN_ALL);
    return 1;                                                                                             return 1;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int doe_refresh_editor(void)                                                                          int doe_refresh_editor(void)
{                                                                                                     {
    post_cmd_processing(NULL, CURS_MOVE_NONE, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);                    post_cmd_processing(NULL, CURS_MOVE_NONE, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);
    return 1;                                                                                             return 1;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int move_cursor_left(int move_disp_y)                                                                 int move_cursor_left(int move_disp_y)
{                                                                                                     {
    int wl_idx;                                                                                           int wl_idx;

    if (EPCBVC_CLBI <= 0) {                                                                               if (EPCBVC_CLBI <= 0) {
        // line top                                                                                           // line top
        if (IS_NODE_TOP_MOST(EPCBVC_CL)) {                                                                    if (IS_NODE_TOP_MOST(EPCBVC_CL)) {
            return 0;                                                                                             return 0;
        }                                                                                                     }
        EPCBVC_CL = NODE_PREV(EPCBVC_CL);                                                                     EPCBVC_CL = NODE_PREV(EPCBVC_CL);
        EPCBVC_CLBI = line_data_len(EPCBVC_CL);                                                               EPCBVC_CLBI = line_data_len(EPCBVC_CL);
        if (move_disp_y) {                                                                                    if (move_disp_y) {
            if (EPCBVC_CURSOR_Y > EDITOR_VERT_SCROLL_MARGIN_LINES) {                                              if (EPCBVC_CURSOR_Y > EDITOR_VERT_SCROLL_MARGIN_LINES) {
                EPCBVC_CURSOR_Y--;                                                                                    EPCBVC_CURSOR_Y--;
                set_edit_win_update_needed(UPDATE_SCRN_CUR_NEXT);                                                     set_edit_win_update_needed(UPDATE_SCRN_CUR_NEXT);
            }                                                                                                     }
        }                                                                                                     }
    } else {                                                                                              } else {
        wl_idx = start_wl_idx_of_wrap_line(EPCBVC_CL->data, EPCBVC_CLBI, -1);                                 wl_idx = start_wl_idx_of_wrap_line(EPCBVC_CL->data, EPCBVC_CLBI, -1);
        EPCBVC_CLBI -= utf8c_prev_bytes(EPCBVC_CL->data, &EPCBVC_CL->data[EPCBVC_CLBI]);                      EPCBVC_CLBI -= utf8c_prev_bytes(EPCBVC_CL->data, &EPCBVC_CL->data[EPCBVC_CLBI]);
        if (move_disp_y) {                                                                                    if (move_disp_y) {
            if (start_wl_idx_of_wrap_line(EPCBVC_CL->data, EPCBVC_CLBI, -1) < wl_idx) {                           if (start_wl_idx_of_wrap_line(EPCBVC_CL->data, EPCBVC_CLBI, -1) < wl_idx) {
                EPCBVC_CURSOR_Y--;                                                                                    EPCBVC_CURSOR_Y--;
            }                                                                                                     }
        }                                                                                                     }
        set_edit_win_update_needed(UPDATE_SCRN_CUR_NEXT);                                                     set_edit_win_update_needed(UPDATE_SCRN_CUR_NEXT);
    }                                                                                                     }
    return 1;                                                                                             return 1;
}                                                                                                     }

int move_cursor_right(void)                                                                           int move_cursor_right(void)
{                                                                                                     {
    int wl_idx;                                                                                           int wl_idx;

    if (EPCBVC_CLBI < line_data_len(EPCBVC_CL)) {                                                         if (EPCBVC_CLBI < line_data_len(EPCBVC_CL)) {
        wl_idx = start_wl_idx_of_wrap_line(EPCBVC_CL->data, EPCBVC_CLBI, -1);                                 wl_idx = start_wl_idx_of_wrap_line(EPCBVC_CL->data, EPCBVC_CLBI, -1);
        EPCBVC_CLBI += utf8c_bytes(&EPCBVC_CL->data[EPCBVC_CLBI]);                                            EPCBVC_CLBI += utf8c_bytes(&EPCBVC_CL->data[EPCBVC_CLBI]);
        if (start_wl_idx_of_wrap_line(EPCBVC_CL->data, EPCBVC_CLBI, -1) > wl_idx) {                           if (start_wl_idx_of_wrap_line(EPCBVC_CL->data, EPCBVC_CLBI, -1) > wl_idx) {
            EPCBVC_CURSOR_Y++;                                                                                    EPCBVC_CURSOR_Y++;
        }                                                                                                     }
        set_edit_win_update_needed(UPDATE_SCRN_CUR_PREV);                                                     set_edit_win_update_needed(UPDATE_SCRN_CUR_PREV);
    } else {                                                                                              } else {
        if (IS_NODE_BOT_MOST(EPCBVC_CL)) {                                                                    if (IS_NODE_BOT_MOST(EPCBVC_CL)) {
            return 0;                                                                                             return 0;
        }                                                                                                     }
        EPCBVC_CL = NODE_NEXT(EPCBVC_CL);                                                                     EPCBVC_CL = NODE_NEXT(EPCBVC_CL);
        EPCBVC_CLBI = 0;                                                                                      EPCBVC_CLBI = 0;
        if (EPCBVC_CURSOR_Y < BOTTOM_SCROLL_MARGIN_Y) {                                                       if (EPCBVC_CURSOR_Y < BOTTOM_SCROLL_MARGIN_Y) {
            EPCBVC_CURSOR_Y++;                                                                                    EPCBVC_CURSOR_Y++;
            set_edit_win_update_needed(UPDATE_SCRN_CUR_PREV);                                                     set_edit_win_update_needed(UPDATE_SCRN_CUR_PREV);
        }                                                                                                     }
    }                                                                                                     }
    return 1;                                                                                             return 1;
}                                                                                                     }

int c_l_up(be_line_t **line, int *byte_idx)                                                           int c_l_up(be_line_t **line, int *byte_idx)
{                                                                                                     {
    int line_byte_idx;                                                                                    int line_byte_idx;
    int wl_idx;                                                                                           int wl_idx;
    int col_idx;                                                                                          int col_idx;

    line_byte_idx = *byte_idx;                                                                            line_byte_idx = *byte_idx;

    te_concat_linefeed((*line)->data);                                                                    te_concat_linefeed((*line)->data);
    wl_idx = start_wl_idx_of_wrap_line(te_concat_linefeed_buf, line_byte_idx, -1);                        wl_idx = start_wl_idx_of_wrap_line(te_concat_linefeed_buf, line_byte_idx, -1);
    col_idx = start_col_idx_of_wrap_line(te_concat_linefeed_buf, line_byte_idx, -1);                      col_idx = start_col_idx_of_wrap_line(te_concat_linefeed_buf, line_byte_idx, -1);
    if (wl_idx > 0) {                                                                                     if (wl_idx > 0) {
        wl_idx--;                                                                                             wl_idx--;
        line_byte_idx = end_byte_idx_of_wrap_line_le(te_concat_linefeed_buf, wl_idx, col_idx, -1);            line_byte_idx = end_byte_idx_of_wrap_line_le(te_concat_linefeed_buf, wl_idx, col_idx, -1);
    } else {                                                                                              } else {
        if (IS_NODE_TOP_MOST(*line)) {                                                                        if (IS_NODE_TOP_MOST(*line)) {
            return 0;   // no move                                                                                return 0;   // no move
        }                                                                                                     }
        *line = NODE_PREV(*line);                                                                             *line = NODE_PREV(*line);
        te_concat_linefeed((*line)->data);                                                                    te_concat_linefeed((*line)->data);
        wl_idx = max_wrap_line_idx(te_concat_linefeed_buf, -1);                                               wl_idx = max_wrap_line_idx(te_concat_linefeed_buf, -1);
        line_byte_idx = start_byte_idx_of_wrap_line(te_concat_linefeed_buf, wl_idx, col_idx, -1);             line_byte_idx = start_byte_idx_of_wrap_line(te_concat_linefeed_buf, wl_idx, col_idx, -1);
    }                                                                                                     }

    *byte_idx = line_byte_idx;                                                                            *byte_idx = line_byte_idx;
    return 1;                                                                                             return 1;
}                                                                                                     }
int c_l_down(be_line_t **line, int *byte_idx)                                                         int c_l_down(be_line_t **line, int *byte_idx)
{                                                                                                     {
    int line_byte_idx;                                                                                    int line_byte_idx;
    int wl_idx;                                                                                           int wl_idx;
    int col_idx;                                                                                          int col_idx;

    line_byte_idx = *byte_idx;                                                                            line_byte_idx = *byte_idx;

    te_concat_linefeed((*line)->data);                                                                    te_concat_linefeed((*line)->data);
    wl_idx = start_wl_idx_of_wrap_line(te_concat_linefeed_buf, line_byte_idx, -1);                        wl_idx = start_wl_idx_of_wrap_line(te_concat_linefeed_buf, line_byte_idx, -1);
    col_idx = start_col_idx_of_wrap_line(te_concat_linefeed_buf, line_byte_idx, -1);                      col_idx = start_col_idx_of_wrap_line(te_concat_linefeed_buf, line_byte_idx, -1);
    if (wl_idx < max_wrap_line_idx(te_concat_linefeed_buf, -1)) {                                         if (wl_idx < max_wrap_line_idx(te_concat_linefeed_buf, -1)) {
        wl_idx++;                                                                                             wl_idx++;
        line_byte_idx = end_byte_idx_of_wrap_line_le(te_concat_linefeed_buf, wl_idx, col_idx, -1);            line_byte_idx = end_byte_idx_of_wrap_line_le(te_concat_linefeed_buf, wl_idx, col_idx, -1);
    } else {                                                                                              } else {
        if (IS_NODE_BOT_MOST(*line)) {                                                                        if (IS_NODE_BOT_MOST(*line)) {
            return 0;   // no move                                                                                return 0;   // no move
        }                                                                                                     }
        *line = NODE_NEXT(*line);                                                                             *line = NODE_NEXT(*line);
        te_concat_linefeed((*line)->data);                                                                    te_concat_linefeed((*line)->data);
        wl_idx = 0;                                                                                           wl_idx = 0;
        line_byte_idx = end_byte_idx_of_wrap_line_ge(te_concat_linefeed_buf, wl_idx, col_idx, -1);            line_byte_idx = end_byte_idx_of_wrap_line_ge(te_concat_linefeed_buf, wl_idx, col_idx, -1);
    }                                                                                                     }

    *byte_idx = line_byte_idx;                                                                            *byte_idx = line_byte_idx;
    return 1;                                                                                             return 1;
}                                                                                                     }
int cursor_next_line(void)                                                                            int cursor_next_line(void)
{                                                                                                     {
    if (IS_NODE_BOT_MOST(EPCBVC_CL))                                                                      if (IS_NODE_BOT_MOST(EPCBVC_CL))
        return 0;                                                                                             return 0;
    EPCBVC_CL = NODE_NEXT(EPCBVC_CL);                                                                     EPCBVC_CL = NODE_NEXT(EPCBVC_CL);
    EPCBVC_CLBI = 0;                                                                                      EPCBVC_CLBI = 0;
    return IS_NODE_BOT_MOST(EPCBVC_CL) ? 1 : 2;                                                           return IS_NODE_BOT_MOST(EPCBVC_CL) ? 1 : 2;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int first_line(void)                                                                                  int first_line(void)
{                                                                                                     {
    EPCBVC_CL = CUR_EDIT_BUF_TOP_LINE;                                                                    EPCBVC_CL = CUR_EDIT_BUF_TOP_LINE;
    return 1;                                                                                             return 1;
}                                                                                                     }
int last_line(void)                                                                                   int last_line(void)
{                                                                                                     {
    EPCBVC_CL = CUR_EDIT_BUF_BOT_LINE;                                                                    EPCBVC_CL = CUR_EDIT_BUF_BOT_LINE;
    return 1;                                                                                             return 1;
}                                                                                                     }

// End of editormove.c                                                                                // End of editormove.c
kdiff3 ../old/be/editormove2.c editormove2.c #========================
kdiff3 ../old/be/editorundo.c editorundo.c #========================
kdiff3 ../old/be/fileio.c fileio.c #========================
/**************************************************************************                           /**************************************************************************
 *   fileio.c                                                             *                            *   fileio.c                                                             *
 *                                                                        *                            *                                                                        *
 *   Copyright (C) 1999-2003 Chris Allegretta                             *                            *   Copyright (C) 1999-2003 Chris Allegretta                             *
 *                                                                        *                            *                                                                        *
 *   This program is free software; you can redistribute it and/or modify *                            *   This program is free software; you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published by *                            *   it under the terms of the GNU General Public License as published by *
 *   the Free Software Foundation; either version 2, or (at your option)  *                            *   the Free Software Foundation; either version 2, or (at your option)  *
 *   any later version.                                                   *                            *   any later version.                                                   *
 *                                                                        *                            *                                                                        *
 *   This program is distributed in the hope that it will be useful,      *                            *   This program is distributed in the hope that it will be useful,      *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *                            *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *                            *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 *   GNU General Public License for more details.                         *                            *   GNU General Public License for more details.                         *
 *                                                                        *                            *                                                                        *
 *   You should have received a copy of the GNU General Public License    *                            *   You should have received a copy of the GNU General Public License    *
 *   along with this program; if not, write to the Free Software          *                            *   along with this program; if not, write to the Free Software          *
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *                            *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *
 *                                                                        *                            *                                                                        *
 **************************************************************************/                           **************************************************************************/

#include "headers.h"                                                                                  #include "headers.h"

#ifdef USE_NKF                                                                                        #ifdef USE_NKF
PRIVATE int nkf_avalability = -1;   // -1: Unkown, 0: unavailable, 1: available                       PRIVATE int nkf_avalability = -1;   // -1: Unkown, 0: unavailable, 1: available
#endif // USE_NKF                                                                                     #endif // USE_NKF

PRIVATE int backup_files(const char *file_path, int depth);                                           PRIVATE int backup_files(const char *file_path, int depth);
PRIVATE char *make_backup_file_path(const char *orig_path, char *backup_path, int depth);             PRIVATE char *make_backup_file_path(const char *orig_path, char *backup_path, int depth);

PRIVATE int load_file_into_new_buf__(const char *full_path, int open_on_err, int msg_on_err);         PRIVATE int load_file_into_new_buf__(const char *full_path, int open_on_err, int msg_on_err);
PRIVATE int load_file_into_cur_buf__(const char *full_path, int load_binary_file, int msg_on_err);    PRIVATE int load_file_into_cur_buf__(const char *full_path, int load_binary_file, int msg_on_err);
PRIVATE int load_file_into_cur_buf_ascii(const char *file_name);                                      PRIVATE int load_file_into_cur_buf_ascii(const char *file_name);
PRIVATE int load_file_into_cur_buf_binary(const char *full_path);                                     PRIVATE int load_file_into_cur_buf_binary(const char *full_path);
#ifdef USE_NKF                                                                                        #ifdef USE_NKF
PRIVATE int guess_encoding_by_nkf(const char *full_path);                                             PRIVATE int guess_encoding_by_nkf(const char *full_path);
PRIVATE int my_guess_bin_file(const char *full_path);                                                 PRIVATE int my_guess_bin_file(const char *full_path);
PRIVATE int load_file_into_cur_buf_nkf(const char *full_path, const char *nkf_options);               PRIVATE int load_file_into_cur_buf_nkf(const char *full_path, const char *nkf_options);
#endif // USE_NKF                                                                                     #endif // USE_NKF
PRIVATE int load_into_cur_buf_fp(FILE *fp);                                                           PRIVATE int load_into_cur_buf_fp(FILE *fp);

PRIVATE int save_cur_buf_to_file_ascii(const char *file_path);                                        PRIVATE int save_cur_buf_to_file_ascii(const char *file_path);
#ifdef USE_NKF                                                                                        #ifdef USE_NKF
PRIVATE int save_cur_buf_to_file_nkf(const char *file_path, const char *nkf_options);                 PRIVATE int save_cur_buf_to_file_nkf(const char *file_path, const char *nkf_options);
#endif // USE_NKF                                                                                     #endif // USE_NKF
PRIVATE int save_cur_buf_to_fp(const char *file_path, FILE *fp);                                      PRIVATE int save_cur_buf_to_fp(const char *file_path, FILE *fp);
PRIVATE int save_cur_buf_to_file_binary(const char *file_path);                                       PRIVATE int save_cur_buf_to_file_binary(const char *file_path);

int load_file_into_new_buf(const char *full_path, int open_on_err, int msg_on_err)                    int load_file_into_new_buf(const char *full_path, int open_on_err, int msg_on_err)
{                                                                                                     {
    int tab_size;                                                                                         int tab_size;

    int lines = load_file_into_new_buf__(full_path, open_on_err, msg_on_err);                             int lines = load_file_into_new_buf__(full_path, open_on_err, msg_on_err);
    if (lines < 0) {                                                                                      if (lines < 0) {
        return lines;                                                                                         return lines;
    }                                                                                                     }
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                         <
    append_magic_line();                                                                                  append_magic_line();
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                         <
    buf_set_view_x_cur_line(get_epc_buf(), 0, CUR_EDIT_BUF_TOP_LINE);                                     buf_set_view_x_cur_line(get_epc_buf(), 0, CUR_EDIT_BUF_TOP_LINE);
    buf_set_view_x_cur_line(get_epc_buf(), 1, CUR_EDIT_BUF_TOP_LINE);                                     buf_set_view_x_cur_line(get_epc_buf(), 1, CUR_EDIT_BUF_TOP_LINE);
    BUFVX_CLBI(get_epc_buf(), 0) = 0;                                                                     BUFVX_CLBI(get_epc_buf(), 0) = 0;
    BUFVX_CLBI(get_epc_buf(), 1) = 0;                                                                     BUFVX_CLBI(get_epc_buf(), 1) = 0;
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                         <
    renumber_cur_buf_from_top();                                                                          renumber_cur_buf_from_top();
    update_cur_buf_crc();                                                                                 update_cur_buf_crc();
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                         <

    if ((tab_size = buf_guess_tab_size(get_epc_buf())) != 0) {                                            if ((tab_size = buf_guess_tab_size(get_epc_buf())) != 0) {
        CUR_EBUF_STATE(buf_TAB_SIZE) = tab_size;                                                              CUR_EBUF_STATE(buf_TAB_SIZE) = tab_size;
    }                                                                                                     }
    disp_status_bar_ing(P_(_("%d line read %s"),                                                          disp_status_bar_ing(P_(_("%d line read %s"),
                           _("%d lines read %s"),                                                                                _("%d lines read %s"),
                           _("%d liness read %s"),                                                                               _("%d liness read %s"),
                           _("%d linesss read %s"),                                                                              _("%d linesss read %s"),
     lines), lines, buf_eol_str(get_epc_buf()));                                                           lines), lines, buf_eol_str(get_epc_buf()));
    return lines;   // >= 0: success                                                                      return lines;   // >= 0: success
}                                                                                                     }
PRIVATE int load_file_into_new_buf__(const char *full_path, int open_on_err, int msg_on_err)          PRIVATE int load_file_into_new_buf__(const char *full_path, int open_on_err, int msg_on_err)
{                                                                                                     {
    struct stat st;                                                                                       struct stat st;
    int ret = -1;                                                                                         int ret = -1;

    if (is_strlen_not_0(full_path)) {                                                                     if (is_strlen_not_0(full_path)) {
        ret = stat(full_path, &st);                                                                           ret = stat(full_path, &st);
    }                                                                                                     }
    if (ret < 0) {                                                                                        if (ret < 0) {
        // New file                                                                                           // New file
        if (open_on_err == 0) {                                                                               if (open_on_err == 0) {
            if (msg_on_err) {                                                                                     if (msg_on_err) {
                disp_status_bar_err(_("File [%s] not found"),                                                         disp_status_bar_err(_("File [%s] not found"),
                 shrink_str_to_scr_static(full_path));                                                                 shrink_str_to_scr_static(full_path));
            }                                                                                                     }
            return -1;  // open error                                                                             return -1;  // open error
        }                                                                                                     }
        create_edit_buf(full_path);                                                                           create_edit_buf(full_path);
        disp_status_bar_ing(_("New File"));                                                                   disp_status_bar_ing(_("New File"));
        return 1;       // new file                                                                           return 1;       // new file
    }                                                                                                     }
    if (S_ISREG(st.st_mode) == 0) {                                                                       if (S_ISREG(st.st_mode) == 0) {
        // special file                                                                                       // special file
        if (msg_on_err) {                                                                                     if (msg_on_err) {
            disp_status_bar_err(S_ISDIR(st.st_mode)                                                               disp_status_bar_err(S_ISDIR(st.st_mode)
             ? _("[%s] is a directory") : _("[%s] is a special file"),                                             ? _("[%s] is a directory") : _("[%s] is a special file"),
             shrink_str_to_scr_static(full_path));                                                                 shrink_str_to_scr_static(full_path));
        }                                                                                                     }
        return -2;      // open error                                                                         return -2;      // open error
    }                                                                                                     }
    // Max. file size loadable is half of free memory.                                                    // Max. file size loadable is half of free memory.
    if ((st.st_size / 1000) >= get_mem_free_in_kb(1) / 2) {                                               if ((st.st_size / 1000) >= get_mem_free_in_kb(1) / 2) {
        // file size too large                                                                                // file size too large
        if (msg_on_err) {                                                                                     if (msg_on_err) {
            disp_status_bar_err(_("[%s] is too large to read into buffer"),                                       disp_status_bar_err(_("[%s] is too large to read into buffer"),
             shrink_str_to_scr_static(full_path));                                                                 shrink_str_to_scr_static(full_path));
        }                                                                                                     }
        return -3;      // open error                                                                         return -3;      // open error
    }                                                                                                     }
    // regular file                                                                                       // regular file
    disp_status_bar_ing(_("Reading File %s ..."), shrink_str_to_scr_static(full_path));                   disp_status_bar_ing(_("Reading File %s ..."), shrink_str_to_scr_static(full_path));
    create_edit_buf(full_path);                                                                           create_edit_buf(full_path);
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                         <
    memcpy__(&(get_epc_buf()->orig_file_stat), &st, sizeof(st));                                          memcpy__(&(get_epc_buf()->orig_file_stat), &st, sizeof(st));

    ret = load_file_into_cur_buf__(full_path, 1, msg_on_err);                                             ret = load_file_into_cur_buf__(full_path, 1, msg_on_err);
////_D_(dump_buf_views(EDIT_BUFS_TOP_BUF))                                                         <

    if (ret < 0) {                                                                                        if (ret < 0) {
        free_cur_edit_buf();                                                                                  free_cur_edit_buf();
        return -1;                                                                                            return -1;
    }                                                                                                     }
    return ret;     // >= 0: loaded                                                                       return ret;     // >= 0: loaded
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int backup_and_save_cur_buf_ask(void)                                                                 int backup_and_save_cur_buf_ask(void)
{                                                                                                     {
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];
    int ret = 0;                                                                                          int ret = 0;

    // write to "abs_path" so that not change symlink but change file pointed by symlink                  // write to "abs_path" so that not change symlink but change file pointed by symlink
    strlcpy__(file_path, get_epc_buf()->abs_path_, MAX_PATH_LEN);                                         strlcpy__(file_path, get_epc_buf()->abs_path_, MAX_PATH_LEN);
    if (is_strlen_0(file_path)) {                                                                         if (is_strlen_0(file_path)) {
        if (input_new_file_name_n_ask(file_path) <= 0) {                                                      if (input_new_file_name_n_ask(file_path) <= 0) {
            return -1;                                                                                            return -1;
        }                                                                                                     }
    }                                                                                                     }
    if (buf_is_orig_file_updated(get_epc_buf()) > 0) {                                                    if (buf_is_orig_file_updated(get_epc_buf()) > 0) {
        // file is modified by another program                                                                // file is modified by another program
        ret = ask_yes_no(ASK_YES_NO,                                                                          ret = ask_yes_no(ASK_YES_NO,
         _("File has modified by another program, OVERWRITE ?"));                                              _("File has modified by another program, OVERWRITE ?"));
        if (ret < 0) {                                                                                        if (ret < 0) {
            disp_status_bar_done(_("Cancelled"));                                                                 disp_status_bar_done(_("Cancelled"));
            return -1;                                                                                            return -1;
        }                                                                                                     }
    }                                                                                                     }
    if (is_strlen_0(file_path) || file_path[0] == '#') {                                                  if (is_strlen_0(file_path) || file_path[0] == '#') {
        disp_status_bar_done(_("Cancelled"));                                                                 disp_status_bar_done(_("Cancelled"));
        return -1;                                                                                            return -1;
    }                                                                                                     }
    if ((ret = backup_and_save_cur_buf(file_path)) < 0) {                                                 if ((ret = backup_and_save_cur_buf(file_path)) < 0) {
        disp_status_bar_err(_("File [%s] can NOT be written !!"),                                             disp_status_bar_err(_("File [%s] can NOT be written !!"),
         shrink_str_to_scr_static(file_path));                                                                 shrink_str_to_scr_static(file_path));
    }                                                                                                     }
    return ret;                                                                                           return ret;
}                                                                                                     }

int input_new_file_name_n_ask(char *file_path)                                                        int input_new_file_name_n_ask(char *file_path)
{                                                                                                     {
    while (1) {                                                                                           while (1) {
        int ret = input_string_tail(file_path, file_path,                                                     int ret = input_string_tail(file_path, file_path,
         HISTORY_TYPE_IDX_DIR, "%s:", _("File Name to Write"));                                                HISTORY_TYPE_IDX_DIR, "%s:", _("File Name to Write"));
        if (ret <= 0) {                                                                                       if (ret <= 0) {
            set_edit_win_update_needed(UPDATE_SCRN_ALL_SOON);                                                     set_edit_win_update_needed(UPDATE_SCRN_ALL_SOON);
            return 0;       // cancelled                                                                          return 0;       // cancelled
        }                                                                                                     }
#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
        if (strcmp(file_path, "") == 0 || is_path_wildcard(file_path)) {                                      if (strcmp(file_path, "") == 0 || is_path_wildcard(file_path)) {
            ret = call_filer(1, 1, "", "", file_path, MAX_PATH_LEN);                                              ret = call_filer(1, 1, "", "", file_path, MAX_PATH_LEN);
            if (ret <= 0)                                                                                         if (ret <= 0)
                continue;                                                                                             continue;
            strlcpy__(file_path, file_path, MAX_PATH_LEN);                                                        strlcpy__(file_path, file_path, MAX_PATH_LEN);
        }                                                                                                     }
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER
        if (is_path_exist(file_path)) {                                                                       if (is_path_exist(file_path)) {
            if (is_path_regular_file(file_path) > 0) {                                                            if (is_path_regular_file(file_path) > 0) {
                // ask overwrite                                                                                      // ask overwrite
                ret = ask_yes_no(ASK_YES_NO,                                                                          ret = ask_yes_no(ASK_YES_NO,
                 _("File exists, OVERWRITE it ?"));                                                                    _("File exists, OVERWRITE it ?"));
                if (ret < 0) {                                                                                        if (ret < 0) {
                    return 0;       // cancelled                                                                          return 0;       // cancelled
                }                                                                                                     }
                if (ret == 0)                                                                                         if (ret == 0)
                    continue;                                                                                             continue;
            } else {                                                                                              } else {
                // ask non regular file                                                                               // ask non regular file
                ret = ask_yes_no(ASK_YES_NO,                                                                          ret = ask_yes_no(ASK_YES_NO,
                 _("Path is not file, can not WRITE it"));                                                             _("Path is not file, can not WRITE it"));
                if (ret < 0) {                                                                                        if (ret < 0) {
                    return 0;       // cancelled                                                                          return 0;       // cancelled
                }                                                                                                     }
                continue;                                                                                             continue;
            }                                                                                                     }
        }                                                                                                     }
        break;                                                                                                break;
    }                                                                                                     }
    return 1;       // input                                                                              return 1;       // input
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

int backup_and_save_cur_buf(const char *file_path_to)                                                 int backup_and_save_cur_buf(const char *file_path_to)
{                                                                                                     {
    ////char abs_path[MAX_PATH_LEN+1];                                                             <
    int mask = 0;                                                                                         int mask = 0;
    int lines_written;                                                                                    int lines_written;

    ////get_abs_path(file_path, abs_path);                                                         <
    // TODO: do minimum check                                                                             // TODO: do minimum check
    //  file_path is regular file and not dir and special file                                            //  file_path is regular file and not dir and special file
    if (is_path_regular_file(file_path_to) == 0) {                                                        if (is_path_regular_file(file_path_to) == 0) {
        disp_status_bar_err(_("File [%s] is NOT regular file !!"),                                            disp_status_bar_err(_("File [%s] is NOT regular file !!"),
         shrink_str_to_scr_static(file_path_to));                                                              shrink_str_to_scr_static(file_path_to));
        return -1;                                                                                            return -1;
    }                                                                                                     }
    disp_status_bar_ing(_("Writing File %s ..."),                                                         disp_status_bar_ing(_("Writing File %s ..."),
     shrink_str_to_scr_static(file_path_to));                                                              shrink_str_to_scr_static(file_path_to));
    if (GET_APPMD(ed_BACKUP_FILES)) {                                                                     if (GET_APPMD(ed_BACKUP_FILES)) {
        if (backup_files(file_path_to, get_backup_files()) < 0) {                                             if (backup_files(file_path_to, get_backup_files()) < 0) {
            return -1;                                                                                            return -1;
        }                                                                                                     }
    }                                                                                                     }

    lines_written = save_cur_buf_to_file(file_path_to);                                                   lines_written = save_cur_buf_to_file(file_path_to);

    if (S_ISREG(get_epc_buf()->orig_file_stat.st_mode)) {                                                 if (S_ISREG(get_epc_buf()->orig_file_stat.st_mode)) {
        mask = get_epc_buf()->orig_file_stat.st_mode & 07777;                                                 mask = get_epc_buf()->orig_file_stat.st_mode & 07777;
        if (chmod(file_path_to, mask) < 0) {                                                                  if (chmod(file_path_to, mask) < 0) {
            disp_status_bar_err(_("Can not set permissions %1$o on [%2$s]: %3$s"),                                disp_status_bar_err(_("Can not set permissions %1$o on [%2$s]: %3$s"),
             mask, shrink_str_to_scr_static(file_path_to), strerror(errno));                                       mask, shrink_str_to_scr_static(file_path_to), strerror(errno));
        }                                                                                                     }
    }                                                                                                     }

    // file may be overwritten, get current file stat into orig_file_stat                                 // file may be overwritten, get current file stat into orig_file_stat
    stat(get_epc_buf()->file_path, &(get_epc_buf()->orig_file_stat));                                     stat(get_epc_buf()->file_path, &(get_epc_buf()->orig_file_stat));
    update_cur_buf_crc();                                                                                 update_cur_buf_crc();

    disp_status_bar_ing(P_(_("%d line written"),                                                          disp_status_bar_ing(P_(_("%d line written"),
                           _("%d lines written"),                                                                                _("%d lines written"),
                           _("%d liness written"),                                                                               _("%d liness written"),
                           _("%d linesss written"),                                                                              _("%d linesss written"),
     lines_written), lines_written);                                                                       lines_written), lines_written);
    CUR_EBUF_STATE(buf_MODIFIED) = 0;                                                                     CUR_EBUF_STATE(buf_MODIFIED) = 0;
    editor_disp_title_bar();                                                                              editor_disp_title_bar();

    return lines_written;       // -1: error                                                              return lines_written;       // -1: error
}                                                                                                     }
PRIVATE int backup_files(const char *file_path, int depth)                                            PRIVATE int backup_files(const char *file_path, int depth)
{                                                                                                     {
    char orig_path[MAX_PATH_LEN+1];                                                                       char orig_path[MAX_PATH_LEN+1];
    char backup_path[MAX_PATH_LEN+1];                                                                     char backup_path[MAX_PATH_LEN+1];
    struct stat st;                                                                                       struct stat st;

    depth = LIM_MIN(0, depth);                                                                            depth = LIM_MIN(0, depth);
    for ( ; depth > 0; depth--) {                                                                         for ( ; depth > 0; depth--) {
        make_backup_file_path(file_path, backup_path, depth);                                                 make_backup_file_path(file_path, backup_path, depth);
        make_backup_file_path(file_path, orig_path, depth-1);                                                 make_backup_file_path(file_path, orig_path, depth-1);
        if (!stat(orig_path, &st)) {                                                                          if (!stat(orig_path, &st)) {
            remove(backup_path);                                                                                  remove(backup_path);
            if (rename(orig_path, backup_path) < 0) {                                                             if (rename(orig_path, backup_path) < 0) {
                return -1;                                                                                            return -1;
            }                                                                                                     }
        }                                                                                                     }
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }
PRIVATE char *make_backup_file_path(const char *orig_path, char *backup_path, int depth)              PRIVATE char *make_backup_file_path(const char *orig_path, char *backup_path, int depth)
{                                                                                                     {
    strlcpy__(backup_path, orig_path, MAX_PATH_LEN);                                                      strlcpy__(backup_path, orig_path, MAX_PATH_LEN);
    while (depth--)                                                                                       while (depth--)
        strlcat__(backup_path, MAX_PATH_LEN, "~");                                                            strlcat__(backup_path, MAX_PATH_LEN, "~");
    return backup_path;                                                                                   return backup_path;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

int load_file_into_buf(be_buf_t *buf, const char *full_path)                                          int load_file_into_buf(be_buf_t *buf, const char *full_path)
{                                                                                                     {
    be_buf_t *buf_save = get_epc_buf();                                                                   be_buf_t *buf_save = get_epc_buf();
    set_epc_buf(buf);                                                                                     set_epc_buf(buf);

    int ret = load_file_into_cur_buf__(full_path, 1, 0);                                                  int ret = load_file_into_cur_buf__(full_path, 1, 0);

    set_epc_buf(buf_save);                                                                                set_epc_buf(buf_save);
    return ret;     // >= 0: success                                                                      return ret;     // >= 0: success
}                                                                                                     }

PRIVATE int load_file_into_cur_buf__(const char *full_path, int load_binary_file, int msg_on_err)     PRIVATE int load_file_into_cur_buf__(const char *full_path, int load_binary_file, int msg_on_err)
{                                                                                                     {
#ifdef USE_NKF                                                                                        #ifdef USE_NKF
    const char *nkf_options = "-Wwx";   // input UTF8, output UTF8, preserve HankakuKana                  const char *nkf_options = "-Wwx";   // input UTF8, output UTF8, preserve HankakuKana
#endif // USE_NKF                                                                                     #endif // USE_NKF

#ifdef USE_NKF                                                                                        #ifdef USE_NKF
    if (GET_APPMD(ed_USE_NKF)) {                                                                          if (GET_APPMD(ed_USE_NKF)) {
        if (CUR_EBUF_STATE(buf_ENCODE) == ENCODE_ASCII) {                                                     if (CUR_EBUF_STATE(buf_ENCODE) == ENCODE_ASCII) {
            // encoding is not specified on command line                                                          // encoding is not specified on command line
            guess_encoding_by_nkf(full_path);                                                                     guess_encoding_by_nkf(full_path);
            if ((CUR_EBUF_STATE(buf_ENCODE) == ENCODE_BINARY) && (load_binary_file == 0)) {                       if ((CUR_EBUF_STATE(buf_ENCODE) == ENCODE_BINARY) && (load_binary_file == 0)) {
                if (msg_on_err) {                                                                                     if (msg_on_err) {
                    disp_status_bar_err(_("BINARY file !! [%s]"),                                                         disp_status_bar_err(_("BINARY file !! [%s]"),
                     shrink_str_to_scr_static(full_path));                                                                 shrink_str_to_scr_static(full_path));
                }                                                                                                     }
                return -1;      // do not load binary file                                                            return -1;      // do not load binary file
            }                                                                                                     }
        }                                                                                                     }
        switch (CUR_EBUF_STATE(buf_ENCODE)) {                                                                 switch (CUR_EBUF_STATE(buf_ENCODE)) {
        default:                                                                                              default:
        case ENCODE_ASCII:                                                                                    case ENCODE_ASCII:
        case ENCODE_UTF8:                                                                                     case ENCODE_UTF8:
            ////nkf_options = "-Wwx";   // input UTF8, output UTF8, preserve HankakuKana                          ////nkf_options = "-Wwx";   // input UTF8, output UTF8, preserve HankakuKana
            break;                                                                                                break;
        case ENCODE_EUCJP:                                                                                    case ENCODE_EUCJP:
            nkf_options = "-Ewx";   // input EUCJP, output UTF8, preserve HankakuKana                             nkf_options = "-Ewx";   // input EUCJP, output UTF8, preserve HankakuKana
            break;                                                                                                break;
        case ENCODE_SJIS:                                                                                     case ENCODE_SJIS:
            nkf_options = "-Swx";   // input SJIS, output UTF8, preserve HankakuKana                              nkf_options = "-Swx";   // input SJIS, output UTF8, preserve HankakuKana
            break;                                                                                                break;
        case ENCODE_JIS:                                                                                      case ENCODE_JIS:
            nkf_options = "-Jwx";   // input JIS, output UTF8, preserve HankakuKana                               nkf_options = "-Jwx";   // input JIS, output UTF8, preserve HankakuKana
            break;                                                                                                break;
        case ENCODE_BINARY:                                                                                   case ENCODE_BINARY:
            nkf_options = "-w";     // output UTF8                                                                nkf_options = "-w";     // output UTF8
            break;                                                                                                break;
        }                                                                                                     }
        switch (CUR_EBUF_STATE(buf_ENCODE)) {                                                                 switch (CUR_EBUF_STATE(buf_ENCODE)) {
        default:                                                                                              default:
        case ENCODE_ASCII:                                                                                    case ENCODE_ASCII:
        case ENCODE_UTF8:                                                                                     case ENCODE_UTF8:
            break;                                                                                                break;
        case ENCODE_EUCJP:                                                                                    case ENCODE_EUCJP:
        case ENCODE_SJIS:                                                                                     case ENCODE_SJIS:
        case ENCODE_JIS:                                                                                      case ENCODE_JIS:
            return load_file_into_cur_buf_nkf(full_path, nkf_options);                                            return load_file_into_cur_buf_nkf(full_path, nkf_options);
        case ENCODE_BINARY:                                                                                   case ENCODE_BINARY:
            return load_file_into_cur_buf_binary(full_path);                                                      return load_file_into_cur_buf_binary(full_path);
        }                                                                                                     }
    } // if (GET_APPMD(ed_USE_NKF))                                                                       } // if (GET_APPMD(ed_USE_NKF))
#endif // USE_NKF                                                                                     #endif // USE_NKF
    return load_file_into_cur_buf_ascii(full_path);                                                       return load_file_into_cur_buf_ascii(full_path);
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

int save_buf_to_file(be_buf_t *buf, const char *file_path)                                            int save_buf_to_file(be_buf_t *buf, const char *file_path)
{                                                                                                     {
    be_buf_t *buf_save = get_epc_buf();                                                                   be_buf_t *buf_save = get_epc_buf();
    set_epc_buf(buf);                                                                                     set_epc_buf(buf);

    int ret = save_cur_buf_to_file(file_path);                                                            int ret = save_cur_buf_to_file(file_path);

    set_epc_buf(buf_save);                                                                                set_epc_buf(buf_save);
    return ret;                                                                                           return ret;
}                                                                                                     }

int save_cur_buf_to_file(const char *file_path)                                                       int save_cur_buf_to_file(const char *file_path)
{                                                                                                     {
#ifdef USE_NKF                                                                                        #ifdef USE_NKF
    const char *nkf_options = "-Wwx";   // input UTF8, output UTF8, preserve HankakuKana                  const char *nkf_options = "-Wwx";   // input UTF8, output UTF8, preserve HankakuKana
#endif // USE_NKF                                                                                     #endif // USE_NKF

#ifdef USE_NKF                                                                                        #ifdef USE_NKF
    if (GET_APPMD(ed_USE_NKF)) {                                                                          if (GET_APPMD(ed_USE_NKF)) {
        switch (CUR_EBUF_STATE(buf_ENCODE)) {                                                                 switch (CUR_EBUF_STATE(buf_ENCODE)) {
        default:                                                                                              default:
        case ENCODE_ASCII:                                                                                    case ENCODE_ASCII:
        case ENCODE_UTF8:                                                                                     case ENCODE_UTF8:
            ////nkf_options = "-Wwx";   // input UTF8, output UTF8, preserve HankakuKana                          ////nkf_options = "-Wwx";   // input UTF8, output UTF8, preserve HankakuKana
            break;                                                                                                break;
        case ENCODE_EUCJP:                                                                                    case ENCODE_EUCJP:
            nkf_options = "-Wex";   // input UTF8, output EUCJP, preserve HankakuKana                             nkf_options = "-Wex";   // input UTF8, output EUCJP, preserve HankakuKana
            break;                                                                                                break;
        case ENCODE_SJIS:                                                                                     case ENCODE_SJIS:
            nkf_options = "-Wsx";   // input UTF8, output SJIS, preserve HankakuKana                              nkf_options = "-Wsx";   // input UTF8, output SJIS, preserve HankakuKana
            break;                                                                                                break;
        case ENCODE_JIS:                                                                                      case ENCODE_JIS:
            nkf_options = "-Wjx";   // input UTF8, output JIS, preserve HankakuKana                               nkf_options = "-Wjx";   // input UTF8, output JIS, preserve HankakuKana
            break;                                                                                                break;
        case ENCODE_BINARY:                                                                                   case ENCODE_BINARY:
            nkf_options = "-W";     // input UTF8                                                                 nkf_options = "-W";     // input UTF8
            break;                                                                                                break;
        }                                                                                                     }
        switch (CUR_EBUF_STATE(buf_ENCODE)) {                                                                 switch (CUR_EBUF_STATE(buf_ENCODE)) {
        default:                                                                                              default:
        case ENCODE_ASCII:                                                                                    case ENCODE_ASCII:
        case ENCODE_UTF8:                                                                                     case ENCODE_UTF8:
            break;                                                                                                break;
        case ENCODE_EUCJP:                                                                                    case ENCODE_EUCJP:
        case ENCODE_SJIS:                                                                                     case ENCODE_SJIS:
        case ENCODE_JIS:                                                                                      case ENCODE_JIS:
            if (nkf_avalability > 0) {                                                                            if (nkf_avalability > 0) {
                return save_cur_buf_to_file_nkf(file_path, nkf_options);                                              return save_cur_buf_to_file_nkf(file_path, nkf_options);
            }                                                                                                     }
            break;                                                                                                break;
        case ENCODE_BINARY:                                                                                   case ENCODE_BINARY:
            return save_cur_buf_to_file_binary(file_path);                                                        return save_cur_buf_to_file_binary(file_path);
        }                                                                                                     }
    }                                                                                                     }
#endif // USE_NKF                                                                                     #endif // USE_NKF
    return save_cur_buf_to_file_ascii(file_path);                                                         return save_cur_buf_to_file_ascii(file_path);
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

#ifdef USE_NKF                                                                                        #ifdef USE_NKF
PRIVATE int guess_encoding_by_nkf(const char *full_path)                                              PRIVATE int guess_encoding_by_nkf(const char *full_path)
{                                                                                                     {
    char buffer[MAX_PATH_LEN+1];                                                                          char buffer[MAX_PATH_LEN+1];
    FILE *fp;                                                                                             FILE *fp;

    CUR_EBUF_STATE(buf_ENCODE) = ENCODE_ASCII;                                                            CUR_EBUF_STATE(buf_ENCODE) = ENCODE_ASCII;
    // No encoding specified in command line                                                              // No encoding specified in command line
    snprintf_(buffer, MAX_PATH_LEN+1, "nkf -g \"%s\"", full_path);                                        snprintf_(buffer, MAX_PATH_LEN+1, "nkf -g \"%s\"", full_path);
    if ((fp = popen(buffer, "r")) <= 0) {                                                                 if ((fp = popen(buffer, "r")) <= 0) {
        disp_status_bar_err(_("Can not read-open file [%s]: %s"),                                             disp_status_bar_err(_("Can not read-open file [%s]: %s"),
         shrink_str_to_scr_static(full_path), strerror(errno));                                                shrink_str_to_scr_static(full_path), strerror(errno));
        return -1;                                                                                            return -1;
    }                                                                                                     }
    if (fgets(buffer, MAX_PATH_LEN, fp) == NULL) {                                                        if (fgets(buffer, MAX_PATH_LEN, fp) == NULL) {
        // have read nothing, clear buffer                                                                    // have read nothing, clear buffer
        buffer[0] = '\0';                                                                                     buffer[0] = '\0';
        nkf_avalability = 0;    // set unavailable (0)                                                        nkf_avalability = 0;    // set unavailable (0)
    } else {                                                                                              } else {
        nkf_avalability = 1;    // set available (1)                                                          nkf_avalability = 1;    // set available (1)
    }                                                                                                     }
    if (pclose(fp) == -1) {                                                                               if (pclose(fp) == -1) {
        return -1;                                                                                            return -1;
    }                                                                                                     }
    if (strlcmp__(buffer, "ASCII") == 0) {                                                                if (strlcmp__(buffer, "ASCII") == 0) {
        CUR_EBUF_STATE(buf_ENCODE) = ENCODE_ASCII;                                                            CUR_EBUF_STATE(buf_ENCODE) = ENCODE_ASCII;
    } else if (strlcmp__(buffer, "UTF-8") == 0) {                                                         } else if (strlcmp__(buffer, "UTF-8") == 0) {
        CUR_EBUF_STATE(buf_ENCODE) = ENCODE_UTF8;                                                             CUR_EBUF_STATE(buf_ENCODE) = ENCODE_UTF8;
    } else if (strlcmp__(buffer, "EUC-JP") == 0) {                                                        } else if (strlcmp__(buffer, "EUC-JP") == 0) {
        CUR_EBUF_STATE(buf_ENCODE) = ENCODE_EUCJP;                                                            CUR_EBUF_STATE(buf_ENCODE) = ENCODE_EUCJP;
    } else if (strlcmp__(buffer, "Shift_JIS") == 0) {                                                     } else if (strlcmp__(buffer, "Shift_JIS") == 0) {
        CUR_EBUF_STATE(buf_ENCODE) = ENCODE_SJIS;                                                             CUR_EBUF_STATE(buf_ENCODE) = ENCODE_SJIS;
    } else if (strlcmp__(buffer, "ISO-2022-JP") == 0) {                                                   } else if (strlcmp__(buffer, "ISO-2022-JP") == 0) {
        CUR_EBUF_STATE(buf_ENCODE) = ENCODE_JIS;                                                              CUR_EBUF_STATE(buf_ENCODE) = ENCODE_JIS;
    } else if (strlcmp__(buffer, "BINARY") == 0                                                           } else if (strlcmp__(buffer, "BINARY") == 0
     && my_guess_bin_file(full_path)) {                                                                    && my_guess_bin_file(full_path)) {
        CUR_EBUF_STATE(buf_ENCODE) = ENCODE_BINARY;                                                           CUR_EBUF_STATE(buf_ENCODE) = ENCODE_BINARY;
    } else {                                                                                              } else {
        // maybe, no nkf is available                                                                         // maybe, no nkf is available
        CUR_EBUF_STATE(buf_ENCODE) = ENCODE_ASCII;                                                            CUR_EBUF_STATE(buf_ENCODE) = ENCODE_ASCII;
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }
// nkf's guessing of binary file is too strict.                                                       // nkf's guessing of binary file is too strict.
// use my own guessing of binary file.                                                                // use my own guessing of binary file.
PRIVATE int my_guess_bin_file(const char *full_path)                                                  PRIVATE int my_guess_bin_file(const char *full_path)
{                                                                                                     {
#define BYTES_TO_BE_CHKED       MAX_PATH_LEN                                                          #define BYTES_TO_BE_CHKED       MAX_PATH_LEN
#define BYTES_READ_ONCE         MAX_PATH_LEN                                                          #define BYTES_READ_ONCE         MAX_PATH_LEN
#define BYTES_TO_BE_GUESSED_BIN 10                                                                    #define BYTES_TO_BE_GUESSED_BIN 10
    FILE *fp;                                                                                             FILE *fp;

    if ((fp = fopen(full_path, "rb")) == NULL) {                                                          if ((fp = fopen(full_path, "rb")) == NULL) {
        return -1;                                                                                            return -1;
    }                                                                                                     }
    int may_be_bin = 0;                                                                                   int may_be_bin = 0;
    int bin_bytes_found = 0;                                                                              int bin_bytes_found = 0;
    for (int bytes_chked = 0; bytes_chked < BYTES_TO_BE_CHKED; ) {                                        for (int bytes_chked = 0; bytes_chked < BYTES_TO_BE_CHKED; ) {
        unsigned char bin_buf[BYTES_READ_ONCE];                                                               unsigned char bin_buf[BYTES_READ_ONCE];
        int bytes = fread(bin_buf, 1, BYTES_READ_ONCE, fp);                                                   int bytes = fread(bin_buf, 1, BYTES_READ_ONCE, fp);
        if (bytes <= 0) {                                                                                     if (bytes <= 0) {
            break;                                                                                                break;
        }                                                                                                     }
        for (int off = 0; off < bytes; off++) {                                                               for (int off = 0; off < bytes; off++) {
            switch (bin_buf[off]) {                                                                               switch (bin_buf[off]) {
            // 07: BEL, 09: TAB, 0a: LF, 0c: FF, 0d: CR, 1b: ESC                                                  // 07: BEL, 09: TAB, 0a: LF, 0c: FF, 0d: CR, 1b: ESC
            case 0x00: case 0x01: case 0x02: case 0x03: case 0x04: case 0x05: case 0x06:                          case 0x00: case 0x01: case 0x02: case 0x03: case 0x04: case 0x05: case 0x06:
            case 0x08:                       case 0x0b:                       case 0x0e:                          case 0x08:                       case 0x0b:                       case 0x0e:
            case 0x10: case 0x11: case 0x12: case 0x13: case 0x14: case 0x15: case 0x16: case 0x17                case 0x10: case 0x11: case 0x12: case 0x13: case 0x14: case 0x15: case 0x16: case 0x17
            case 0x18: case 0x19: case 0x1a:            case 0x1c: case 0x1d: case 0x1e: case 0x1f                case 0x18: case 0x19: case 0x1a:            case 0x1c: case 0x1d: case 0x1e: case 0x1f
            case 0x7f:                                                                                            case 0x7f:
                bin_bytes_found++;                                                                                    bin_bytes_found++;
                break;                                                                                                break;
            default:                                                                                              default:
                break;                                                                                                break;
            }                                                                                                     }
        }                                                                                                     }
        if (bin_bytes_found >= BYTES_TO_BE_GUESSED_BIN) {                                                     if (bin_bytes_found >= BYTES_TO_BE_GUESSED_BIN) {
            may_be_bin = bin_bytes_found;                                                                         may_be_bin = bin_bytes_found;
            break;                                                                                                break;
        }                                                                                                     }
        bytes_chked += bytes;                                                                                 bytes_chked += bytes;
    }                                                                                                     }
    if (fclose(fp) != 0) {  // 0: OK, EOF: error                                                          if (fclose(fp) != 0) {  // 0: OK, EOF: error
        may_be_bin = -3;                                                                                      may_be_bin = -3;
    }                                                                                                     }
    return may_be_bin;                                                                                    return may_be_bin;
}                                                                                                     }
PRIVATE int load_file_into_cur_buf_nkf(const char *full_path, const char *nkf_options)                PRIVATE int load_file_into_cur_buf_nkf(const char *full_path, const char *nkf_options)
{                                                                                                     {
    char buffer[MAX_PATH_LEN+1];                                                                          char buffer[MAX_PATH_LEN+1];
    FILE *fp;                                                                                             FILE *fp;
    int lines;                                                                                            int lines;

    snprintf_(buffer, MAX_PATH_LEN+1, "nkf %s \"%s\"", nkf_options, full_path);                           snprintf_(buffer, MAX_PATH_LEN+1, "nkf %s \"%s\"", nkf_options, full_path);
    if ((fp = popen(buffer, "r")) <= 0) {                                                                 if ((fp = popen(buffer, "r")) <= 0) {
        disp_status_bar_err(_("Can not read-open file [%s]: %s"),                                             disp_status_bar_err(_("Can not read-open file [%s]: %s"),
         shrink_str_to_scr_static(full_path), strerror(errno));                                                shrink_str_to_scr_static(full_path), strerror(errno));
        return -1;                                                                                            return -1;
    }                                                                                                     }
    lines = load_into_cur_buf_fp(fp);                                                                     lines = load_into_cur_buf_fp(fp);
    if (pclose(fp) == -1) { // -1: error                                                                  if (pclose(fp) == -1) { // -1: error
        lines = -1;                                                                                           lines = -1;
    }                                                                                                     }
    return lines;                                                                                         return lines;
}                                                                                                     }
#endif // USE_NKF                                                                                     #endif // USE_NKF

PRIVATE int load_file_into_cur_buf_ascii(const char *full_path)                                       PRIVATE int load_file_into_cur_buf_ascii(const char *full_path)
{                                                                                                     {
    FILE *fp;                                                                                             FILE *fp;
    int lines;                                                                                            int lines;

    if ((fp = fopen(full_path, "rb")) == NULL) {                                                          if ((fp = fopen(full_path, "rb")) == NULL) {
        disp_status_bar_err(_("Can not read-open file [%s]: %s"),                                             disp_status_bar_err(_("Can not read-open file [%s]: %s"),
         shrink_str_to_scr_static(full_path), strerror(errno));                                                shrink_str_to_scr_static(full_path), strerror(errno));
        return -1;                                                                                            return -1;
    }                                                                                                     }
    lines = load_into_cur_buf_fp(fp);                                                                     lines = load_into_cur_buf_fp(fp);
    if (fclose(fp) != 0) {  // 0: OK, EOF: error                                                          if (fclose(fp) != 0) {  // 0: OK, EOF: error
        lines = -1;                                                                                           lines = -1;
    }                                                                                                     }
    return lines;                                                                                         return lines;
}                                                                                                     }

PRIVATE int load_file_into_cur_buf_binary(const char *full_path)                                      PRIVATE int load_file_into_cur_buf_binary(const char *full_path)
{                                                                                                     {
#define BIN_LINE_LEN    64                                                                            #define BIN_LINE_LEN    64
#define BIN_BASE_CODE   0x2800  // use "Braille pattern" to show binary bytes                         #define BIN_BASE_CODE   0x2800  // use "Braille pattern" to show binary bytes
    FILE *fp;                                                                                             FILE *fp;
    if ((fp = fopen(full_path, "rb")) == NULL) {                                                          if ((fp = fopen(full_path, "rb")) == NULL) {
        disp_status_bar_err(_("Can not read-open file [%s]: %s"),                                             disp_status_bar_err(_("Can not read-open file [%s]: %s"),
         shrink_str_to_scr_static(full_path), strerror(errno));                                                shrink_str_to_scr_static(full_path), strerror(errno));
        return -1;                                                                                            return -1;
    }                                                                                                     }
    int lines = 0;                                                                                        int lines = 0;
    for ( ; ; ) {                                                                                         for ( ; ; ) {
        unsigned char bin_buf[BIN_LINE_LEN];                                                                  unsigned char bin_buf[BIN_LINE_LEN];
        int bytes = fread(bin_buf, 1, BIN_LINE_LEN, fp);                                                      int bytes = fread(bin_buf, 1, BIN_LINE_LEN, fp);
        if (bytes <= 0) {                                                                                     if (bytes <= 0) {
            break;                                                                                                break;
        }                                                                                                     }
        char text_buf[BIN_LINE_LEN * MAX_UTF8C_BYTES + 1];                                                    char text_buf[BIN_LINE_LEN * MAX_UTF8C_BYTES + 1];
        strcpy(text_buf, "");                                                                                 strcpy(text_buf, "");
        for (int off = 0; off < bytes; off++) {                                                               for (int off = 0; off < bytes; off++) {
            unsigned char byte = bin_buf[off];                                                                    unsigned char byte = bin_buf[off];
            char utf8c[MAX_UTF8C_BYTES+1];                                                                        char utf8c[MAX_UTF8C_BYTES+1];
            int utf8c_len;                                                                                        int utf8c_len;
            if (byte < ' ' || 0x7f <= byte) {                                                                     if (byte < ' ' || 0x7f <= byte) {
                // 0x00 ~ 0x1f --> 0xXX00 ~ 0xXX1f, 0x7f ~ 0xff --> 0xXX7f ~ 0xXXff                                   // 0x00 ~ 0x1f --> 0xXX00 ~ 0xXX1f, 0x7f ~ 0xff --> 0xXX7f ~ 0xXXff
                utf8c_len = utf8c_encode(BIN_BASE_CODE + byte, utf8c);                                                utf8c_len = utf8c_encode(BIN_BASE_CODE + byte, utf8c);
            } else {                                                                                              } else {
                utf8c[0] = byte;                                                                                      utf8c[0] = byte;
                utf8c[1] = '\0';                                                                                      utf8c[1] = '\0';
                utf8c_len = 1;                                                                                        utf8c_len = 1;
            }                                                                                                     }
            strlncat__(text_buf, BIN_LINE_LEN * MAX_UTF8C_BYTES, utf8c, utf8c_len);                               strlncat__(text_buf, BIN_LINE_LEN * MAX_UTF8C_BYTES, utf8c, utf8c_len);
        }                                                                                                     }
        lines++;                                                                                              lines++;
        append_string_to_cur_edit_buf(text_buf);                                                              append_string_to_cur_edit_buf(text_buf);
    }                                                                                                     }
    if (fclose(fp) != 0) {  // 0: OK, EOF: error                                                          if (fclose(fp) != 0) {  // 0: OK, EOF: error
        lines = -1;                                                                                           lines = -1;
    }                                                                                                     }
    return lines;                                                                                         return lines;
}                                                                                                     }

PRIVATE void fgetc_buffered_clear(void);                                                              PRIVATE void fgetc_buffered_clear(void);
PRIVATE int fgetc_buffered(FILE *fp);                                                                 PRIVATE int fgetc_buffered(FILE *fp);

PRIVATE inline void load_into_cur_buf_append_line(be_line_t* line, char *line_buf, int* len,          PRIVATE inline void load_into_cur_buf_append_line(be_line_t* line, char *line_buf, int* len,
 int* lines_read)                                                                                      int* lines_read)
{                                                                                                     {
    line_insert_with_string_len_before(line, line_buf, *len);                                             line_insert_with_string_len_before(line, line_buf, *len);
    *len = 0;                                                                                             *len = 0;
    line_buf[*len] = '\0';                                                                                line_buf[*len] = '\0';
    (*lines_read)++;                                                                                      (*lines_read)++;
}                                                                                                     }
PRIVATE int load_into_cur_buf_fp(FILE *fp)                                                            PRIVATE int load_into_cur_buf_fp(FILE *fp)
{                                                                                                     {
    int file_format_idx = 0;    // 0 = nix, 1 = Mac, 2 = DOS                                              int file_format_idx = 0;    // 0 = nix, 1 = Mac, 2 = DOS
    int chr_int;            // read character                                                             int chr_int;            // read character
    int prev_chr = '\0';    // previous read character                                                    int prev_chr = '\0';    // previous read character
    char line_buf[MAX_EDIT_LINE_LEN+1];                                                                   char line_buf[MAX_EDIT_LINE_LEN+1];
    int len;                                                                                              int len;
    int lines_read = 0;                                                                                   int lines_read = 0;
    be_line_t *line;                                                                                      be_line_t *line;

    line = CUR_EDIT_BUF_BOT_ANCH;                                                                         line = CUR_EDIT_BUF_BOT_ANCH;
    len = 0;                                                                                              len = 0;
    line_buf[len] = '\0';                                                                                 line_buf[len] = '\0';
    fgetc_buffered_clear();                                                                               fgetc_buffered_clear();
    for ( ; ; ) {                                                                                         for ( ; ; ) {
        chr_int = fgetc_buffered(fp);                                                                         chr_int = fgetc_buffered(fp);
        switch (chr_int) {                                                                                    switch (chr_int) {
        case '\n':                                                                                            case '\n':
            if (prev_chr == '\r') {                                                                               if (prev_chr == '\r') {
                file_format_idx = 2;    // LF after CR (DOS format)                                                   file_format_idx = 2;    // LF after CR (DOS format)
            } else {                                                                                              } else {
                // LF (nix format)                                                                                    // LF (nix format)
                load_into_cur_buf_append_line(line, line_buf, &len, &lines_read);                                     load_into_cur_buf_append_line(line, line_buf, &len, &lines_read);
            }                                                                                                     }
            break;                                                                                                break;
        case '\r':                                                                                            case '\r':
            // CR (DOS/Mac format)                                                                                // CR (DOS/Mac format)
            file_format_idx = 1;        // line end is only CR (Mac format)                                       file_format_idx = 1;        // line end is only CR (Mac format)
            load_into_cur_buf_append_line(line, line_buf, &len, &lines_read);                                     load_into_cur_buf_append_line(line, line_buf, &len, &lines_read);
            break;                                                                                                break;
        default:                                                                                              default:
            if (len >= MAX_EDIT_LINE_LEN) {                                                                       if (len >= MAX_EDIT_LINE_LEN) {
                load_into_cur_buf_append_line(line, line_buf, &len, &lines_read);                                     load_into_cur_buf_append_line(line, line_buf, &len, &lines_read);
            }                                                                                                     }
            line_buf[len++] = chr_int;                                                                            line_buf[len++] = chr_int;
            line_buf[len] = '\0';                                                                                 line_buf[len] = '\0';
            break;                                                                                                break;
        case EOF:                                                                                             case EOF:
            if (len > 0) {                                                                                        if (len > 0) {
                load_into_cur_buf_append_line(line, line_buf, &len, &lines_read);                                     load_into_cur_buf_append_line(line, line_buf, &len, &lines_read);
            }                                                                                                     }
            break;                                                                                                break;
        }                                                                                                     }
        prev_chr = chr_int;                                                                                   prev_chr = chr_int;
        if (chr_int == EOF)                                                                                   if (chr_int == EOF)
            break;                                                                                                break;
    }                                                                                                     }
    switch (file_format_idx) {                                                                            switch (file_format_idx) {
    default:                                                                                              default:
    case 0:                                                                                               case 0:
        set_eol(EOL_NIX);                                                                                     set_eol(EOL_NIX);
        break;                                                                                                break;
    case 1:                                                                                               case 1:
        set_eol(EOL_MAC);                                                                                     set_eol(EOL_MAC);
        break;                                                                                                break;
    case 2:                                                                                               case 2:
        set_eol(EOL_DOS);                                                                                     set_eol(EOL_DOS);
        break;                                                                                                break;
    }                                                                                                     }
    if (check_break_key()) {                                                                              if (check_break_key()) {
        lines_read = -1;                                                                                      lines_read = -1;
    }                                                                                                     }
    // 0 bytes of file returns 0                                                                          // 0 bytes of file returns 0
    return lines_read;  // >= 0: succeeded, < 0: error or stopped                                         return lines_read;  // >= 0: succeeded, < 0: error or stopped
}                                                                                                     }

PRIVATE char fgetc_buffered_buf[MAX_EDIT_LINE_LEN+1];                                                 PRIVATE char fgetc_buffered_buf[MAX_EDIT_LINE_LEN+1];
PRIVATE int fgetc_buffered_read_len = 0;                                                              PRIVATE int fgetc_buffered_read_len = 0;
PRIVATE int fgetc_buffered_byte_idx = 0;                                                              PRIVATE int fgetc_buffered_byte_idx = 0;

PRIVATE void fgetc_buffered_clear(void)                                                               PRIVATE void fgetc_buffered_clear(void)
{                                                                                                     {
    fgetc_buffered_read_len = 0;                                                                          fgetc_buffered_read_len = 0;
    fgetc_buffered_byte_idx = 0;                                                                          fgetc_buffered_byte_idx = 0;
}                                                                                                     }
PRIVATE int fgetc_buffered(FILE *fp)                                                                  PRIVATE int fgetc_buffered(FILE *fp)
{                                                                                                     {
    int chr;                                                                                              int chr;

    if (fgetc_buffered_byte_idx >= fgetc_buffered_read_len) {                                             if (fgetc_buffered_byte_idx >= fgetc_buffered_read_len) {
        if (check_break_key()) {                                                                              if (check_break_key()) {
            return EOF;                                                                                           return EOF;
        }                                                                                                     }
        if ((fgetc_buffered_read_len = fread(fgetc_buffered_buf, 1, MAX_EDIT_LINE_LEN, fp)) <= 0)             if ((fgetc_buffered_read_len = fread(fgetc_buffered_buf, 1, MAX_EDIT_LINE_LEN, fp)) <= 0) 
            return EOF;                                                                                           return EOF;
        }                                                                                                     }
        fgetc_buffered_byte_idx = 0;                                                                          fgetc_buffered_byte_idx = 0;
    }                                                                                                     }
    chr = (unsigned char)fgetc_buffered_buf[fgetc_buffered_byte_idx++];                                   chr = (unsigned char)fgetc_buffered_buf[fgetc_buffered_byte_idx++];
#define NUL_REPLACE_CHR     ' '     // replace '\0' to ' '                                            #define NUL_REPLACE_CHR     ' '     // replace '\0' to ' '
    if (chr == '\0') {                                                                                    if (chr == '\0') {
        chr = NUL_REPLACE_CHR;      // replace '\0'                                                           chr = NUL_REPLACE_CHR;      // replace '\0'
    }                                                                                                     }
    return chr;                                                                                           return chr;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

#ifdef USE_NKF                                                                                        #ifdef USE_NKF
PRIVATE int save_cur_buf_to_file_nkf(const char *file_path, const char *nkf_options)                  PRIVATE int save_cur_buf_to_file_nkf(const char *file_path, const char *nkf_options)
{                                                                                                     {
    char buffer[MAX_PATH_LEN+1] = "";                                                                     char buffer[MAX_PATH_LEN+1] = "";
    FILE *fp = 0;                                                                                         FILE *fp = 0;
    int lines;                                                                                            int lines;

    snprintf_(buffer, MAX_PATH_LEN+1, "nkf %s >\"%s\"", nkf_options, file_path);                          snprintf_(buffer, MAX_PATH_LEN+1, "nkf %s >\"%s\"", nkf_options, file_path);
    if ((fp = popen(buffer, "w")) <= 0) {                                                                 if ((fp = popen(buffer, "w")) <= 0) {
        disp_status_bar_err(_("Can not write-open file [%s]: %s"),                                            disp_status_bar_err(_("Can not write-open file [%s]: %s"),
         shrink_str_to_scr_static(file_path), strerror(errno));                                                shrink_str_to_scr_static(file_path), strerror(errno));
        return -1;                                                                                            return -1;
    }                                                                                                     }
    if ((lines = save_cur_buf_to_fp(file_path, fp)) < 0) {                                                if ((lines = save_cur_buf_to_fp(file_path, fp)) < 0) {
        lines = -2;                                                                                           lines = -2;
    }                                                                                                     }
    if (pclose(fp) == -1) { // -1: error                                                                  if (pclose(fp) == -1) { // -1: error
        disp_status_bar_err(_("Can not close file [%s]: %s"),                                                 disp_status_bar_err(_("Can not close file [%s]: %s"),
         shrink_str_to_scr_static(file_path), strerror(errno));                                                shrink_str_to_scr_static(file_path), strerror(errno));
        lines = -3;                                                                                           lines = -3;
    }                                                                                                     }
    return lines;                                                                                         return lines;
}                                                                                                     }
#endif // USE_NKF                                                                                     #endif // USE_NKF

PRIVATE int save_cur_buf_to_file_ascii(const char *file_path)                                         PRIVATE int save_cur_buf_to_file_ascii(const char *file_path)
{                                                                                                     {
    FILE *fp = 0;                                                                                         FILE *fp = 0;
    int lines;                                                                                            int lines;

    if ((fp = fopen(file_path, "wb")) == NULL) {                                                          if ((fp = fopen(file_path, "wb")) == NULL) {
        disp_status_bar_err(_("Can not write-open file [%s]: %s"),                                            disp_status_bar_err(_("Can not write-open file [%s]: %s"),
         shrink_str_to_scr_static(file_path), strerror(errno));                                                shrink_str_to_scr_static(file_path), strerror(errno));
        return -1;                                                                                            return -1;
    }                                                                                                     }
    if ((lines = save_cur_buf_to_fp(file_path, fp)) < 0) {                                                if ((lines = save_cur_buf_to_fp(file_path, fp)) < 0) {
        lines = -2;                                                                                           lines = -2;
    }                                                                                                     }
    if (fclose(fp) != 0) {                                                                                if (fclose(fp) != 0) {
        disp_status_bar_err(_("Can not close file [%s]: %s"),                                                 disp_status_bar_err(_("Can not close file [%s]: %s"),
         shrink_str_to_scr_static(file_path), strerror(errno));                                                shrink_str_to_scr_static(file_path), strerror(errno));
        lines = -3;                                                                                           lines = -3;
    }                                                                                                     }
    return lines;                                                                                         return lines;
}                                                                                                     }

PRIVATE int save_cur_buf_to_file_binary(const char *file_path)                                        PRIVATE int save_cur_buf_to_file_binary(const char *file_path)
{                                                                                                     {
    FILE *fp = 0;                                                                                         FILE *fp = 0;
    if ((fp = fopen(file_path, "wb")) == NULL) {                                                          if ((fp = fopen(file_path, "wb")) == NULL) {
        disp_status_bar_err(_("Can not write-open file [%s]: %s"),                                            disp_status_bar_err(_("Can not write-open file [%s]: %s"),
         shrink_str_to_scr_static(file_path), strerror(errno));                                                shrink_str_to_scr_static(file_path), strerror(errno));
        return -1;                                                                                            return -1;
    }                                                                                                     }
    int lines = 0;                                                                                        int lines = 0;
    for (const be_line_t *line = CUR_EDIT_BUF_TOP_LINE; IS_NODE_INT(line);                                for (const be_line_t *line = CUR_EDIT_BUF_TOP_LINE; IS_NODE_INT(line);
     line = NODE_NEXT(line)) {                                                                             line = NODE_NEXT(line)) {
        if (IS_NODE_BOT(line) && (line_data_len(line) == 0)) {                                                if (IS_NODE_BOT(line) && (line_data_len(line) == 0)) {
            break;          // do not output the magic line                                                       break;          // do not output the magic line
        }                                                                                                     }
        unsigned char bin_buf[BIN_LINE_LEN];                                                                  unsigned char bin_buf[BIN_LINE_LEN];
        int line_len = strlen_path(line->data);                                                               int line_len = strlen_path(line->data);
        int bin_off = 0;                                                                                      int bin_off = 0;
        for (int text_off = 0; text_off < line_len; ) {                                                       for (int text_off = 0; text_off < line_len; ) {
            bin_buf[bin_off++] = (utf8c_decode(&(line->data[text_off])) - BIN_BASE_CODE);                         bin_buf[bin_off++] = (utf8c_decode(&(line->data[text_off])) - BIN_BASE_CODE);
            text_off += utf8c_bytes(&(line->data[text_off]));                                                     text_off += utf8c_bytes(&(line->data[text_off]));
            if ((bin_off >= BIN_LINE_LEN) || (text_off >= line_len)) {                                            if ((bin_off >= BIN_LINE_LEN) || (text_off >= line_len)) {
                int bytes = fwrite(bin_buf, 1, bin_off, fp);                                                          int bytes = fwrite(bin_buf, 1, bin_off, fp);
                if (bytes < bin_off) {                                                                                if (bytes < bin_off) {
                    disp_status_bar_err(_("Can not write file [%s]: %s"),                                                 disp_status_bar_err(_("Can not write file [%s]: %s"),
                     shrink_str_to_scr_static(file_path), strerror(errno));                                                shrink_str_to_scr_static(file_path), strerror(errno));
                    lines = -2;                                                                                           lines = -2;
                    break;                                                                                                break;
                }                                                                                                     }
                bin_off = 0;                                                                                          bin_off = 0;
                lines++;                                                                                              lines++;
            }                                                                                                     }
        }                                                                                                     }
    }                                                                                                     }
    if (fclose(fp) != 0) {                                                                                if (fclose(fp) != 0) {
        disp_status_bar_err(_("Can not close file [%s]: %s"),                                                 disp_status_bar_err(_("Can not close file [%s]: %s"),
         shrink_str_to_scr_static(file_path), strerror(errno));                                                shrink_str_to_scr_static(file_path), strerror(errno));
        lines = -3;                                                                                           lines = -3;
    }                                                                                                     }
    return lines;                                                                                         return lines;
}                                                                                                     }

PRIVATE int save_cur_buf_to_fp(const char *file_path, FILE *fp)                                       PRIVATE int save_cur_buf_to_fp(const char *file_path, FILE *fp)
{                                                                                                     {
    int lines_written;                                                                                    int lines_written;
    const be_line_t *line;                                                                                const be_line_t *line;
    int line_len;                                                                                         int line_len;
    long size;                                                                                            long size;

    lines_written = 0;                                                                                    lines_written = 0;
    for (line = CUR_EDIT_BUF_TOP_LINE; IS_NODE_INT(line); line = NODE_NEXT(line)) {                       for (line = CUR_EDIT_BUF_TOP_LINE; IS_NODE_INT(line); line = NODE_NEXT(line)) {
        if (IS_NODE_BOT(line) && line_data_len(line) == 0)                                                    if (IS_NODE_BOT(line) && line_data_len(line) == 0)
            break;          // do not output the magic line                                                       break;          // do not output the magic line
        line_len = line_data_len(line);                                                                       line_len = line_data_len(line);
        size = fwrite(line->data, 1, line_len, fp);                                                           size = fwrite(line->data, 1, line_len, fp);
        if (size < line_len) {                                                                                if (size < line_len) {
            disp_status_bar_err(_("Can not write file [%s]: %s"),                                                 disp_status_bar_err(_("Can not write file [%s]: %s"),
             shrink_str_to_scr_static(file_path), strerror(errno));                                                shrink_str_to_scr_static(file_path), strerror(errno));
            return -1;                                                                                            return -1;
        }                                                                                                     }
        switch (CUR_EBUF_STATE(buf_EOL)) {                                                                    switch (CUR_EBUF_STATE(buf_EOL)) {
        default:                                                                                              default:
        case EOL_NIX:                                                                                         case EOL_NIX:
            putc('\n', fp);                                                                                       putc('\n', fp);
            break;                                                                                                break;
        case EOL_MAC:                                                                                         case EOL_MAC:
            putc('\r', fp);                                                                                       putc('\r', fp);
            break;                                                                                                break;
        case EOL_DOS:                                                                                         case EOL_DOS:
            putc('\r', fp);                                                                                       putc('\r', fp);
            putc('\n', fp);                                                                                       putc('\n', fp);
            break;                                                                                                break;
        }                                                                                                     }
        lines_written++;                                                                                      lines_written++;
    }                                                                                                     }
    return lines_written;                                                                                 return lines_written;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
PRIVATE int files_loaded = -1;  // -1: no file switched/loaded, 0: reloaded, 1: loaded                PRIVATE int files_loaded = -1;  // -1: no file switched/loaded, 0: reloaded, 1: loaded
void clear_files_loaded(void)                                                                         void clear_files_loaded(void)
{                                                                                                     {
    files_loaded = -1;                                                                                    files_loaded = -1;
}                                                                                                     }
int add_files_loaded(int files) // files = 0: not loaded but switched                                 int add_files_loaded(int files) // files = 0: not loaded but switched
{                                                                                                     {
    if (files_loaded < 0) {                                                                               if (files_loaded < 0) {
        files_loaded = 0;                                                                                     files_loaded = 0;
    }                                                                                                     }
    return files_loaded += files;                                                                         return files_loaded += files;
}                                                                                                     }
int get_files_loaded(void)                                                                            int get_files_loaded(void)
{                                                                                                     {
    return files_loaded;                                                                                  return files_loaded;
}                                                                                                     }
void disp_files_loaded_if_ge_0(void)                                                                  void disp_files_loaded_if_ge_0(void)
{                                                                                                     {
    if (files_loaded >= 0) {                                                                              if (files_loaded >= 0) {
        disp_files_loaded();                                                                                  disp_files_loaded();
    }                                                                                                     }
}                                                                                                     }
void disp_files_loaded(void)                                                                          void disp_files_loaded(void)
{                                                                                                     {
    disp_status_bar_done(P_(_("%d file loaded"),                                                          disp_status_bar_done(P_(_("%d file loaded"),
                            _("%d files loaded"),                                                                                 _("%d files loaded"),
                            _("%d filess loaded"),                                                                                _("%d filess loaded"),
                            _("%d filesss loaded"),                                                                               _("%d filesss loaded"),
     files_loaded), files_loaded);                                                                         files_loaded), files_loaded);
}                                                                                                     }

// End of fileio.c                                                                                    // End of fileio.c
kdiff3 ../old/be/filer.c filer.c #========================
/**************************************************************************                           /**************************************************************************
 *   filer.c                                                              *                            *   filer.c                                                              *
 *                                                                        *                            *                                                                        *
 *   Copyright (C) 1999-2003 Chris Allegretta                             *                            *   Copyright (C) 1999-2003 Chris Allegretta                             *
 *                                                                        *                            *                                                                        *
 *   This program is free software; you can redistribute it and/or modify *                            *   This program is free software; you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published by *                            *   it under the terms of the GNU General Public License as published by *
 *   the Free Software Foundation; either version 2, or (at your option)  *                            *   the Free Software Foundation; either version 2, or (at your option)  *
 *   any later version.                                                   *                            *   any later version.                                                   *
 *                                                                        *                            *                                                                        *
 *   This program is distributed in the hope that it will be useful,      *                            *   This program is distributed in the hope that it will be useful,      *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *                            *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *                            *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 *   GNU General Public License for more details.                         *                            *   GNU General Public License for more details.                         *
 *                                                                        *                            *                                                                        *
 *   You should have received a copy of the GNU General Public License    *                            *   You should have received a copy of the GNU General Public License    *
 *   along with this program; if not, write to the Free Software          *                            *   along with this program; if not, write to the Free Software          *
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *                            *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *
 *                                                                        *                            *                                                                        *
 **************************************************************************/                           **************************************************************************/

#include "headers.h"                                                                                  #include "headers.h"

#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER

filer_panes_t *cur_filer_panes;     // Current Filer Panes                                            filer_panes_t *cur_filer_panes;     // Current Filer Panes

PRIVATE char filer_cur_path[MAX_PATH_LEN+1];    // /cur/directory                                     PRIVATE char filer_cur_path[MAX_PATH_LEN+1];    // /cur/directory
filer_do_next_t filer_do_next = FILER_DO_NOTHING;                                                     filer_do_next_t filer_do_next = FILER_DO_NOTHING;

PRIVATE void init_filer_view(filer_view_t *fv, const char *cur_dir);                                  PRIVATE void init_filer_view(filer_view_t *fv, const char *cur_dir);
PRIVATE filer_view_t *get_filer_view(int pane_idx);                                                   PRIVATE filer_view_t *get_filer_view(int pane_idx);
PRIVATE int get_other_filer_pane_idx(int filer_pane_idx);                                             PRIVATE int get_other_filer_pane_idx(int filer_pane_idx);

PRIVATE int filer_main_loop(const char *dir, const char *filter, char *path_buf, int buf_len);        PRIVATE int filer_main_loop(const char *dir, const char *filter, char *path_buf, int buf_len);
PRIVATE int check_filer_cur_dir(void);                                                                PRIVATE int check_filer_cur_dir(void);
PRIVATE int update_all_file_list(const char *filter, int force_update);                               PRIVATE int update_all_file_list(const char *filter, int force_update);
PRIVATE int update_file_list(filer_view_t *fv, const char *filter, int force_update);                 PRIVATE int update_file_list(filer_view_t *fv, const char *filter, int force_update);

PRIVATE void filer_disp_title_bar(const char *path,                                                   PRIVATE void filer_disp_title_bar(const char *path,
 int cur_idx, int files_selected, int files_total);                                                    int cur_idx, int files_selected, int files_total);
PRIVATE int disp_file_list(filer_view_t *fv, int cur_pane);                                           PRIVATE int disp_file_list(filer_view_t *fv, int cur_pane);

PRIVATE void disp_key_list_filer(void);                                                               PRIVATE void disp_key_list_filer(void);

void init_filer_panes(filer_panes_t *fps, const char *cur_dir)                                        void init_filer_panes(filer_panes_t *fps, const char *cur_dir)
{                                                                                                     {
    cur_filer_panes = fps;                                                                                cur_filer_panes = fps;
    strlcpy__(cur_filer_panes->org_cur_dir, cur_dir, MAX_PATH_LEN);                                       strlcpy__(cur_filer_panes->org_cur_dir, cur_dir, MAX_PATH_LEN);
    set_filer_cur_pane_idx(0);                                                                            set_filer_cur_pane_idx(0);
    for (int filer_pane_idx = 0; filer_pane_idx < FILER_PANES; filer_pane_idx++) {                        for (int filer_pane_idx = 0; filer_pane_idx < FILER_PANES; filer_pane_idx++) {
        // set initial value                                                                                  // set initial value
        init_filer_view(&cur_filer_panes->filer_views[filer_pane_idx], cur_dir);                              init_filer_view(&cur_filer_panes->filer_views[filer_pane_idx], cur_dir);
    }                                                                                                     }
}                                                                                                     }
filer_panes_t *inherit_filer_panes(filer_panes_t *next_fps)                                           filer_panes_t *inherit_filer_panes(filer_panes_t *next_fps)
{                                                                                                     {
    int cur_pane_idx = get_filer_cur_pane_idx();                                                          int cur_pane_idx = get_filer_cur_pane_idx();
    filer_panes_t *prev_fps = cur_filer_panes;  // previous filer panes                                   filer_panes_t *prev_fps = cur_filer_panes;  // previous filer panes
    init_filer_panes(next_fps, prev_fps->filer_views[get_filer_cur_pane_idx()].cur_dir);                  init_filer_panes(next_fps, prev_fps->filer_views[get_filer_cur_pane_idx()].cur_dir);
    set_filer_cur_pane_idx(cur_pane_idx);                                                                 set_filer_cur_pane_idx(cur_pane_idx);
    for (int filer_pane_idx = 0; filer_pane_idx < FILER_PANES; filer_pane_idx++) {                        for (int filer_pane_idx = 0; filer_pane_idx < FILER_PANES; filer_pane_idx++) {
        // set initial value                                                                                  // set initial value
        init_filer_view(&next_fps->filer_views[filer_pane_idx],                                               init_filer_view(&next_fps->filer_views[filer_pane_idx],
         prev_fps->filer_views[filer_pane_idx].cur_dir);                                                       prev_fps->filer_views[filer_pane_idx].cur_dir);
        next_fps->filer_views[filer_pane_idx].cur_sel_idx =                                                   next_fps->filer_views[filer_pane_idx].cur_sel_idx = 
         prev_fps->filer_views[filer_pane_idx].cur_sel_idx;                                                    prev_fps->filer_views[filer_pane_idx].cur_sel_idx;
    }                                                                                                     }
    return prev_fps;                                                                                      return prev_fps;
}                                                                                                     }
void free_filer_panes(filer_panes_t *fps, filer_panes_t *prev_fps)                                    void free_filer_panes(filer_panes_t *fps, filer_panes_t *prev_fps)
{                                                                                                     {
    for (int filer_pane_idx = 0; filer_pane_idx < FILER_PANES; filer_pane_idx++) {                        for (int filer_pane_idx = 0; filer_pane_idx < FILER_PANES; filer_pane_idx++) {
        free_file_list(&fps->filer_views[filer_pane_idx]);                                                    free_file_list(&fps->filer_views[filer_pane_idx]);
    }                                                                                                     }
    if (prev_fps) {                                                                                       if (prev_fps) {
        cur_filer_panes = prev_fps;                                                                           cur_filer_panes = prev_fps;
    }                                                                                                     }
}                                                                                                     }
void set_filer_cur_pane_idx(int cur_pane_idx)                                                         void set_filer_cur_pane_idx(int cur_pane_idx)
{                                                                                                     {
    cur_filer_panes->cur_pane_idx = cur_pane_idx;                                                         cur_filer_panes->cur_pane_idx = cur_pane_idx;
}                                                                                                     }
int get_filer_cur_pane_idx()                                                                          int get_filer_cur_pane_idx()
{                                                                                                     {
    int cur_pane_idx = cur_filer_panes->cur_pane_idx;                                                     int cur_pane_idx = cur_filer_panes->cur_pane_idx;
    if (cur_pane_idx < 0) {                                                                               if (cur_pane_idx < 0) {
        cur_pane_idx = 0;                                                                                     cur_pane_idx = 0;
    }                                                                                                     }
    return cur_pane_idx;                                                                                  return cur_pane_idx;
}                                                                                                     }
PRIVATE void init_filer_view(filer_view_t *fv, const char *cur_dir)                                   PRIVATE void init_filer_view(filer_view_t *fv, const char *cur_dir)
{                                                                                                     {
    memset(fv, 0x00, sizeof(*fv));                                                                        memset(fv, 0x00, sizeof(*fv));
    strlcpy__(fv->cur_dir, cur_dir, MAX_PATH_LEN);                                                        strlcpy__(fv->cur_dir, cur_dir, MAX_PATH_LEN);
    strcpy__(fv->cur_filter, "");                                                                         strcpy__(fv->cur_filter, "");
    strcpy__(fv->listed_dir, "");                                                                         strcpy__(fv->listed_dir, "");
    fv->file_list_entries = 0;                                                                            fv->file_list_entries = 0;
    fv->file_list = NULL;                                                                                 fv->file_list = NULL;
    fv->cur_sel_idx = -1;                                                                                 fv->cur_sel_idx = -1;
    fv->top_idx = 0;                                                                                      fv->top_idx = 0;
    strcpy__(fv->prev_dir, "");                                                                           strcpy__(fv->prev_dir, "");
    strcpy__(fv->next_file, "");                                                                          strcpy__(fv->next_file, "");
}                                                                                                     }
PRIVATE filer_view_t *get_filer_view(int pane_idx)                                                    PRIVATE filer_view_t *get_filer_view(int pane_idx)
{                                                                                                     {
    if (pane_idx < 0) {                                                                                   if (pane_idx < 0) {
        return get_cur_filer_view();                                                                          return get_cur_filer_view();
    }                                                                                                     }
    return &cur_filer_panes->filer_views[pane_idx];                                                       return &cur_filer_panes->filer_views[pane_idx];
}                                                                                                     }
filer_view_t *get_cur_filer_view(void)                                                                filer_view_t *get_cur_filer_view(void)
{                                                                                                     {
    return &cur_filer_panes->filer_views[get_filer_cur_pane_idx()];                                       return &cur_filer_panes->filer_views[get_filer_cur_pane_idx()];
}                                                                                                     }

filer_view_t *get_other_filer_view(void)                                                              filer_view_t *get_other_filer_view(void)
{                                                                                                     {
    return &cur_filer_panes->filer_views[get_other_filer_pane_idx(get_filer_cur_pane_idx())];             return &cur_filer_panes->filer_views[get_other_filer_pane_idx(get_filer_cur_pane_idx())];
}                                                                                                     }
PRIVATE int get_other_filer_pane_idx(int filer_pane_idx)                                              PRIVATE int get_other_filer_pane_idx(int filer_pane_idx)
{                                                                                                     {
    return filer_pane_idx == 0 ? 1 : 0;                                                                   return filer_pane_idx == 0 ? 1 : 0;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

int call_filer(int push_win, int list_mode,                                                           int call_filer(int push_win, int list_mode,
 const char *dir, const char *filter, char *path_buf, int buf_len)                                     const char *dir, const char *filter, char *path_buf, int buf_len)
{                                                                                                     {
    strcpy(path_buf, "");                                                                                 strcpy(path_buf, "");
flf_d_printf("push: %d, list: %d, dir: %s, filter: [%s], path: [%s], len: %d\n",                      flf_d_printf("push: %d, list: %d, dir: %s, filter: [%s], path: [%s], len: %d\n",
 push_win, list_mode, dir, filter, path_buf, buf_len);                                                 push_win, list_mode, dir, filter, path_buf, buf_len);
    filer_panes_t *prev_fps = NULL;                                                                       filer_panes_t *prev_fps = NULL;
    filer_panes_t next_filer_panes;                                                                       filer_panes_t next_filer_panes;
    app_mode_t appmode_save;                                                                              app_mode_t appmode_save;

    if (push_win) {                                                                                       if (push_win) {
        win_push_win_size();                                                                                  win_push_win_size();

        prev_fps = inherit_filer_panes(&next_filer_panes);                                                    prev_fps = inherit_filer_panes(&next_filer_panes);
    }                                                                                                     }

    memcpy(&appmode_save, &app_mode__, sizeof(app_mode__));                                               memcpy(&appmode_save, &app_mode__, sizeof(app_mode__));
    SET_APPMD(app_EDITOR_FILER);                                                                          SET_APPMD(app_EDITOR_FILER);
    SET_APPMD_VAL(app_LIST_MODE, list_mode);                                                              SET_APPMD_VAL(app_LIST_MODE, list_mode);
    SET_APPMD_VAL(ed_EDITOR_PANES, 0);                                                                    SET_APPMD_VAL(ed_EDITOR_PANES, 0);
    set_app_func_key_table();                                                                             set_app_func_key_table();
    set_work_space_color_on_app_list_mode();                                                              set_work_space_color_on_app_list_mode();

flf_d_printf("push_win:%d, list_mode:%d\n", push_win, list_mode);                                     flf_d_printf("push_win:%d, list_mode:%d\n", push_win, list_mode);
flf_d_printf("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");                                         flf_d_printf("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
    int ret = filer_main_loop(dir, filter, path_buf, buf_len);                                            int ret = filer_main_loop(dir, filter, path_buf, buf_len);
flf_d_printf(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n");                                         flf_d_printf(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n");
flf_d_printf("ret: %d\n", ret);                                                                       flf_d_printf("ret: %d\n", ret);
    filer_do_next = FILER_DO_NOTHING;   // for caller of call_filer(), clear "editor_quit"                filer_do_next = FILER_DO_NOTHING;   // for caller of call_filer(), clear "editor_quit"

    SET_APPMD_VAL(app_EDITOR_FILER, GET_APPMD_PTR(&appmode_save, app_EDITOR_FILER));                      SET_APPMD_VAL(app_EDITOR_FILER, GET_APPMD_PTR(&appmode_save, app_EDITOR_FILER));
    SET_APPMD_VAL(app_LIST_MODE, GET_APPMD_PTR(&appmode_save, app_LIST_MODE));                            SET_APPMD_VAL(app_LIST_MODE, GET_APPMD_PTR(&appmode_save, app_LIST_MODE));
    SET_APPMD_VAL(ed_EDITOR_PANES, GET_APPMD_PTR(&appmode_save, ed_EDITOR_PANES));                        SET_APPMD_VAL(ed_EDITOR_PANES, GET_APPMD_PTR(&appmode_save, ed_EDITOR_PANES));
    set_app_func_key_table();                                                                             set_app_func_key_table();
    set_work_space_color_on_app_list_mode();                                                              set_work_space_color_on_app_list_mode();

    if (push_win) {                                                                                       if (push_win) {
        free_filer_panes(&next_filer_panes, prev_fps);                                                        free_filer_panes(&next_filer_panes, prev_fps);
        change_cur_dir(get_cur_filer_view()->cur_dir);                                                        change_cur_dir(get_cur_filer_view()->cur_dir);

        win_pop_win_size();                                                                                   win_pop_win_size();
    }                                                                                                     }

    return ret;                                                                                           return ret;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

PRIVATE int filer_main_loop(const char *dir, const char *filter, char *path_buf, int buf_len)         PRIVATE int filer_main_loop(const char *dir, const char *filter, char *path_buf, int buf_len)
{                                                                                                     {
flf_d_printf("dir: [%s], filter: [%s], path: [%s], len: %d\n", dir, filter, path_buf, buf_len);       flf_d_printf("dir: [%s], filter: [%s], path: [%s], len: %d\n", dir, filter, path_buf, buf_len);
#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
    char prev_cur_dir[MAX_PATH_LEN+1];                                                                    char prev_cur_dir[MAX_PATH_LEN+1];
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
    key_code_t key_input = K_C_AT;      // show status bar at the first loop                              key_code_t key_input = K_C_AT;      // show status bar at the first loop
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;

#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
    get_full_path_of_cur_dir(prev_cur_dir);     // memorize prev. current dir                             get_full_path_of_cur_dir(prev_cur_dir);     // memorize prev. current dir
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
    if (is_strlen_not_0(dir)) {                                                                           if (is_strlen_not_0(dir)) {
        strlcpy__(get_cur_filer_view()->cur_dir, dir, MAX_PATH_LEN);                                          strlcpy__(get_cur_filer_view()->cur_dir, dir, MAX_PATH_LEN);
    }                                                                                                     }


    while (1) {                                                                                           while (1) {
        func_key_table_t *func_key_table;                                                                     func_key_table_t *func_key_table;

        check_filer_cur_dir();                                                                                check_filer_cur_dir();
        strcpy(filer_cur_path, get_cur_filer_view()->cur_dir);                                                strcpy(filer_cur_path, get_cur_filer_view()->cur_dir);
#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
        if (strcmp(prev_cur_dir, get_cur_filer_view()->cur_dir) != 0) {                                       if (strcmp(prev_cur_dir, get_cur_filer_view()->cur_dir) != 0) {
            update_history(HISTORY_TYPE_IDX_DIR, get_cur_filer_view()->cur_dir, 0);                               update_history(HISTORY_TYPE_IDX_DIR, get_cur_filer_view()->cur_dir, 0);
            strlcpy__(prev_cur_dir, get_cur_filer_view()->cur_dir, MAX_PATH_LEN);                                 strlcpy__(prev_cur_dir, get_cur_filer_view()->cur_dir, MAX_PATH_LEN);
        }                                                                                                     }
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
        if (filer_do_next >= FILER_DO_UPDATE_FILE_LIST_AUTO) {                                                if (filer_do_next >= FILER_DO_UPDATE_FILE_LIST_AUTO) {
            update_all_file_list(filter, filer_do_next == FILER_DO_UPDATE_FILE_LIST_FORCE                         update_all_file_list(filter, filer_do_next == FILER_DO_UPDATE_FILE_LIST_FORCE
             ? 2                                                                                                   ? 2
             : (filer_do_next == FILER_DO_UPDATE_FILE_LIST_AUTO ? 1 : 0));                                         : (filer_do_next == FILER_DO_UPDATE_FILE_LIST_AUTO ? 1 : 0));
        }                                                                                                     }
        update_screen_filer(1, key_input >= 0, 1);                                                            update_screen_filer(1, key_input >= 0, 1);
        //----------------------------------                                                                  //----------------------------------
        key_input = input_key_wait_return();                                                                  key_input = input_key_wait_return();
        //----------------------------------                                                                  //----------------------------------
        if (key_input >= 0) {                                                                                 if (key_input >= 0) {
            // some key input                                                                                     // some key input
mflf_d_printf("input%ckey:0x%04x(%s)=======================\n",                                       mflf_d_printf("input%ckey:0x%04x(%s)=======================\n",
 '_', key_input, short_key_name_from_key_code(key_input, NULL));                                       '_', key_input, short_key_name_from_key_code(key_input, NULL));
            clear_status_bar_displayed();                                                                         clear_status_bar_displayed();
        }                                                                                                     }

        strcpy__(get_cur_filer_view()->next_file, "");                                                        strcpy__(get_cur_filer_view()->next_file, "");

        filer_do_next = FILER_DO_UPDATE_FILE_LIST_AUTO;                                                       filer_do_next = FILER_DO_UPDATE_FILE_LIST_AUTO;
        switch (key_input) {                                                                                  switch (key_input) {
        case K_NONE:                                                                                          case K_NONE:
            filer_do_next = FILER_DO_UPDATE_FILE_LIST_AUTO;                                                       filer_do_next = FILER_DO_UPDATE_FILE_LIST_AUTO;
            break;                                                                                                break;
        case K_UP:                                                                                            case K_UP:
            dof_up();                                                                                             dof_up();
            break;                                                                                                break;
        case K_DOWN:                                                                                          case K_DOWN:
            dof_down();                                                                                           dof_down();
            break;                                                                                                break;
        case K_PPAGE:                                                                                         case K_PPAGE:
        case K_LEFT:                                                                                          case K_LEFT:
            dof_page_up();                                                                                        dof_page_up();
            break;                                                                                                break;
        case K_NPAGE:                                                                                         case K_NPAGE:
        case K_RIGHT:                                                                                         case K_RIGHT:
            dof_page_down();                                                                                      dof_page_down();
            break;                                                                                                break;
        case K_HOME:                                                                                          case K_HOME:
            dof_top_of_list();                                                                                    dof_top_of_list();
            break;                                                                                                break;
        case K_END:                                                                                           case K_END:
            dof_bottom_of_list();                                                                                 dof_bottom_of_list();
            break;                                                                                                break;
        case K_ESC:                                                                                           case K_ESC:
            filer_do_next = FILER_DO_ABORT;                                                                       filer_do_next = FILER_DO_ABORT;
            break;                                                                                                break;
        default:                                                                                              default:
            filer_do_next = FILER_DO_NOTHING;                                                                     filer_do_next = FILER_DO_NOTHING;
            if ((func_key_table = get_func_key_table_from_key(filer_func_key_table,                               if ((func_key_table = get_func_key_table_from_key(filer_func_key_table,
             key_input)) == NULL) {                                                                                key_input)) == NULL) {
                func_key_table = get_func_key_table_from_key(filer_func_key_table,                                    func_key_table = get_func_key_table_from_key(filer_func_key_table,
                 tolower_if_alpha(key_input));                                                                         tolower_if_alpha(key_input));
            }                                                                                                     }
            if (func_key_table == NULL) {                                                                         if (func_key_table == NULL) {
                disp_status_bar_err(_("No command assigned for the key: %04xh"), key_input);                          disp_status_bar_err(_("No command assigned for the key: %04xh"), key_input);
                filer_do_next = FILER_DO_UPDATE_FILE_LIST_AUTO;                                                       filer_do_next = FILER_DO_UPDATE_FILE_LIST_AUTO;
            } else {                                                                                              } else {
                strlcpy__(get_cur_filer_view()->next_file,                                                            strlcpy__(get_cur_filer_view()->next_file,
                 get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].file_name,                         get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].file_name,
                  MAX_PATH_LEN);                                                                                        MAX_PATH_LEN);
                if (is_app_list_mode()) {                                                                             if (is_app_list_mode()) {
                    switch (func_key_table->list_mode) {                                                                  switch (func_key_table->list_mode) {
                    case XA:        // executable all Normal/List mode                                                    case XA:        // executable all Normal/List mode
                        break;                                                                                                break;
                    case XL:        // not executable in List mode                                                        case XL:        // not executable in List mode
                        disp_status_bar_done(                                                                                 disp_status_bar_done(
                         _("Can not execute this function: [%s]"), func_key_table->func_id);                                   _("Can not execute this function: [%s]"), func_key_table->func_id);
                        filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
                        break;                                                                                                break;
                    case XF:        // not executable in List mode and return FILE_NAME                                   case XF:        // not executable in List mode and return FILE_NAME
                        filer_do_next = FILER_DO_ENTER_FILE_NAME;                                                             filer_do_next = FILER_DO_ENTER_FILE_NAME;
                        break;                                                                                                break;
                    case XP:        // not executable in List mode and return FILE_PATH                                   case XP:        // not executable in List mode and return FILE_PATH
                        filer_do_next = FILER_DO_ENTER_FILE_PATH;                                                             filer_do_next = FILER_DO_ENTER_FILE_PATH;
                        break;                                                                                                break;
                    case XC:        // not executable in List mode and return CUR_DIR_PATH                                case XC:        // not executable in List mode and return CUR_DIR_PATH
                        filer_do_next = FILER_DO_ENTER_CUR_DIR_PATH;                                                          filer_do_next = FILER_DO_ENTER_CUR_DIR_PATH;
                        break;                                                                                                break;
                    }                                                                                                     }
                }                                                                                                     }
                if (filer_do_next == FILER_DO_NOTHING) {                                                              if (filer_do_next == FILER_DO_NOTHING) {
flf_d_printf("CALL_FILER_FUNC [%s] <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n",                           flf_d_printf("CALL_FILER_FUNC [%s] <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n",
 func_key_table->func_id);                                                                             func_key_table->func_id);
                    //=========================                                                                           //=========================
                    (*func_key_table->func)();  // call function "dof_...()"                                              (*func_key_table->func)();  // call function "dof_...()"
                    //=========================                                                                           //=========================
flf_d_printf("ret_val: %d    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n", ret);                        |  flf_d_printf(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n");
                    unselect_all_files_auto(_FILE_SEL_AUTO_);                                                             unselect_all_files_auto(_FILE_SEL_AUTO_);
                }                                                                                                     }
flf_d_printf("filer_do_next: %d\n", filer_do_next);                                                   flf_d_printf("filer_do_next: %d\n", filer_do_next);
            }                                                                                                     }
            break;                                                                                                break;
        }                                                                                                     }
        if (filer_do_next >= FILER_DO_QUIT) {                                                                 if (filer_do_next >= FILER_DO_QUIT) {
            break;                                                                                                break;
        }                                                                                                     }
    }                                                                                                     }

flf_d_printf("filer_do_next: %d\n", filer_do_next);                                                   flf_d_printf("filer_do_next: %d\n", filer_do_next);
    strcpy__(path_buf, "");                                                                               strcpy__(path_buf, "");
    if (filer_do_next == FILER_DO_ABORT) {                                                                if (filer_do_next == FILER_DO_ABORT) {
        return -1;      // abort                                                                              return -1;      // abort
    }                                                                                                     }
    if (filer_do_next == FILER_DO_QUIT) {                                                                 if (filer_do_next == FILER_DO_QUIT) {
        return 0;       // quit                                                                               return 0;       // quit
    }                                                                                                     }
    if (filer_do_next == FILER_DO_ENTER_FILE_NAME                                                         if (filer_do_next == FILER_DO_ENTER_FILE_NAME
     || filer_do_next == FILER_DO_ENTER_FILE_PATH) {                                                       || filer_do_next == FILER_DO_ENTER_FILE_PATH) {
        for (int file_idx = select_and_get_first_file_idx_selected();                                         for (int file_idx = select_and_get_first_file_idx_selected();
         file_idx >= 0;                                                                                        file_idx >= 0;
         file_idx = get_next_file_idx_selected(file_idx)) {                                                    file_idx = get_next_file_idx_selected(file_idx)) {
            if (filer_do_next == FILER_DO_ENTER_FILE_NAME) {                                                      if (filer_do_next == FILER_DO_ENTER_FILE_NAME) {
                // file-1 "file name 2" "file name 3"                                                                 // file-1 "file name 2" "file name 3"
                concat_file_name_separating_by_space(path_buf, buf_len,                                               concat_file_name_separating_by_space(path_buf, buf_len,
                 get_cur_filer_view()->file_list[file_idx].file_name);                                                 get_cur_filer_view()->file_list[file_idx].file_name);
            } else {                                                                                              } else {
                // /dir/to/file-path-1 "/dir/to/file path 2" "/dir/to/file path 3"                                    // /dir/to/file-path-1 "/dir/to/file path 2" "/dir/to/file path 3"
                char path[MAX_PATH_LEN];                                                                              char path[MAX_PATH_LEN];
                cat_dir_and_file(path,                                                                                cat_dir_and_file(path,
                 get_cur_filer_view()->cur_dir,                                                                        get_cur_filer_view()->cur_dir,
                 get_cur_filer_view()->file_list[file_idx].file_name);                                                 get_cur_filer_view()->file_list[file_idx].file_name);
                concat_file_name_separating_by_space(path_buf, buf_len, path);                                        concat_file_name_separating_by_space(path_buf, buf_len, path);
            }                                                                                                     }
        }                                                                                                     }
    }                                                                                                     }
    if (filer_do_next == FILER_DO_ENTER_CUR_DIR_PATH) {                                                   if (filer_do_next == FILER_DO_ENTER_CUR_DIR_PATH) {
        strlcpy__(path_buf, get_cur_filer_view()->cur_dir, MAX_PATH_LEN);                                     strlcpy__(path_buf, get_cur_filer_view()->cur_dir, MAX_PATH_LEN);
    }                                                                                                     }
flf_d_printf("[%s]\n", path_buf);                                                                     flf_d_printf("[%s]\n", path_buf);
    return IS_META_KEY(key_input)                                                                         return IS_META_KEY(key_input)
     ? 2    // Append input file/dir name                                                                  ? 2    // Append input file/dir name
     : 1;   // input file/dir name                                                                         : 1;   // input file/dir name
}                                                                                                     }

PRIVATE int check_filer_cur_dir(void)                                                                 PRIVATE int check_filer_cur_dir(void)
{                                                                                                     {
    // check if cur_dir is readable                                                                       // check if cur_dir is readable
    if (is_dir_readable(get_cur_filer_view()->cur_dir) == 0) {                                            if (is_dir_readable(get_cur_filer_view()->cur_dir) == 0) {
        // current directory is not readable or disappeared                                                   // current directory is not readable or disappeared
        while (is_dir_readable(get_cur_filer_view()->cur_dir) == 0) {                                         while (is_dir_readable(get_cur_filer_view()->cur_dir) == 0) {
            // go up to the root dir                                                                              // go up to the root dir
            dof_parent_directory();                                                                               dof_parent_directory();
        }                                                                                                     }
        tio_beep();                                                                                           tio_beep();
    }                                                                                                     }
    if (is_dir_readable(get_cur_filer_view()->cur_dir) == 0) {                                            if (is_dir_readable(get_cur_filer_view()->cur_dir) == 0) {
        get_full_path_of_cur_dir(get_cur_filer_view()->cur_dir);                                              get_full_path_of_cur_dir(get_cur_filer_view()->cur_dir);
    }                                                                                                     }
    change_cur_dir(get_cur_filer_view()->cur_dir);                                                        change_cur_dir(get_cur_filer_view()->cur_dir);
    return 0;                                                                                             return 0;
}                                                                                                     }

PRIVATE int update_all_file_list(const char *filter, int force_update)                                PRIVATE int update_all_file_list(const char *filter, int force_update)
{                                                                                                     {
    if (GET_APPMD(fl_FILER_PANES) == 0) {                                                                 if (GET_APPMD(fl_FILER_PANES) == 0) {
        update_file_list(get_cur_filer_view(), filter, force_update);                                         update_file_list(get_cur_filer_view(), filter, force_update);
    } else {                                                                                              } else {
        update_file_list(get_filer_view(0), filter, force_update);                                            update_file_list(get_filer_view(0), filter, force_update);
        update_file_list(get_filer_view(1), filter, force_update);                                            update_file_list(get_filer_view(1), filter, force_update);
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }
PRIVATE int update_file_list(filer_view_t *fv, const char *filter, int force_update)                  PRIVATE int update_file_list(filer_view_t *fv, const char *filter, int force_update)
{                                                                                                     {
    int files = 0;                                                                                        int files = 0;

    if (get_cur_filer_view()->file_list == NULL                                                           if (get_cur_filer_view()->file_list == NULL
     || strcmp(fv->listed_dir, fv->cur_dir) != 0                                                           || strcmp(fv->listed_dir, fv->cur_dir) != 0
     || (force_update == 1 && get_files_selected(fv) == 0)                                                 || (force_update == 1 && get_files_selected(fv) == 0)
     || force_update >= 2) {                                                                               || force_update >= 2) {
        files = make_file_list(fv, filter);                                                                   files = make_file_list(fv, filter);
        strcpy__(fv->listed_dir, fv->cur_dir);                                                                strcpy__(fv->listed_dir, fv->cur_dir);
        sort_file_list(fv);                                                                                   sort_file_list(fv);
        research_file_name_in_file_list(fv);                                                                  research_file_name_in_file_list(fv);
    }                                                                                                     }
    return files;                                                                                         return files;
}                                                                                                     }

int update_screen_filer(int title_bar, int status_bar, int refresh)                                   int update_screen_filer(int title_bar, int status_bar, int refresh)
{                                                                                                     {
    int files_selected;                                                                                   int files_selected;
    int pane_sel_idx;       // 0: not current pane, 1: current pane                                       int pane_sel_idx;       // 0: not current pane, 1: current pane
    int pane_idx;           // pane index                                                                 int pane_idx;           // pane index

    tio_set_cursor_on(0);                                                                                 tio_set_cursor_on(0);

    files_selected = get_files_selected_cfv();                                                            files_selected = get_files_selected_cfv();

    // title bar                                                                                          // title bar
    filer_disp_title_bar(filer_cur_path,                                                                  filer_disp_title_bar(filer_cur_path,
     get_cur_filer_view()->cur_sel_idx, files_selected, get_cur_filer_view()->file_list_entries);          get_cur_filer_view()->cur_sel_idx, files_selected, get_cur_filer_view()->file_list_entries);

    if (GET_APPMD(fl_FILER_PANES) == 0) {       // 1 pane                                                 if (GET_APPMD(fl_FILER_PANES) == 0) {       // 1 pane
        win_select_win(WIN_IDX_SUB_WHOLE);                                                                    win_select_win(WIN_IDX_SUB_WHOLE);
        disp_file_list(get_cur_filer_view(), 1);                                                              disp_file_list(get_cur_filer_view(), 1);
    } else {                                    // 2 panes                                                } else {                                    // 2 panes
        for (pane_sel_idx = 0; pane_sel_idx < FILER_PANES; pane_sel_idx++) {                                  for (pane_sel_idx = 0; pane_sel_idx < FILER_PANES; pane_sel_idx++) {
            // 1st, update not current pane.                                                                      // 1st, update not current pane.
            // 2nd, update current pane.                                                                          // 2nd, update current pane.
            if (pane_sel_idx == 0) {                                                                              if (pane_sel_idx == 0) {
                pane_idx = get_filer_cur_pane_idx() == 0 ? 1 : 0;   // not current pane                               pane_idx = get_filer_cur_pane_idx() == 0 ? 1 : 0;   // not current pane
            } else {                                                                                              } else {
                pane_idx = get_filer_cur_pane_idx();    // current pane                                               pane_idx = get_filer_cur_pane_idx();    // current pane
            }                                                                                                     }
            win_select_win(WIN_IDX_SUB_LEFT + pane_idx);                                                          win_select_win(WIN_IDX_SUB_LEFT + pane_idx);
            if (pane_sel_idx == 0) {                                                                              if (pane_sel_idx == 0) {
                set_work_space_color_dark();                                                                          set_work_space_color_dark();
            }                                                                                                     }
            disp_file_list(&cur_filer_panes->filer_views[pane_idx], pane_sel_idx);                                disp_file_list(&cur_filer_panes->filer_views[pane_idx], pane_sel_idx);
            if (pane_sel_idx == 0) {                                                                              if (pane_sel_idx == 0) {
                set_work_space_color_normal();                                                                        set_work_space_color_normal();
            }                                                                                                     }
        }                                                                                                     }
    }                                                                                                     }
    if (status_bar) {                                                                                     if (status_bar) {
        // status bar                                                                                         // status bar
        disp_status_bar_percent_filer(                                                                        disp_status_bar_percent_filer(
         "%s", file_info_str(&(get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx])             "%s", file_info_str(&(get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx])
         0, 1, 0));                                                                                            0, 1, 0));
        // key list                                                                                           // key list
        disp_key_list_filer();                                                                                disp_key_list_filer();
    }                                                                                                     }

    // Set cursor position                                                                                // Set cursor position
    sub_win_set_cursor_pos(filer_win_get_file_list_y()                                                    sub_win_set_cursor_pos(filer_win_get_file_list_y()
     + get_cur_filer_view()->cur_sel_idx                                                                   + get_cur_filer_view()->cur_sel_idx
     - get_cur_filer_view()->top_idx, 0);                                                                  - get_cur_filer_view()->top_idx, 0);

    if (refresh) {                                                                                        if (refresh) {
        tio_refresh();                                                                                        tio_refresh();
    }                                                                                                     }

    tio_set_cursor_on(1);                                                                                 tio_set_cursor_on(1);
    return 0;                                                                                             return 0;
}                                                                                                     }

#define HHCMMCSS_LEN        8   // "23:59:59"                                                         #define HHCMMCSS_LEN        8   // "23:59:59"
PRIVATE void filer_disp_title_bar(const char *path,                                                   PRIVATE void filer_disp_title_bar(const char *path,
 int cur_idx, int files_selected, int files_total)                                                     int cur_idx, int files_selected, int files_total)
{                                                                                                     {
    char separator_char;                                                                                  char separator_char;
    char buffer[MAX_SCRN_LINE_BUF_LEN+1];                                                                 char buffer[MAX_SCRN_LINE_BUF_LEN+1];
    char buf_dir_path[MAX_PATH_LEN+1];                                                                    char buf_dir_path[MAX_PATH_LEN+1];
    char buf_files[MAX_SCRN_LINE_BUF_LEN+1];                                                              char buf_files[MAX_SCRN_LINE_BUF_LEN+1];
    char buf_time[1+HHCMMCSS_LEN+1];                                                                      char buf_time[1+HHCMMCSS_LEN+1];

    set_title_bar_color_by_state(0, 0, 0);                                                                set_title_bar_color_by_state(0, 0, 0);
    main_win_output_string(main_win_get_top_win_y() + TITLE_LINE, 0,                                      main_win_output_string(main_win_get_top_win_y() + TITLE_LINE, 0,
     tio_blank_line(), main_win_get_columns());                                                            tio_blank_line(), main_win_get_columns());

    //-------------------------------------------------------------------------                           //-------------------------------------------------------------------------
    separator_char = ':';                                                                                 separator_char = ':';
    if (is_app_list_mode()) {                                                                             if (is_app_list_mode()) {
        separator_char = '.';                                                                                 separator_char = '.';
    }                                                                                                     }
#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
    if (GET_APPMD(app_DEBUG_PRINTF) == DEBUG_PRINTF) {                                                    if (GET_APPMD(app_DEBUG_PRINTF) == DEBUG_PRINTF) {
        separator_char = ';';                                                                                 separator_char = ';';
        if (is_app_list_mode()) {                                                                             if (is_app_list_mode()) {
            separator_char = ',';                                                                                 separator_char = ',';
        }                                                                                                     }
    }                                                                                                     }
#endif // ENABLE_DEBUG                                                                                #endif // ENABLE_DEBUG
    if ((get_win_depth() == 0) && (strcmp(path, get_home_dir()) == 0)) {                                  if ((get_win_depth() == 0) && (strcmp(path, get_home_dir()) == 0)) {
        snprintf_(buf_dir_path, MAX_SCRN_LINE_BUF_LEN, "%s%d%c  [%s]  %s",                                    snprintf_(buf_dir_path, MAX_SCRN_LINE_BUF_LEN, "%s%d%c  [%s]  %s",
         root_notation(),                                                                                      root_notation(),
         get_filer_cur_pane_idx()+1, separator_char, get_at_host_name(), path);                                get_filer_cur_pane_idx()+1, separator_char, get_at_host_name(), path);
    } else {                                                                                              } else {
        snprintf_(buf_dir_path, MAX_SCRN_LINE_BUF_LEN, "%s%d%c%s",                                            snprintf_(buf_dir_path, MAX_SCRN_LINE_BUF_LEN, "%s%d%c%s",
         root_notation(),                                                                                      root_notation(),
         get_filer_cur_pane_idx()+1, separator_char, path);                                                    get_filer_cur_pane_idx()+1, separator_char, path);
    }                                                                                                     }

    //-------------------------------------------------------------------------                           //-------------------------------------------------------------------------
    // current date / time                                                                                // current date / time
    snprintf_(buf_time, 1+HHCMMCSS_YY_MM_DD_LEN+1, " %s",                                                 snprintf_(buf_time, 1+HHCMMCSS_YY_MM_DD_LEN+1, " %s",
     cur_ctime_cdate(msec_past_input_key() < 1000));                                                       cur_ctime_cdate(msec_past_input_key() < 1000));
    ///if (msec_past_input_key() < 1000 || files_selected) {                                              ///if (msec_past_input_key() < 1000 || files_selected) {
        if (files_selected == 0) {                                                                            if (files_selected == 0) {
            snprintf_(buf_files, MAX_SCRN_LINE_BUF_LEN+1, " %d %c%s",                                             snprintf_(buf_files, MAX_SCRN_LINE_BUF_LEN+1, " %d %c%s",
             files_total, *get_str_sort_by(), buf_time);                                                           files_total, *get_str_sort_by(), buf_time);
        } else {                                                                                              } else {
            snprintf_(buf_files, MAX_SCRN_LINE_BUF_LEN+1, " %d %c%s",                                             snprintf_(buf_files, MAX_SCRN_LINE_BUF_LEN+1, " %d %c%s",
             files_selected, *get_str_sort_by(), buf_time);                                                        files_selected, *get_str_sort_by(), buf_time);
        }                                                                                                     }
    ///} else {                                                                                           ///} else {
    /// snprintf_(buf_files, MAX_SCRN_LINE_BUF_LEN+1, "%s", buf_time);                                    /// snprintf_(buf_files, MAX_SCRN_LINE_BUF_LEN+1, "%s", buf_time);
    ///}                                                                                                  ///}
    int path_cols = LIM_MIN(0, main_win_get_columns() - strlen_path(buf_files));                          int path_cols = LIM_MIN(0, main_win_get_columns() - strlen_path(buf_files));
    shrink_str__adjust_col(buf_dir_path, path_cols, 2);                                                   shrink_str__adjust_col(buf_dir_path, path_cols, 2);
    snprintf_(buffer, MAX_SCRN_LINE_BUF_LEN, "%s%s", buf_dir_path, buf_files);                            snprintf_(buffer, MAX_SCRN_LINE_BUF_LEN, "%s%s", buf_dir_path, buf_files);

    main_win_output_string(main_win_get_top_win_y() + TITLE_LINE, 0, buffer, -1);                         main_win_output_string(main_win_get_top_win_y() + TITLE_LINE, 0, buffer, -1);
}                                                                                                     }

PRIVATE int disp_file_list(filer_view_t *fv, int cur_pane)                                            PRIVATE int disp_file_list(filer_view_t *fv, int cur_pane)
{                                                                                                     {
    int cur_sel_idx;                                                                                      int cur_sel_idx;
    int bottom_idx;                                                                                       int bottom_idx;
    char buffer[MAX_SCRN_LINE_BUF_LEN+1];                                                                 char buffer[MAX_SCRN_LINE_BUF_LEN+1];

    cur_sel_idx = fv->cur_sel_idx;                                                                        cur_sel_idx = fv->cur_sel_idx;
    if (cur_sel_idx < fv->top_idx + FILER_VERT_SCROLL_MARGIN_LINES) {                                     if (cur_sel_idx < fv->top_idx + FILER_VERT_SCROLL_MARGIN_LINES) {
        fv->top_idx = LIM_MIN(0, cur_sel_idx - FILER_VERT_SCROLL_MARGIN_LINES);                               fv->top_idx = LIM_MIN(0, cur_sel_idx - FILER_VERT_SCROLL_MARGIN_LINES);
    }                                                                                                     }
    bottom_idx = fv->top_idx + (filer_win_get_file_list_lines()-1);                                       bottom_idx = fv->top_idx + (filer_win_get_file_list_lines()-1);
    if (bottom_idx - FILER_VERT_SCROLL_MARGIN_LINES < cur_sel_idx) {                                      if (bottom_idx - FILER_VERT_SCROLL_MARGIN_LINES < cur_sel_idx) {
        bottom_idx = LIM_MAX(fv->file_list_entries-1,                                                         bottom_idx = LIM_MAX(fv->file_list_entries-1,
         cur_sel_idx) + FILER_VERT_SCROLL_MARGIN_LINES;                                                        cur_sel_idx) + FILER_VERT_SCROLL_MARGIN_LINES;
        fv->top_idx = LIM_MIN(0, bottom_idx - (filer_win_get_file_list_lines()-1));                           fv->top_idx = LIM_MIN(0, bottom_idx - (filer_win_get_file_list_lines()-1));
    }                                                                                                     }

    set_color_by_idx(ITEM_COLOR_IDX_TEXT_NORMAL, 0);                                                      set_color_by_idx(ITEM_COLOR_IDX_TEXT_NORMAL, 0);
    sub_win_clear_screen();                                                                               sub_win_clear_screen();

    if (filer_win_get_file_path_lines()) {                                                                if (filer_win_get_file_path_lines()) {
        // on two pane mode, show each path                                                                   // on two pane mode, show each path
        strlcpy__(buffer, fv->cur_dir, MAX_SCRN_LINE_BUF_LEN);                                                strlcpy__(buffer, fv->cur_dir, MAX_SCRN_LINE_BUF_LEN);
        shrink_str(buffer, main_win_get_columns(), 2);                                                        shrink_str(buffer, main_win_get_columns(), 2);
        set_color_by_idx(ITEM_COLOR_IDX_TITLE, cur_pane);                                                     set_color_by_idx(ITEM_COLOR_IDX_TITLE, cur_pane);
        sub_win_output_string(filer_win_get_file_path_y(), 0, buffer, -1);                                    sub_win_output_string(filer_win_get_file_path_y(), 0, buffer, -1);
    }                                                                                                     }

    int file_idx = fv->top_idx;                                                                           int file_idx = fv->top_idx;
    for (int line_idx = 0;                                                                                for (int line_idx = 0;
     line_idx < filer_win_get_file_list_lines() && file_idx < fv->file_list_entries;                       line_idx < filer_win_get_file_list_lines() && file_idx < fv->file_list_entries;
     line_idx++, file_idx++) {                                                                             line_idx++, file_idx++) {
        // Highlight the currently selected file/dir.                                                         // Highlight the currently selected file/dir.
        char *ptr = file_info_str(&(fv->file_list[file_idx]),                                                 char *ptr = file_info_str(&(fv->file_list[file_idx]),
         1, file_idx != cur_sel_idx, fv->file_list[file_idx].selected);                                        1, file_idx != cur_sel_idx, fv->file_list[file_idx].selected);
        adjust_utf8s_columns(ptr, main_win_get_columns());                                                    adjust_utf8s_columns(ptr, main_win_get_columns());
        if (fv->file_list[file_idx].selected) {                                                               if (fv->file_list[file_idx].selected) {
            set_color_by_idx(ITEM_COLOR_IDX_TEXT_SELECTED2, 0);                                                   set_color_by_idx(ITEM_COLOR_IDX_TEXT_SELECTED2, 0);
        } else {                                                                                              } else {
            set_color_by_idx(ITEM_COLOR_IDX_TEXT_NORMAL, 0);                                                      set_color_by_idx(ITEM_COLOR_IDX_TEXT_NORMAL, 0);
        }                                                                                                     }
        if (cur_pane && (file_idx == cur_sel_idx)) {                                                          if (cur_pane && (file_idx == cur_sel_idx)) {
            tio_set_attr_rev(1);        // display current line inverted                                          tio_set_attr_rev(1);        // display current line inverted
        }                                                                                                     }
        sub_win_output_string(filer_win_get_file_list_y() + line_idx, 0, ptr, -1);                            sub_win_output_string(filer_win_get_file_list_y() + line_idx, 0, ptr, -1);
        if (cur_pane && (file_idx == cur_sel_idx)) {                                                          if (cur_pane && (file_idx == cur_sel_idx)) {
            tio_set_attr_rev(0);                                                                                  tio_set_attr_rev(0);
        }                                                                                                     }
    }                                                                                                     }
    if (cur_pane) {                                                                                       if (cur_pane) {
        // Set cursor position                                                                                // Set cursor position
        sub_win_set_cursor_pos(filer_win_get_file_list_y() + cur_sel_idx - fv->top_idx, 0);                   sub_win_set_cursor_pos(filer_win_get_file_list_y() + cur_sel_idx - fv->top_idx, 0);
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }
//-------------------------------------                                                               //-------------------------------------
int filer_win_get_file_path_lines(void)                                                               int filer_win_get_file_path_lines(void)
{                                                                                                     {
    if (GET_APPMD(fl_FILER_PANES) == 0) {                                                                 if (GET_APPMD(fl_FILER_PANES) == 0) {
        return 0;                                                                                             return 0;
    } else {                                                                                              } else {
        return 1;                                                                                             return 1;
    }                                                                                                     }
}                                                                                                     }
int filer_win_get_file_list_lines(void)                                                               int filer_win_get_file_list_lines(void)
{                                                                                                     {
    return LIM_MIN(0, sub_win_get_lines() - filer_win_get_file_path_lines());                             return LIM_MIN(0, sub_win_get_lines() - filer_win_get_file_path_lines());
}                                                                                                     }
//-------------------------------------                                                               //-------------------------------------
int filer_win_get_file_path_y(void)                                                                   int filer_win_get_file_path_y(void)
{                                                                                                     {
    return 0;                                                                                             return 0;
}                                                                                                     }
int filer_win_get_file_list_y(void)                                                                   int filer_win_get_file_list_y(void)
{                                                                                                     {
    return filer_win_get_file_path_y() + filer_win_get_file_path_lines();                                 return filer_win_get_file_path_y() + filer_win_get_file_path_lines();
}                                                                                                     }
//-------------------------------------                                                               //-------------------------------------
PRIVATE void disp_key_list_filer(void)                                                                PRIVATE void disp_key_list_filer(void)
{                                                                                                     {
    char *filer_key_lists[] = {                                                                           char *filer_key_lists[] = {
 "{Menu}"                                                                                              "{Menu}"
 "  {Home } {Copy } {CpyUd} {Renam}"                                                                   "  {Home } {Copy } {CpyUd} {Renam}"
 "  {Move } {Delet} {MkDel} {MkDir}"                                                                   "  {Move } {Delet} {MkDel} {MkDir}"
 "  {ChDir} {Exec } {Edit } {Edit }",                                                                  "  {ChDir} {Exec } {Edit } {Edit }",

 "<dof_quit_filer>Quit "                                                                               "<dof_quit_filer>Quit "
 "<dof_open_file>Edit "                                                                                "<dof_open_file>Edit "
 "<dof_edit_new_file>EditNewFile "                                                                     "<dof_edit_new_file>EditNewFile "
 "<dof_copy_file>Copy "                                                                                "<dof_copy_file>Copy "
 "<dof_copy_file_update>UpdateCopy "                                                                   "<dof_copy_file_update>UpdateCopy "
 "<dof_move_file>Move "                                                                                "<dof_move_file>Move "
 "<dof_trash_file>Trash "                                                                              "<dof_trash_file>Trash "
 "<dof_delete_file>Delete "                                                                            "<dof_delete_file>Delete "
 "<dof_rename_file>Rename "                                                                            "<dof_rename_file>Rename "
 "<dof_mark_to_delete_file>MarkToDelete "                                                              "<dof_mark_to_delete_file>MarkToDelete "
 "<dof_exec_command_with_file>Exec "                                                                   "<dof_exec_command_with_file>Exec "
 "<dof_run_command_rel>Run "                                                                           "<dof_run_command_rel>Run "
 "<dof_select_file>SelectFile "                                                                        "<dof_select_file>SelectFile "
 "<dof_select_no_file>SelNoFile "                                                                      "<dof_select_no_file>SelNoFile "
 "<dof_select_all_files>SelAllFiles ",                                                                 "<dof_select_all_files>SelAllFiles ",

 "<dof_home_directory>HomeDir "                                                                        "<dof_home_directory>HomeDir "
 "<dof_root_directory>RootDir "                                                                        "<dof_root_directory>RootDir "
 "<dof_change_directory>ChgDir "                                                                       "<dof_change_directory>ChgDir "
 "<dof_parent_directory>ParentDir "                                                                    "<dof_parent_directory>ParentDir "
 "<dof_tap_file>Pager/EnterDir "                                                                       "<dof_tap_file>Pager/EnterDir "
 "<dof_make_directory>MkDir "                                                                          "<dof_make_directory>MkDir "
 "<dof_tog_panes>TwoPane "                                                                             "<dof_tog_panes>TwoPane "
 "<dof_switch_filer_pane>SwPane "                                                                      "<dof_switch_filer_pane>SwPane "
 "<dof_inc_sort_by>Sort "                                                                              "<dof_inc_sort_by>Sort "
 "<dof_inc_show_file_info>Info "                                                                       "<dof_inc_show_file_info>Info "
 "<dof_refresh_filer>Refresh "                                                                         "<dof_refresh_filer>Refresh "
 "<dof_tog_show_dot_file>ShowDotFile "                                                                 "<dof_tog_show_dot_file>ShowDotFile "
 "<dof_find_file>FindFile ",                                                                           "<dof_find_file>FindFile ",
    };                                                                                                    };
    disp_key_list(filer_key_lists);                                                                       disp_key_list(filer_key_lists);
}                                                                                                     }

#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER

// End of filer.c                                                                                     // End of filer.c
kdiff3 ../old/be/filer2.c filer2.c #========================
/**************************************************************************                           /**************************************************************************
 *   filer2.c                                                             *                            *   filer2.c                                                             *
 *                                                                        *                            *                                                                        *
 *   Copyright (C) 1999-2003 Chris Allegretta                             *                            *   Copyright (C) 1999-2003 Chris Allegretta                             *
 *                                                                        *                            *                                                                        *
 *   This program is free software; you can redistribute it and/or modify *                            *   This program is free software; you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published by *                            *   it under the terms of the GNU General Public License as published by *
 *   the Free Software Foundation; either version 2, or (at your option)  *                            *   the Free Software Foundation; either version 2, or (at your option)  *
 *   any later version.                                                   *                            *   any later version.                                                   *
 *                                                                        *                            *                                                                        *
 *   This program is distributed in the hope that it will be useful,      *                            *   This program is distributed in the hope that it will be useful,      *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *                            *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *                            *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 *   GNU General Public License for more details.                         *                            *   GNU General Public License for more details.                         *
 *                                                                        *                            *                                                                        *
 *   You should have received a copy of the GNU General Public License    *                            *   You should have received a copy of the GNU General Public License    *
 *   along with this program; if not, write to the Free Software          *                            *   along with this program; if not, write to the Free Software          *
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *                            *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *
 *                                                                        *                            *                                                                        *
 **************************************************************************/                           **************************************************************************/

#include "headers.h"                                                                                  #include "headers.h"

#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

PRIVATE char *get_file_size_str(char *buf_size, loff_t size);                                         PRIVATE char *get_file_size_str(char *buf_size, loff_t size);
PRIVATE const char *get_1k_to_999k_str(long size, char *buf);                                         PRIVATE const char *get_1k_to_999k_str(long size, char *buf);
#ifdef START_UP_TEST                                                                                  #ifdef START_UP_TEST
void test_get_file_size_str(void)                                                                     void test_get_file_size_str(void)
{                                                                                                     {
_FLF_                                                                                                 _FLF_
    loff_t size;                                                                                          loff_t size;
    loff_t zeros;                                                                                         loff_t zeros;
    int bits;                                                                                             int bits;
    int bit;                                                                                              int bit;
    char buf_size[20+1];                                                                                  char buf_size[20+1];
    const char *expected_strs[] = {                                                                       const char *expected_strs[] = {
        "     1",                                                                                             "     1",
        "     3",                                                                                             "     3",
        "     7",                                                                                             "     7",
        "    15",                                                                                             "    15",
        "    31",                                                                                             "    31",
        "    63",                                                                                             "    63",
        "   127",                                                                                             "   127",
        "   255",                                                                                             "   255",
        "   511",                                                                                             "   511",
        "  1023",                                                                                             "  1023",
        "  2047",                                                                                             "  2047",
        "  4095",                                                                                             "  4095",
        "  8191",                                                                                             "  8191",
        " 16383",                                                                                             " 16383",
        " 32767",                                                                                             " 32767",
        " 65535",                                                                                             " 65535",
        "131071",                                                                                             "131071",
        "262143",                                                                                             "262143",
        "524287",                                                                                             "524287",
        "1.048M",                                                                                             "1.048M",
        "2.097M",                                                                                             "2.097M",
        "4.194M",                                                                                             "4.194M",
        "8.388M",                                                                                             "8.388M",
        "16.77M",                                                                                             "16.77M",
        "33.55M",                                                                                             "33.55M",
        "67.10M",                                                                                             "67.10M",
        "134.2M",                                                                                             "134.2M",
        "268.4M",                                                                                             "268.4M",
        "536.8M",                                                                                             "536.8M",
        "1.073G",                                                                                             "1.073G",
        "2.147G",                                                                                             "2.147G",
        "4.294G",                                                                                             "4.294G",
        "8.589G",                                                                                             "8.589G",
        "17.17G",                                                                                             "17.17G",
        "34.35G",                                                                                             "34.35G",
        "68.71G",                                                                                             "68.71G",
        "137.4G",                                                                                             "137.4G",
        "274.8G",                                                                                             "274.8G",
        "549.7G",                                                                                             "549.7G",
        "1.099T",                                                                                             "1.099T",
        "2.199T",                                                                                             "2.199T",
        "4.398T",                                                                                             "4.398T",
        "8.796T",                                                                                             "8.796T",
        "17.59T",                                                                                             "17.59T",
        "35.18T",                                                                                             "35.18T",
        "70.36T",                                                                                             "70.36T",
        "140.7T",                                                                                             "140.7T",
        "281.4T",                                                                                             "281.4T",
        "562.9T",                                                                                             "562.9T",
        "1.125P",                                                                                             "1.125P",
        "2.251P",                                                                                             "2.251P",
        "4.503P",                                                                                             "4.503P",
        "9.007P",                                                                                             "9.007P",
        "18.01P",                                                                                             "18.01P",
        "36.02P",                                                                                             "36.02P",
        "72.05P",                                                                                             "72.05P",
        "144.1P",                                                                                             "144.1P",
        "288.2P",                                                                                             "288.2P",
        "576.4P",                                                                                             "576.4P",
        "1.152E",                                                                                             "1.152E",
        "2.305E",                                                                                             "2.305E",
        "4.611E",                                                                                             "4.611E",
        "9.223E",                                                                                             "9.223E",
        "18.44E",                                                                                             "18.44E",

        " 12345",                                                                                             " 12345",
        "123450",                                                                                             "123450",
        "1.234M",                                                                                             "1.234M",
        "12.34M",                                                                                             "12.34M",
        "123.4M",                                                                                             "123.4M",
        "1.234G",                                                                                             "1.234G",
        "12.34G",                                                                                             "12.34G",
        "123.4G",                                                                                             "123.4G",
        "1.234T",                                                                                             "1.234T",
        "12.34T",                                                                                             "12.34T",
        "123.4T",                                                                                             "123.4T",
        "1.234P",                                                                                             "1.234P",
        "12.34P",                                                                                             "12.34P",
        "123.4P",                                                                                             "123.4P",
        "1.234E",                                                                                             "1.234E",
        "12.34E",                                                                                             "12.34E",
    };                                                                                                    };

    int expected_idx = 0;                                                                                 int expected_idx = 0;
    for (bits = 1; bits <= 64; bits++) {                                                                  for (bits = 1; bits <= 64; bits++) {
        // 0x01, 0x03, ... 0x7fffffffffffffff, 0xffffffffffffffff                                             // 0x01, 0x03, ... 0x7fffffffffffffff, 0xffffffffffffffff
        size = 0;                                                                                             size = 0;
        for (bit = 0; bit < bits; bit++) {                                                                    for (bit = 0; bit < bits; bit++) {
            size |= ((loff_t)1) << bit;                                                                           size |= ((loff_t)1) << bit;
        }                                                                                                     }
        get_file_size_str(buf_size, size);                                                                    get_file_size_str(buf_size, size);
        ////flf_d_printf("%16llx ==> %20llu ==> %s\n", size, size, buf_size);                                 ////flf_d_printf("%16llx ==> %20llu ==> %s\n", size, size, buf_size);
        MY_UT_STR(buf_size, expected_strs[expected_idx]);   expected_idx++;                                   MY_UT_STR(buf_size, expected_strs[expected_idx]);   expected_idx++;
    }                                                                                                     }
    //                   PPPPPTTTGGGMMMKKK000                                                             //                   PPPPPTTTGGGMMMKKK000
    for (zeros = 1; zeros <= 1000000000000000; zeros *= 10) {                                             for (zeros = 1; zeros <= 1000000000000000; zeros *= 10) {
        // 12345, 123450, ... 12,345,000,000,000,000                                                          // 12345, 123450, ... 12,345,000,000,000,000
        size = 12345 * zeros;                                                                                 size = 12345 * zeros;
        get_file_size_str(buf_size, size);                                                                    get_file_size_str(buf_size, size);
        ////flf_d_printf("%16llx ==> %20llu ==> %s\n", size, size, buf_size);                                 ////flf_d_printf("%16llx ==> %20llu ==> %s\n", size, size, buf_size);
        MY_UT_STR(buf_size, expected_strs[expected_idx]);   expected_idx++;                                   MY_UT_STR(buf_size, expected_strs[expected_idx]);   expected_idx++;
    }                                                                                                     }
}                                                                                                     }
#endif // START_UP_TEST                                                                               #endif // START_UP_TEST

// show_link==1: show symlink, ==0: show symlinked file                                               // show_link==1: show symlink, ==0: show symlinked file
// truncate==1: truncate file name to show whole of file attribute                                    // truncate==1: truncate file name to show whole of file attribute
char *file_info_str(file_info_t *file_info, int show_link, int trunc_file_name, int selected)         char *file_info_str(file_info_t *file_info, int show_link, int trunc_file_name, int selected)
{                                                                                                     {
    struct stat *st_ptr;                                                                                  struct stat *st_ptr;
    struct stat *lst_ptr;                                                                                 struct stat *lst_ptr;
    int is_link;                                                                                          int is_link;
    int is_link_broken = 0;                                                                               int is_link_broken = 0;
    struct tm *tm_ptr;                                                                                    struct tm *tm_ptr;
    char buf_name[MAX_PATH_LEN+1];                                                                        char buf_name[MAX_PATH_LEN+1];
    loff_t size;                                                                                          loff_t size;
    char buf_size[20+1];                                                                                  char buf_size[20+1];
    char buf_time[20+1];                                                                                  char buf_time[20+1];
    int mode;                                                                                             int mode;
    char *type_str;                                                                                       char *type_str;
    char buf_mode[20+1];                                                                                  char buf_mode[20+1];
#define FILE_INFO_BUF_LEN   100                                                                       #define FILE_INFO_BUF_LEN   100
    char buf_info[FILE_INFO_BUF_LEN+1];                                                                   char buf_info[FILE_INFO_BUF_LEN+1];
    int info_str_len;                                                                                     int info_str_len;
    char *info_str_ptr;                                                                                   char *info_str_ptr;
    int file_name_cols;                                                                                   int file_name_cols;
    int file_name_space;                                                                                  int file_name_space;
    int rest_space_for_file_name;                                                                         int rest_space_for_file_name;
    int info_space;                                                                                       int info_space;
// *filename.ext 123456 070113-125959 user---- group---                                               // *filename.ext 123456 070113-125959 user---- group---
#define SELECTED_MARK_LEN   1                                                                         #define SELECTED_MARK_LEN   1
#define FILE_NAME_INFO_BUF_LEN  (SELECTED_MARK_LEN + MAX_PATH_LEN*MAX_UTF8C_BYTES)                    #define FILE_NAME_INFO_BUF_LEN  (SELECTED_MARK_LEN + MAX_PATH_LEN*MAX_UTF8C_BYTES)
    static char buffer[FILE_NAME_INFO_BUF_LEN+1];                                                         static char buffer[FILE_NAME_INFO_BUF_LEN+1];
#define MIN_FILE_NAME_SPACE     12      // "filename.ext"(DOS8.3)                                     #define MIN_FILE_NAME_SPACE     12      // "filename.ext"(DOS8.3)

/////flf_d_printf("[%s], %d\n", file_info->file_name, get_file_type_num(file_info));               |  ////flf_d_printf("[%s], %d\n", file_info->file_name, get_file_type_num(file_info));
    st_ptr = &file_info->st;                                                                              st_ptr = &file_info->st;
    lst_ptr = &file_info->lst;                                                                            lst_ptr = &file_info->lst;
    is_link = S_ISLNK(lst_ptr->st_mode);                                                                  is_link = S_ISLNK(lst_ptr->st_mode);
    if (is_link) {                                                                                        if (is_link) {
        is_link_broken = (memcmp(st_ptr, lst_ptr, sizeof(*st_ptr)) == 0);                                     is_link_broken = (memcmp(st_ptr, lst_ptr, sizeof(*st_ptr)) == 0);
    }                                                                                                     }
    strcpy__(buf_name, "");                                                                               strcpy__(buf_name, "");
    if (show_link && is_link) {                                                                           if (show_link && is_link) {
        strlcat__(buf_name, MAX_PATH_LEN, file_info->file_name);                                              strlcat__(buf_name, MAX_PATH_LEN, file_info->file_name);
        ///if (S_ISDIR(lst_ptr->st_mode)) {                                                        <
        /// strlcat__(buf_name, MAX_PATH_LEN, "/");                                                <
        ///} else if (lst_ptr->st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)) {                          <
        /// // Symlink's 'x' bits are usually set.                                                 <
        /// // strlcat__(buf_name, "*", MAX_PATH_LEN);                                             <
        ///}                                                                                       <
#define LINK_ARROW      " -> "                                                                        #define LINK_ARROW      " -> "
///#define LINK_ARROW       " >>"                                                                     ///#define LINK_ARROW       " >>"
///#define LINK_ARROW       " > "                                                                     ///#define LINK_ARROW       " > "
        strlcat__(buf_name, MAX_PATH_LEN, LINK_ARROW);                                                        strlcat__(buf_name, MAX_PATH_LEN, LINK_ARROW);
        if (file_info->symlink)                                                                               if (file_info->symlink)
            strlcat__(buf_name, MAX_PATH_LEN, file_info->symlink);                                                strlcat__(buf_name, MAX_PATH_LEN, file_info->symlink);
        if (is_link_broken)                                                                                   if (is_link_broken)
            strlcat__(buf_name, MAX_PATH_LEN, "!");                                                               strlcat__(buf_name, MAX_PATH_LEN, "!");
    } else {                                                                                              } else {
        if (is_link)                                                                                          if (is_link)
            strlcat__(buf_name, MAX_PATH_LEN, file_info->symlink);                                                strlcat__(buf_name, MAX_PATH_LEN, file_info->symlink);
        else                                                                                                  else
            strlcat__(buf_name, MAX_PATH_LEN, file_info->file_name);                                              strlcat__(buf_name, MAX_PATH_LEN, file_info->file_name);
    }                                                                                                     }
    if (S_ISDIR(st_ptr->st_mode)) {                                                                       if (S_ISDIR(st_ptr->st_mode)) {
        strlcat__(buf_name, MAX_PATH_LEN, "/");                                                               strlcat__(buf_name, MAX_PATH_LEN, "/");
    } else if (is_link_broken == 0 && (st_ptr->st_mode & (S_IXUSR | S_IXGRP | S_IXOTH))) {                } else if (is_link_broken == 0 && (st_ptr->st_mode & (S_IXUSR | S_IXGRP | S_IXOTH))) {
        strlcat__(buf_name, MAX_PATH_LEN, "*");                                                               strlcat__(buf_name, MAX_PATH_LEN, "*");
    }                                                                                                     }

    strcpy__(buf_size, "");                                                                               strcpy__(buf_size, "");
    size = show_link ? lst_ptr->st_size : st_ptr->st_size;                                                size = show_link ? lst_ptr->st_size : st_ptr->st_size;
///#define TEST_HUGE_SIZE                                                                             ///#define TEST_HUGE_SIZE
#ifdef  TEST_HUGE_SIZE                                                                                #ifdef  TEST_HUGE_SIZE
    size *= 1000000000000;                                                                                size *= 1000000000000;
#endif // TEST_HUGE_SIZE                                                                              #endif // TEST_HUGE_SIZE
    // 2^32 = 4294967296 = 4e9 = 4Giga, 2^64 = 1844674407000000000 = 18e18 = 18Exa = 18446Peta            // 2^32 = 4294967296 = 4e9 = 4Giga, 2^64 = 1844674407000000000 = 18e18 = 18Exa = 18446Peta
    if ((show_link && is_link)      // link itself                                                        if ((show_link && is_link)      // link itself
     || (S_ISREG(st_ptr->st_mode) || S_ISDIR(st_ptr->st_mode))) {                                          || (S_ISREG(st_ptr->st_mode) || S_ISDIR(st_ptr->st_mode))) {
        get_file_size_str(buf_size, size);                                                                    get_file_size_str(buf_size, size);
    } else if (S_ISCHR(st_ptr->st_mode)) {                                                                } else if (S_ISCHR(st_ptr->st_mode)) {
        size = st_ptr->st_rdev;                                                                               size = st_ptr->st_rdev;
        snprintf_(buf_size, 20+1, "%3dC%3d", (int)((size & 0xff00) >> 8), (int)(size & 0xff));                snprintf_(buf_size, 20+1, "%3dC%3d", (int)((size & 0xff00) >> 8), (int)(size & 0xff));
    } else if (S_ISBLK(st_ptr->st_mode)) {                                                                } else if (S_ISBLK(st_ptr->st_mode)) {
        size = st_ptr->st_rdev;                                                                               size = st_ptr->st_rdev;
        snprintf_(buf_size, 20+1, "%3dB%3d", (int)((size & 0xff00) >> 8), (int)(size & 0xff));                snprintf_(buf_size, 20+1, "%3dB%3d", (int)((size & 0xff00) >> 8), (int)(size & 0xff));
    } else if (S_ISFIFO(st_ptr->st_mode)) {                                                               } else if (S_ISFIFO(st_ptr->st_mode)) {
        snprintf_(buf_size, 20+1, "   FIFO");                                                                 snprintf_(buf_size, 20+1, "   FIFO");
    } else if (S_ISSOCK(st_ptr->st_mode)) {                                                               } else if (S_ISSOCK(st_ptr->st_mode)) {
        snprintf_(buf_size, 20+1, " SOCKET");                                                                 snprintf_(buf_size, 20+1, " SOCKET");
    }                                                                                                     }

    tm_ptr = localtime(show_link ? &lst_ptr->st_mtime : &st_ptr->st_mtime);                               tm_ptr = localtime(show_link ? &lst_ptr->st_mtime : &st_ptr->st_mtime);
    snprintf_(buf_time, 20+1, "%02d%02d%02d-%02d%02d%02d",                                                snprintf_(buf_time, 20+1, "%02d%02d%02d-%02d%02d%02d",
     tm_ptr->tm_year % 100, tm_ptr->tm_mon+1, tm_ptr->tm_mday,                                             tm_ptr->tm_year % 100, tm_ptr->tm_mon+1, tm_ptr->tm_mday,
     tm_ptr->tm_hour, tm_ptr->tm_min, tm_ptr->tm_sec);                                                     tm_ptr->tm_hour, tm_ptr->tm_min, tm_ptr->tm_sec);

    mode = show_link ? lst_ptr->st_mode : st_ptr->st_mode;                                                mode = show_link ? lst_ptr->st_mode : st_ptr->st_mode;
    if (S_ISREG(mode)) {                                                                                  if (S_ISREG(mode)) {
        type_str = " ";                                                                                       type_str = " ";
    } else if (S_ISDIR(mode)) {                                                                           } else if (S_ISDIR(mode)) {
        type_str = "d";                                                                                       type_str = "d";
    } else if (S_ISLNK(mode)) {                                                                           } else if (S_ISLNK(mode)) {
        type_str = "l";                                                                                       type_str = "l";
    } else if (S_ISCHR(mode)) {                                                                           } else if (S_ISCHR(mode)) {
        type_str = "c";                                                                                       type_str = "c";
    } else if (S_ISBLK(mode)) {                                                                           } else if (S_ISBLK(mode)) {
        type_str = "b";                                                                                       type_str = "b";
    } else if (S_ISFIFO(mode)) {                                                                          } else if (S_ISFIFO(mode)) {
        type_str = "f";                                                                                       type_str = "f";
    } else if (S_ISSOCK(mode)) {                                                                          } else if (S_ISSOCK(mode)) {
        type_str = "s";                                                                                       type_str = "s";
    } else {                                                                                              } else {
        type_str = "?";     // unknown file type                                                              type_str = "?";     // unknown file type
    }                                                                                                     }
    switch (GET_APPMD(fl_SHOW_FILE_INFO)) {                                                               switch (GET_APPMD(fl_SHOW_FILE_INFO)) {
    default:                                                                                              default:
    case SHOW_FILE_INFO_0:                                                                                case SHOW_FILE_INFO_0:
    case SHOW_FILE_INFO_1:                                                                                case SHOW_FILE_INFO_1:
    case SHOW_FILE_INFO_2:                                                                                case SHOW_FILE_INFO_2:
    case SHOW_FILE_INFO_3:                                                                                case SHOW_FILE_INFO_3:
        snprintf_(buf_mode, 20+1, "%s", "");                                                                  snprintf_(buf_mode, 20+1, "%s", "");
        break;                                                                                                break;
    case SHOW_FILE_INFO_4:                                                                                case SHOW_FILE_INFO_4:
        //                         t7777                                                                      //                         t7777
        snprintf_(buf_mode, 20+1, "%s%04o", type_str, mode & 07777);                                          snprintf_(buf_mode, 20+1, "%s%04o", type_str, mode & 07777);
        break;                                                                                                break;
    case SHOW_FILE_INFO_5:                                                                                case SHOW_FILE_INFO_5:
        //                         t r w x r w x r w x                                                        //                         t r w x r w x r w x
        snprintf_(buf_mode, 20+1, "%s%c%c%c%c%c%c%c%c%c", type_str,                                           snprintf_(buf_mode, 20+1, "%s%c%c%c%c%c%c%c%c%c", type_str,
         (mode & S_IRUSR) ? 'r' : '-', (mode & S_IWUSR) ? 'w' : '-',                                           (mode & S_IRUSR) ? 'r' : '-', (mode & S_IWUSR) ? 'w' : '-',
         (mode & S_IXUSR) ? ((mode & S_ISUID) ? 's' : 'x') : ((mode & S_ISUID) ? 'S' : '-'),                   (mode & S_IXUSR) ? ((mode & S_ISUID) ? 's' : 'x') : ((mode & S_ISUID) ? 'S' : '-'),
         (mode & S_IRGRP) ? 'r' : '-', (mode & S_IWGRP) ? 'w' : '-',                                           (mode & S_IRGRP) ? 'r' : '-', (mode & S_IWGRP) ? 'w' : '-',
         (mode & S_IXGRP) ? ((mode & S_ISGID) ? 's' : 'x') : ((mode & S_ISGID) ? 'S' : '-'),                   (mode & S_IXGRP) ? ((mode & S_ISGID) ? 's' : 'x') : ((mode & S_ISGID) ? 'S' : '-'),
         (mode & S_IROTH) ? 'r' : '-', (mode & S_IWOTH) ? 'w' : '-',                                           (mode & S_IROTH) ? 'r' : '-', (mode & S_IWOTH) ? 'w' : '-',
         (mode & S_IXOTH) ? 'x' : '-');                                                                        (mode & S_IXOTH) ? 'x' : '-');
        break;                                                                                                break;
    }                                                                                                     }

    switch (GET_APPMD(fl_SHOW_FILE_INFO)) {                                                               switch (GET_APPMD(fl_SHOW_FILE_INFO)) {
    default:                                                                                              default:
    case SHOW_FILE_INFO_0:                                                                                case SHOW_FILE_INFO_0:
        snprintf_(buf_info, FILE_INFO_BUF_LEN+1, "%s", " ");                                                  snprintf_(buf_info, FILE_INFO_BUF_LEN+1, "%s", " ");
        break;                                                                                                break;
    case SHOW_FILE_INFO_1:                                                                                case SHOW_FILE_INFO_1:
        snprintf_(buf_info, FILE_INFO_BUF_LEN+1, " %s", buf_size);                                            snprintf_(buf_info, FILE_INFO_BUF_LEN+1, " %s", buf_size);
        break;                                                                                                break;
    case SHOW_FILE_INFO_2:                                                                                case SHOW_FILE_INFO_2:
        snprintf_(buf_info, FILE_INFO_BUF_LEN+1, " %s", buf_time);                                            snprintf_(buf_info, FILE_INFO_BUF_LEN+1, " %s", buf_time);
        break;                                                                                                break;
    case SHOW_FILE_INFO_3:                                                                                case SHOW_FILE_INFO_3:
        snprintf_(buf_info, FILE_INFO_BUF_LEN+1, " %s %s", buf_size, buf_time);                               snprintf_(buf_info, FILE_INFO_BUF_LEN+1, " %s %s", buf_size, buf_time);
        break;                                                                                                break;
    case SHOW_FILE_INFO_4:                                                                                case SHOW_FILE_INFO_4:
        snprintf_(buf_info, FILE_INFO_BUF_LEN+1, " %s %s %s %-8s",                                            snprintf_(buf_info, FILE_INFO_BUF_LEN+1, " %s %s %s %-8s",
         buf_size, buf_time, buf_mode,                                                                         buf_size, buf_time, buf_mode,
         get_user_name(show_link ? lst_ptr->st_uid : st_ptr->st_uid));                                         get_user_name(show_link ? lst_ptr->st_uid : st_ptr->st_uid));
        break;                                                                                                break;
    case SHOW_FILE_INFO_5:                                                                                case SHOW_FILE_INFO_5:
        snprintf_(buf_info, FILE_INFO_BUF_LEN+1, " %s %s %s %-8s %-8s",                                       snprintf_(buf_info, FILE_INFO_BUF_LEN+1, " %s %s %s %-8s %-8s",
         buf_size, buf_time, buf_mode,                                                                         buf_size, buf_time, buf_mode,
         get_user_name(show_link ? lst_ptr->st_uid : st_ptr->st_uid),                                          get_user_name(show_link ? lst_ptr->st_uid : st_ptr->st_uid),
         get_group_name(show_link ? lst_ptr->st_gid : st_ptr->st_gid));                                        get_group_name(show_link ? lst_ptr->st_gid : st_ptr->st_gid));
        break;                                                                                                break;
    }                                                                                                     }
    for (info_str_ptr = buf_info; *info_str_ptr; info_str_ptr++) {                                        for (info_str_ptr = buf_info; *info_str_ptr; info_str_ptr++) {
        if (info_str_ptr[1] != ' ') // skip space                                                             if (info_str_ptr[1] != ' ') // skip space
            break;                                                                                                break;
    }                                                                                                     }
    info_str_len = strnlen(info_str_ptr, FILE_INFO_BUF_LEN);                                              info_str_len = strnlen(info_str_ptr, FILE_INFO_BUF_LEN);

    file_name_cols = utf8s_columns(buf_name, main_win_get_columns());                                     file_name_cols = utf8s_columns(buf_name, main_win_get_columns());
    rest_space_for_file_name = LIM_MIN(0,                                                                 rest_space_for_file_name = LIM_MIN(0,
     sub_win_get_columns() - (SELECTED_MARK_LEN + info_str_len));                                          sub_win_get_columns() - (SELECTED_MARK_LEN + info_str_len));
    if (trunc_file_name) {                                                                                if (trunc_file_name) {
        // truncate file name not to overwrap to file info.                                                   // truncate file name not to overwrap to file info.
        // *file.ext    iiiiiiiiiiiiiiiiiiiiiii                                                               // *file.ext    iiiiiiiiiiiiiiiiiiiiiii
        // *filename.e~ iiiiiiiiiiiiiiiiiiiiiii                                                               // *filename.e~ iiiiiiiiiiiiiiiiiiiiiii
        file_name_space = LIM_MIN(LIM_MAX(file_name_cols, MIN_FILE_NAME_SPACE),                               file_name_space = LIM_MIN(LIM_MAX(file_name_cols, MIN_FILE_NAME_SPACE),
         rest_space_for_file_name);                                                                            rest_space_for_file_name);
    } else {                                                                                              } else {
        // overwrap file name to file info.                                                                   // overwrap file name to file info.
        // *file.ext    iiiiiiiiiiiiiiiiiiiiiii                                                               // *file.ext    iiiiiiiiiiiiiiiiiiiiiii
        // *filename.ext ~iiiiiiiiiiiiiiiiiiiii                                                               // *filename.ext ~iiiiiiiiiiiiiiiiiiiii
        file_name_space = LIM_MAX(LIM_MIN(file_name_cols, rest_space_for_file_name),                          file_name_space = LIM_MAX(LIM_MIN(file_name_cols, rest_space_for_file_name),
         sub_win_get_columns() - SELECTED_MARK_LEN);                                                           sub_win_get_columns() - SELECTED_MARK_LEN);
    }                                                                                                     }
    if (file_name_cols > file_name_space) {                                                               if (file_name_cols > file_name_space) {
        truncate_tail_utf8s_columns(buf_name, file_name_space-1);                                             truncate_tail_utf8s_columns(buf_name, file_name_space-1);
        strlcat__(buf_name, MAX_PATH_LEN, "~"); // add truncated-mark                                         strlcat__(buf_name, MAX_PATH_LEN, "~"); // add truncated-mark
    }                                                                                                     }
    expand_utf8s_columns(buf_name, file_name_space);                                                      expand_utf8s_columns(buf_name, file_name_space);
    info_space = LIM_MIN(0, sub_win_get_columns() - (SELECTED_MARK_LEN + file_name_space));               info_space = LIM_MIN(0, sub_win_get_columns() - (SELECTED_MARK_LEN + file_name_space));
    if (info_space < strnlen(info_str_ptr, FILE_INFO_BUF_LEN)) {                                          if (info_space < strnlen(info_str_ptr, FILE_INFO_BUF_LEN)) {
        // truncate head                                                                                      // truncate head
        info_str_ptr = &info_str_ptr[strnlen(info_str_ptr, FILE_INFO_BUF_LEN) - info_space];                  info_str_ptr = &info_str_ptr[strnlen(info_str_ptr, FILE_INFO_BUF_LEN) - info_space];
        if (info_space >= 3) {                                                                                if (info_space >= 3) {
            info_str_ptr[0] = ' ';  // truncate-head mark                                                         info_str_ptr[0] = ' ';  // truncate-head mark
            info_str_ptr[1] = '~';  // truncate-head mark                                                         info_str_ptr[1] = '~';  // truncate-head mark
        }                                                                                                     }
    }                                                                                                     }
    if (show_link == 0 && is_link_broken) {                                                               if (show_link == 0 && is_link_broken) {
        strlcpy__(buffer, _(" <<broken-link>>"), FILE_NAME_INFO_BUF_LEN);                                     strlcpy__(buffer, _(" <<broken-link>>"), FILE_NAME_INFO_BUF_LEN);
    } else {                                                                                              } else {
        snprintf_(buffer, FILE_NAME_INFO_BUF_LEN+1, "%c%s%s",                                                 snprintf_(buffer, FILE_NAME_INFO_BUF_LEN+1, "%c%s%s",
         selected ? '*' : ' ', buf_name, info_str_ptr);                                                        selected ? '*' : ' ', buf_name, info_str_ptr);
    }                                                                                                     }
    return buffer;                                                                                        return buffer;
}                                                                                                     }
PRIVATE char *get_file_size_str(char *buf_size, loff_t size)                                          PRIVATE char *get_file_size_str(char *buf_size, loff_t size)
{                                                                                                     {
    char buf[5+1];      // 1.000 - 999.9 - 10000 - 99999                                                  char buf[5+1];      // 1.000 - 999.9 - 10000 - 99999

    if (size < 1000000ULL)                  // less than 1 MEGA (0 - 999999)                              if (size < 1000000ULL)                  // less than 1 MEGA (0 - 999999)
        snprintf_(buf_size, 6+1, "%6d", (int)size);                                                           snprintf_(buf_size, 6+1, "%6d", (int)size);
    else if (size < 1000000000ULL)          // less than 1000 MEGA (1.000M - 999.9M)                      else if (size < 1000000000ULL)          // less than 1000 MEGA (1.000M - 999.9M)
        snprintf_(buf_size, 6+1, "%sM", get_1k_to_999k_str(size / 1000ULL, buf));                             snprintf_(buf_size, 6+1, "%sM", get_1k_to_999k_str(size / 1000ULL, buf));
    else if (size < 1000000000000ULL)       // less than 1000 GIGA (1.000G - 999.9G)                      else if (size < 1000000000000ULL)       // less than 1000 GIGA (1.000G - 999.9G)
        snprintf_(buf_size, 6+1, "%sG", get_1k_to_999k_str(size / 1000000ULL, buf));                          snprintf_(buf_size, 6+1, "%sG", get_1k_to_999k_str(size / 1000000ULL, buf));
    else if (size < 1000000000000000ULL)    // less than 1000 TERA (1.000T - 999.9T)                      else if (size < 1000000000000000ULL)    // less than 1000 TERA (1.000T - 999.9T)
        snprintf_(buf_size, 6+1, "%sT", get_1k_to_999k_str(size / 1000000000ULL, buf));                       snprintf_(buf_size, 6+1, "%sT", get_1k_to_999k_str(size / 1000000000ULL, buf));
    else if (size < 1000000000000000000ULL) // less than 1000 PETA (1.000P - 999.9P)                      else if (size < 1000000000000000000ULL) // less than 1000 PETA (1.000P - 999.9P)
        snprintf_(buf_size, 6+1, "%sP", get_1k_to_999k_str(size / 1000000000000ULL, buf));                    snprintf_(buf_size, 6+1, "%sP", get_1k_to_999k_str(size / 1000000000000ULL, buf));
    else                                    // less than 18000 EXA (1.000E - 18.44E)                      else                                    // less than 18000 EXA (1.000E - 18.44E)
        snprintf_(buf_size, 6+1, "%sE", get_1k_to_999k_str(size / 1000000000000000ULL, buf));                 snprintf_(buf_size, 6+1, "%sE", get_1k_to_999k_str(size / 1000000000000000ULL, buf));
    return buf_size;                                                                                      return buf_size;
}                                                                                                     }
PRIVATE const char *get_1k_to_999k_str(long size, char *buf)                                          PRIVATE const char *get_1k_to_999k_str(long size, char *buf)
{                                                                                                     {
    if (size < 10000UL)                 // less than 10K (1.000K - 9.999K)                                if (size < 10000UL)                 // less than 10K (1.000K - 9.999K)
        snprintf_(buf, 5+1, "%1d.%03d",                                                                       snprintf_(buf, 5+1, "%1d.%03d",
         (int)(size / 1000), (int)((size / 1) % 1000));                                                        (int)(size / 1000), (int)((size / 1) % 1000));
    else if (size < 100000UL)           // less than 100K (10.00M - 99.99G)                               else if (size < 100000UL)           // less than 100K (10.00M - 99.99G)
        snprintf_(buf, 5+1, "%2d.%02d",                                                                       snprintf_(buf, 5+1, "%2d.%02d",
         (int)(size / 1000), (int)((size / 10) % 100));                                                        (int)(size / 1000), (int)((size / 10) % 100));
    else if (size < 1000000UL)          // less than 1000K (100.0K - 999.9K)                              else if (size < 1000000UL)          // less than 1000K (100.0K - 999.9K)
        snprintf_(buf, 5+1, "%3d.%1d",                                                                        snprintf_(buf, 5+1, "%3d.%1d",
         (int)(size / 1000), (int)((size / 100) % 10));                                                        (int)(size / 1000), (int)((size / 100) % 10));
    else if (size < 1000 * 99999ULL)    // 1000K - 99999K                                                 else if (size < 1000 * 99999ULL)    // 1000K - 99999K
        snprintf_(buf, 5+1, "%5d", (int)(size / 1000));                                                       snprintf_(buf, 5+1, "%5d", (int)(size / 1000));
    return buf;                                                                                           return buf;
}                                                                                                     }

//     0 - 99999                                                                                      //     0 - 99999
//  100K -  999K                                                                                      //  100K -  999K
// 1.00M - 9.99M                                                                                      // 1.00M - 9.99M
// 10.0M - 99.9M                                                                                      // 10.0M - 99.9M
//  100M -  999M                                                                                      //  100M -  999M
// 1.00G - 9.99G                                                                                      // 1.00G - 9.99G
// 10.0G - 99.9G                                                                                      // 10.0G - 99.9G
//  100G -  999G                                                                                      //  100G -  999G

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int make_file_list(filer_view_t *fv, const char *filter)                                              int make_file_list(filer_view_t *fv, const char *filter)
{                                                                                                     {
    char dir_save[MAX_PATH_LEN+1];                                                                        char dir_save[MAX_PATH_LEN+1];
    DIR *dir;                                                                                             DIR *dir;
    struct dirent *dirent;                                                                                struct dirent *dirent;
    char symlink[MAX_PATH_LEN+1];                                                                         char symlink[MAX_PATH_LEN+1];
    file_info_t *ent_ptr;   // file entry                                                                 file_info_t *ent_ptr;   // file entry
    struct stat st;                                                                                       struct stat st;
    struct stat lst;                                                                                      struct stat lst;
    int entries;                                                                                          int entries;
    int file_idx;                                                                                         int file_idx;
    int len;                                                                                              int len;

    change_cur_dir_after_save(dir_save, fv->cur_dir);                                                     change_cur_dir_after_save(dir_save, fv->cur_dir);

    free_file_list(fv);                                                                                   free_file_list(fv);

    if (strcmp(filter, "") == 0)                                                                          if (strcmp(filter, "") == 0)
        filter = "*";                                                                                         filter = "*";
    if ((dir = opendir(fv->cur_dir)) == NULL) {                                                           if ((dir = opendir(fv->cur_dir)) == NULL) {
        goto make_file_list_ret;                                                                              goto make_file_list_ret;
    }                                                                                                     }
    for (file_idx = 0; (dirent = readdir(dir)) != NULL; file_idx++) {                                     for (file_idx = 0; (dirent = readdir(dir)) != NULL; file_idx++) {
        // count files                                                                                        // count files
    }                                                                                                     }
    entries = file_idx;                                                                                   entries = file_idx;
    _mlc_set_caller                                                                                       _mlc_set_caller
    fv->file_list = (file_info_t *)malloc__(sizeof(file_info_t) * entries);                               fv->file_list = (file_info_t *)malloc__(sizeof(file_info_t) * entries);

    rewinddir(dir);                                                                                       rewinddir(dir);
    for (file_idx = 0; file_idx < entries && (dirent = readdir(dir)) != NULL; ) {                         for (file_idx = 0; file_idx < entries && (dirent = readdir(dir)) != NULL; ) {
        if (lstat(dirent->d_name, &lst) < 0)    // stat link itself                                           if (lstat(dirent->d_name, &lst) < 0)    // stat link itself
            continue;                                                                                             continue;
        if (S_ISLNK(lst.st_mode)                                                                              if (S_ISLNK(lst.st_mode)
         && stat(dirent->d_name, &st) >= 0) {   // stat linked file                                            && stat(dirent->d_name, &st) >= 0) {   // stat linked file
            // stating file succeeded                                                                             // stating file succeeded
        } else {                                                                                              } else {
            // copy from lst to st                                                                                // copy from lst to st
            memcpy__(&st, &lst, sizeof(struct stat));                                                             memcpy__(&st, &lst, sizeof(struct stat));
        }                                                                                                     }
        if (S_ISDIR(st.st_mode)                                                                               if (S_ISDIR(st.st_mode)
         || (S_ISDIR(st.st_mode) == 0 && fnmatch(filter, dirent->d_name, 0) == 0)) {                           || (S_ISDIR(st.st_mode) == 0 && fnmatch(filter, dirent->d_name, 0) == 0)) {
            if (GET_APPMD(fl_SHOW_DOT_FILE) == 0                                                                  if (GET_APPMD(fl_SHOW_DOT_FILE) == 0
             && ((strncmp(dirent->d_name, ".", 1) == 0 && strcmp(dirent->d_name, "..") != 0)                       && ((strncmp(dirent->d_name, ".", 1) == 0 && strcmp(dirent->d_name, "..") != 0)
              || ((st.st_mode & RWXRWXRWX) == 0)                                                                    || ((st.st_mode & RWXRWXRWX) == 0)
              || ((st.st_mode & RWXRWXRWX) == RW0000RW0)))                                                          || ((st.st_mode & RWXRWXRWX) == RW0000RW0)))
                // ".", ".????" or (mode == 000)                                                                      // ".", ".????" or (mode == 000)
                continue;                                                                                             continue;
            ent_ptr = &fv->file_list[file_idx];                                                                   ent_ptr = &fv->file_list[file_idx];
            // fill file_info_t                                                                                   // fill file_info_t
            _mlc_set_caller                                                                                       _mlc_set_caller
            ent_ptr->file_name = malloc_strcpy(dirent->d_name);                                                   ent_ptr->file_name = malloc_strcpy(dirent->d_name);
            memcpy__(&ent_ptr->st, &st, sizeof(struct stat));                                                     memcpy__(&ent_ptr->st, &st, sizeof(struct stat));
            memcpy__(&ent_ptr->lst, &lst, sizeof(struct stat));                                                   memcpy__(&ent_ptr->lst, &lst, sizeof(struct stat));
            ent_ptr->symlink = NULL;                                                                              ent_ptr->symlink = NULL;
            if (S_ISLNK(lst.st_mode)) {                                                                           if (S_ISLNK(lst.st_mode)) {
                if ((len = readlink__(dirent->d_name, symlink, MAX_PATH_LEN)) > 0) {                                  if ((len = readlink__(dirent->d_name, symlink, MAX_PATH_LEN)) > 0) {
                    _mlc_set_caller                                                                                       _mlc_set_caller
                    ent_ptr->symlink = malloc_strcpy(symlink);                                                            ent_ptr->symlink = malloc_strcpy(symlink);
                }                                                                                                     }
            }                                                                                                     }
            ent_ptr->selected = 0;                                                                                ent_ptr->selected = 0;
            file_idx++;                                                                                           file_idx++;
        }                                                                                                     }
    }                                                                                                     }
    closedir(dir);                                                                                        closedir(dir);
    fv->file_list_entries = file_idx;                                                                     fv->file_list_entries = file_idx;
    fv->cur_sel_idx = MIN_(fv->file_list_entries-1, fv->cur_sel_idx);                                     fv->cur_sel_idx = MIN_(fv->file_list_entries-1, fv->cur_sel_idx);

make_file_list_ret:;                                                                                  make_file_list_ret:;
    change_cur_dir(dir_save);                                                                             change_cur_dir(dir_save);
    return fv->file_list_entries;                                                                         return fv->file_list_entries;
}                                                                                                     }
// Free malloc()ed memory                                                                             // Free malloc()ed memory
void free_file_list(filer_view_t *fv)                                                                 void free_file_list(filer_view_t *fv)
{                                                                                                     {
    if (fv->file_list) {                                                                                  if (fv->file_list) {
        for (int file_idx = 0; file_idx < fv->file_list_entries; file_idx++) {                                for (int file_idx = 0; file_idx < fv->file_list_entries; file_idx++) {
            if (fv->file_list[file_idx].file_name) {                                                              if (fv->file_list[file_idx].file_name) {
                FREE_CLR_PTR(fv->file_list[file_idx].file_name);                                                      FREE_CLR_PTR(fv->file_list[file_idx].file_name);
            }                                                                                                     }
            if (fv->file_list[file_idx].symlink) {                                                                if (fv->file_list[file_idx].symlink) {
                FREE_CLR_PTR(fv->file_list[file_idx].symlink);                                                        FREE_CLR_PTR(fv->file_list[file_idx].symlink);
            }                                                                                                     }
        }                                                                                                     }
        FREE_CLR_PTR(fv->file_list);                                                                          FREE_CLR_PTR(fv->file_list);
    }                                                                                                     }
    fv->file_list_entries = 0;                                                                            fv->file_list_entries = 0;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
// sort file list                                                                                     // sort file list
PRIVATE int comp_file_type(file_info_t *aa, file_info_t *bb);                                         PRIVATE int comp_file_type(file_info_t *aa, file_info_t *bb);
PRIVATE int comp_file_info(const void *aa, const void *bb);                                           PRIVATE int comp_file_info(const void *aa, const void *bb);
PRIVATE int comp_file_info_(const void *aa, const void *bb);                                          PRIVATE int comp_file_info_(const void *aa, const void *bb);
PRIVATE int comp_file_name(const void *aa, const void *bb);                                           PRIVATE int comp_file_name(const void *aa, const void *bb);
PRIVATE int comp_file_extension(const void *aa, const void *bb);                                      PRIVATE int comp_file_extension(const void *aa, const void *bb);
PRIVATE int comp_file_time(const void *aa, const void *bb);                                           PRIVATE int comp_file_time(const void *aa, const void *bb);
PRIVATE int comp_file_size(const void *aa, const void *bb);                                           PRIVATE int comp_file_size(const void *aa, const void *bb);
PRIVATE int comp_file_executable(file_info_t *aa, file_info_t *bb);                                   PRIVATE int comp_file_executable(file_info_t *aa, file_info_t *bb);
////PRIVATE int get_file_type_num(file_info_t *info);                                              <
PRIVATE int get_stat_file_type_num(struct stat *st, const char *file_name);                           PRIVATE int get_stat_file_type_num(struct stat *st, const char *file_name);
PRIVATE int get_file_executable(struct stat *st);                                                     PRIVATE int get_file_executable(struct stat *st);
PRIVATE int strtypecasecmp(const char *s1, const char *s2);                                           PRIVATE int strtypecasecmp(const char *s1, const char *s2);
void sort_file_list(filer_view_t *fv)                                                                 void sort_file_list(filer_view_t *fv)
{                                                                                                     {
    qsort(fv->file_list, fv->file_list_entries, sizeof(file_info_t), comp_file_info);                     qsort(fv->file_list, fv->file_list_entries, sizeof(file_info_t), comp_file_info);
}                                                                                                     }

// Comparison functions for file list ------------------------------------------                      // Comparison functions for file list ------------------------------------------
PRIVATE int comp_file_info(const void *aa, const void *bb)                                            PRIVATE int comp_file_info(const void *aa, const void *bb)
{                                                                                                     {
    int ret;                                                                                              int ret;
    if ((ret = comp_file_type((file_info_t *)aa, (file_info_t *)bb)) != 0) {                              if ((ret = comp_file_type((file_info_t *)aa, (file_info_t *)bb)) != 0) {
        return ret;                                                                                           return ret;
    }                                                                                                     }
    ///if (get_file_type_num((file_info_t *)aa) <= 22) {                                                  ///if (get_file_type_num((file_info_t *)aa) <= 22) {
    /// // always sort directory in first place                                                           /// // always sort directory in first place
    /// return comp_file_name(aa, bb);                                                                    /// return comp_file_name(aa, bb);
    ///}                                                                                                  ///}
    ret = comp_file_info_(aa, bb);                                                                        ret = comp_file_info_(aa, bb);
    switch (GET_APPMD(fl_FILE_SORT_BY)) {                                                                 switch (GET_APPMD(fl_FILE_SORT_BY)) {
    default:                                                                                              default:
    case FILE_SORT_BY_NAME:                                                                               case FILE_SORT_BY_NAME:
    case FILE_SORT_BY_EXT:                                                                                case FILE_SORT_BY_EXT:
    case FILE_SORT_BY_TIME:                                                                               case FILE_SORT_BY_TIME:
    case FILE_SORT_BY_SIZE:                                                                               case FILE_SORT_BY_SIZE:
        break;                                                                                                break;
    case FILE_SORT_BY_NAME_REV:                                                                           case FILE_SORT_BY_NAME_REV:
    case FILE_SORT_BY_EXT_REV:                                                                            case FILE_SORT_BY_EXT_REV:
    case FILE_SORT_BY_TIME_REV:                                                                           case FILE_SORT_BY_TIME_REV:
    case FILE_SORT_BY_SIZE_REV:                                                                           case FILE_SORT_BY_SIZE_REV:
        ret = -ret;                                                                                           ret = -ret;
        break;                                                                                                break;
    }                                                                                                     }
    return ret;                                                                                           return ret;
}                                                                                                     }
PRIVATE int comp_file_info_(const void *aa, const void *bb)                                           PRIVATE int comp_file_info_(const void *aa, const void *bb)
{                                                                                                     {
    int ret;                                                                                              int ret;

    switch (GET_APPMD(fl_FILE_SORT_BY)) {                                                                 switch (GET_APPMD(fl_FILE_SORT_BY)) {
    default:                                                                                              default:
    case FILE_SORT_BY_NAME:                                                                               case FILE_SORT_BY_NAME:
    case FILE_SORT_BY_NAME_REV:                                                                           case FILE_SORT_BY_NAME_REV:
        if ((ret = comp_file_name(aa, bb)))      {  return ret;     }                                         if ((ret = comp_file_name(aa, bb)))      {  return ret;     }
        if ((ret = comp_file_extension(aa, bb))) {  return ret;     }                                         if ((ret = comp_file_extension(aa, bb))) {  return ret;     }
        return ret;                                                                                           return ret;
    case FILE_SORT_BY_EXT:                                                                                case FILE_SORT_BY_EXT:
    case FILE_SORT_BY_EXT_REV:                                                                            case FILE_SORT_BY_EXT_REV:
        if ((ret = comp_file_executable((file_info_t *)aa, (file_info_t *)bb))) {                             if ((ret = comp_file_executable((file_info_t *)aa, (file_info_t *)bb))) {
            return ret;                                                                                           return ret;
        }                                                                                                     }
        if ((ret = comp_file_extension(aa, bb))) {  return ret;     }                                         if ((ret = comp_file_extension(aa, bb))) {  return ret;     }
        if ((ret = comp_file_name(aa, bb)))      {  return ret;     }                                         if ((ret = comp_file_name(aa, bb)))      {  return ret;     }
        return ret;                                                                                           return ret;
    case FILE_SORT_BY_TIME:                                                                               case FILE_SORT_BY_TIME:
    case FILE_SORT_BY_TIME_REV:                                                                           case FILE_SORT_BY_TIME_REV:
        return comp_file_time(aa, bb);                                                                        return comp_file_time(aa, bb);
    case FILE_SORT_BY_SIZE:                                                                               case FILE_SORT_BY_SIZE:
    case FILE_SORT_BY_SIZE_REV:                                                                           case FILE_SORT_BY_SIZE_REV:
        return comp_file_size(aa, bb);                                                                        return comp_file_size(aa, bb);
    }                                                                                                     }
}                                                                                                     }
// compare file type                                                                                  // compare file type
PRIVATE int comp_file_type(file_info_t *aa, file_info_t *bb)                                          PRIVATE int comp_file_type(file_info_t *aa, file_info_t *bb)
{                                                                                                     {
    return get_file_type_num(aa) - get_file_type_num(bb);                                                 return get_file_type_num(aa) - get_file_type_num(bb);
}                                                                                                     }
// sort directories before files,                                                                     // sort directories before files,
// sort by file name.                                                                                 // sort by file name.
PRIVATE int comp_file_name(const void *aa, const void *bb)                                            PRIVATE int comp_file_name(const void *aa, const void *bb)
{                                                                                                     {
    return strtypecasecmp(((file_info_t *)aa)->file_name, ((file_info_t *)bb)->file_name);                return strtypecasecmp(((file_info_t *)aa)->file_name, ((file_info_t *)bb)->file_name);
}                                                                                                     }
// sort directories before files,                                                                     // sort directories before files,
// sort executable files before non-executables,                                                      // sort executable files before non-executables,
// sort by file extension then by file name.                                                          // sort by file extension then by file name.
PRIVATE int comp_file_extension(const void *aa, const void *bb)                                       PRIVATE int comp_file_extension(const void *aa, const void *bb)
{                                                                                                     {
    return strcmp(get_file_name_extension(((file_info_t *)aa)->file_name),                                return strcmp(get_file_name_extension(((file_info_t *)aa)->file_name),
     get_file_name_extension(((file_info_t *)bb)->file_name));                                             get_file_name_extension(((file_info_t *)bb)->file_name));
}                                                                                                     }
// sort directories before files,                                                                     // sort directories before files,
// and then by modification time stamp.                                                               // and then by modification time stamp.
PRIVATE int comp_file_time(const void *aa, const void *bb)                                            PRIVATE int comp_file_time(const void *aa, const void *bb)
{                                                                                                     {
    return ((file_info_t *)aa)->st.st_mtime - ((file_info_t *)bb)->st.st_mtime;                           return ((file_info_t *)aa)->st.st_mtime - ((file_info_t *)bb)->st.st_mtime;
}                                                                                                     }
// sort directories before files,                                                                     // sort directories before files,
// and then by file size.                                                                             // and then by file size.
PRIVATE int comp_file_size(const void *aa, const void *bb)                                            PRIVATE int comp_file_size(const void *aa, const void *bb)
{                                                                                                     {
    return ((file_info_t *)aa)->st.st_size - ((file_info_t *)bb)->st.st_size;                             return ((file_info_t *)aa)->st.st_size - ((file_info_t *)bb)->st.st_size;
}                                                                                                     }
// sort executable files before non-executables                                                       // sort executable files before non-executables
PRIVATE int comp_file_executable(file_info_t *aa, file_info_t *bb)                                    PRIVATE int comp_file_executable(file_info_t *aa, file_info_t *bb)
{                                                                                                     {
    return get_file_executable(&aa->st) - get_file_executable(&bb->st);                                   return get_file_executable(&aa->st) - get_file_executable(&bb->st);
}                                                                                                     }

// rank of file type                                                                                  // rank of file type
//  1: ..                                                                                             //  1: ..
//  2: .                                                                                              //  2: .
// 10: unknown type                                                                                   // 10: unknown type
// 20: dir                                                                                            // 20: dir
// 30: symlink broken                                                                                 // 30: symlink broken
// 31: symlink to unknown type                                                                        // 31: symlink to unknown type
// 32: symlink to dir                                                                                 // 32: symlink to dir
// 33: symlink to symlink                                                                             // 33: symlink to symlink
// 34: symlink to FIFO                                                                                // 34: symlink to FIFO
// 35: symlink to socket                                                                              // 35: symlink to socket
// 36: symlink to char device                                                                         // 36: symlink to char device
// 37: symlink to block device                                                                        // 37: symlink to block device
// 38: symlink to regular file                                                                        // 38: symlink to regular file
// 40: FIFO                                                                                           // 40: FIFO
// 50: socket                                                                                         // 50: socket
// 60: char device                                                                                    // 60: char device
// 70: block device                                                                                   // 70: block device
// 80: regular file                                                                                   // 80: regular file

////PRIVATE                                                                                        <
int get_file_type_num(file_info_t *info)                                                              int get_file_type_num(file_info_t *info)
{                                                                                                     {
    int file_type_num = 0;                                                                                int file_type_num = 0;
    if (S_ISLNK(info->lst.st_mode)) {                                                                     if (S_ISLNK(info->lst.st_mode)) {
        if (memcmp(&(info->st), &(info->lst), sizeof(info->st)) != 0) {                                       if (memcmp(&(info->st), &(info->lst), sizeof(info->st)) != 0) {
            file_type_num = 30 + get_stat_file_type_num(&(info->st), info->file_name) / 10;                       file_type_num = 30 + get_stat_file_type_num(&(info->st), info->file_name) / 10;
        } else {                                                                                              } else {
            file_type_num = 30; // broken symlink                                                                 file_type_num = 30; // broken symlink
        }                                                                                                     }
    } else {                                                                                              } else {
        file_type_num = get_stat_file_type_num(&(info->st), info->file_name);                                 file_type_num = get_stat_file_type_num(&(info->st), info->file_name);
    }                                                                                                     }
    return file_type_num;                                                                                 return file_type_num;
}                                                                                                     }
PRIVATE int get_stat_file_type_num(struct stat *st, const char *file_name)                            PRIVATE int get_stat_file_type_num(struct stat *st, const char *file_name)
{                                                                                                     {
    int file_type_num = 10;     // unknown type                                                           int file_type_num = 10;     // unknown type
    if (S_ISDIR(st->st_mode)) {                                                                           if (S_ISDIR(st->st_mode)) {
        if (strcmp(file_name, "..") == 0) {                                                                   if (strcmp(file_name, "..") == 0) {
            file_type_num = 1;  // ".."                                                                           file_type_num = 1;  // ".."
        } else                                                                                                } else
        if (strcmp(file_name, ".") == 0) {                                                                    if (strcmp(file_name, ".") == 0) {
            file_type_num = 2;  // "."                                                                            file_type_num = 2;  // "."
        } else {                                                                                              } else {
            file_type_num = 20; // dir                                                                            file_type_num = 20; // dir
        }                                                                                                     }
    } else                                                                                                } else
    if (S_ISLNK(st->st_mode)) {                                                                           if (S_ISLNK(st->st_mode)) {
        file_type_num = 30;     // symlink                                                                    file_type_num = 30;     // symlink
    } else                                                                                                } else
    if (S_ISFIFO(st->st_mode)) {                                                                          if (S_ISFIFO(st->st_mode)) {
        file_type_num = 40;     // FIFO                                                                       file_type_num = 40;     // FIFO
    } else                                                                                                } else
    if (S_ISSOCK(st->st_mode)) {                                                                          if (S_ISSOCK(st->st_mode)) {
        file_type_num = 50;     // socket                                                                     file_type_num = 50;     // socket
    } else                                                                                                } else
    if (S_ISCHR(st->st_mode)) {                                                                           if (S_ISCHR(st->st_mode)) {
        file_type_num = 60;     // character device                                                           file_type_num = 60;     // character device
    } else                                                                                                } else
    if (S_ISBLK(st->st_mode)) {                                                                           if (S_ISBLK(st->st_mode)) {
        file_type_num = 70;     // block device                                                               file_type_num = 70;     // block device
    } else                                                                                                } else
    if (S_ISREG(st->st_mode)) {                                                                           if (S_ISREG(st->st_mode)) {
        file_type_num = 80;     // regular file                                                               file_type_num = 80;     // regular file
    }                                                                                                     }
    return file_type_num;                                                                                 return file_type_num;
}                                                                                                     }
PRIVATE int get_file_executable(struct stat *st)                                                      PRIVATE int get_file_executable(struct stat *st)
{                                                                                                     {
    if (st->st_mode & S_IXUSR)                                                                            if (st->st_mode & S_IXUSR)
        return 0;                                                                                             return 0;
    return 1;                                                                                             return 1;
}                                                                                                     }
// smaller:                                                                                           // smaller:
//  ispunct()                                                                                         //  ispunct()
//  isdigit()                                                                                         //  isdigit()
//  isalpha()                                                                                         //  isalpha()
// larger:                                                                                            // larger:
PRIVATE int strtypecasecmp(const char *s1, const char *s2)                                            PRIVATE int strtypecasecmp(const char *s1, const char *s2)
{                                                                                                     {
    int diff;                                                                                             int diff;

    for ( ; *s1 != '\0' && *s2 != '\0'; s1++, s2++) {                                                     for ( ; *s1 != '\0' && *s2 != '\0'; s1++, s2++) {
        if ((diff = ispunct(*s1) - ispunct(*s2)) != 0) {                                                      if ((diff = ispunct(*s1) - ispunct(*s2)) != 0) {
            return -diff;                                                                                         return -diff;
        }                                                                                                     }
        if (tolower(*s1) != tolower(*s2))                                                                     if (tolower(*s1) != tolower(*s2))
            break;                                                                                                break;
    }                                                                                                     }
    return (tolower(*s1) - tolower(*s2));                                                                 return (tolower(*s1) - tolower(*s2));
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int get_files_selected_cfv(void)                                                                      int get_files_selected_cfv(void)
{                                                                                                     {
    return get_files_selected(get_cur_filer_view());                                                      return get_files_selected(get_cur_filer_view());
}                                                                                                     }
int get_files_selected(filer_view_t *fv)                                                              int get_files_selected(filer_view_t *fv)
{                                                                                                     {
    int idx;                                                                                              int idx;
    int files_selected = 0;                                                                               int files_selected = 0;

    for (idx = 0; idx < fv->file_list_entries; idx++) {                                                   for (idx = 0; idx < fv->file_list_entries; idx++) {
        if (fv->file_list[idx].selected) {                                                                    if (fv->file_list[idx].selected) {
            files_selected++;                                                                                     files_selected++;
        }                                                                                                     }
    }                                                                                                     }
    return files_selected;                                                                                return files_selected;
}                                                                                                     }

int select_and_get_first_file_idx_selected(void)                                                      int select_and_get_first_file_idx_selected(void)
{                                                                                                     {
    select_file_if_none_selected();                                                                       select_file_if_none_selected();
    return get_first_file_idx_selected();                                                                 return get_first_file_idx_selected();
}                                                                                                     }
int select_file_if_none_selected(void)                                                                int select_file_if_none_selected(void)
{                                                                                                     {
    int files_selected;                                                                                   int files_selected;
    int sel_idx = get_cur_filer_view()->cur_sel_idx;                                                      int sel_idx = get_cur_filer_view()->cur_sel_idx;

    files_selected = get_files_selected_cfv();                                                            files_selected = get_files_selected_cfv();
    if (files_selected == 0) {                                                                            if (files_selected == 0) {
        get_cur_filer_view()->file_list[sel_idx].selected = _FILE_SEL_AUTO_;                                  get_cur_filer_view()->file_list[sel_idx].selected = _FILE_SEL_AUTO_;
    }                                                                                                     }
    return files_selected;                                                                                return files_selected;
}                                                                                                     }
int get_first_file_idx_selected(void)                                                                 int get_first_file_idx_selected(void)
{                                                                                                     {
    int file_idx;                                                                                         int file_idx;

    for (file_idx = 0; file_idx < get_cur_filer_view()->file_list_entries; file_idx++) {                  for (file_idx = 0; file_idx < get_cur_filer_view()->file_list_entries; file_idx++) {
        if (get_cur_filer_view()->file_list[file_idx].selected)                                               if (get_cur_filer_view()->file_list[file_idx].selected)
            break;                                                                                                break;
    }                                                                                                     }
    if (file_idx < get_cur_filer_view()->file_list_entries)                                               if (file_idx < get_cur_filer_view()->file_list_entries)
        return file_idx;                                                                                      return file_idx;
    // no file selected, return current file                                                              // no file selected, return current file
    return get_cur_filer_view()->cur_sel_idx;                                                             return get_cur_filer_view()->cur_sel_idx;
}                                                                                                     }
int get_next_file_idx_selected(int start_file_idx)                                                    int get_next_file_idx_selected(int start_file_idx)
{                                                                                                     {
    int file_idx = start_file_idx < 0 ? 0 : start_file_idx+1;                                             int file_idx = start_file_idx < 0 ? 0 : start_file_idx+1;

    for ( ; file_idx < get_cur_filer_view()->file_list_entries; file_idx++) {                             for ( ; file_idx < get_cur_filer_view()->file_list_entries; file_idx++) {
        if (get_cur_filer_view()->file_list[file_idx].selected)                                               if (get_cur_filer_view()->file_list[file_idx].selected)
            break;                                                                                                break;
    }                                                                                                     }
    if (file_idx < get_cur_filer_view()->file_list_entries)                                               if (file_idx < get_cur_filer_view()->file_list_entries)
        return file_idx;                                                                                      return file_idx;
    return -1;  // no selected file found                                                                 return -1;  // no selected file found
}                                                                                                     }
void unselect_all_files_auto(char selection_bit)                                                      void unselect_all_files_auto(char selection_bit)
{                                                                                                     {
    for (int file_idx = 0 ; file_idx < get_cur_filer_view()->file_list_entries; file_idx++) {             for (int file_idx = 0 ; file_idx < get_cur_filer_view()->file_list_entries; file_idx++) {
        get_cur_filer_view()->file_list[file_idx].selected                                                    get_cur_filer_view()->file_list[file_idx].selected
         = get_cur_filer_view()->file_list[file_idx].selected & ~selection_bit;                                = get_cur_filer_view()->file_list[file_idx].selected & ~selection_bit;
    }                                                                                                     }
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int research_file_name_in_file_list(filer_view_t *fv)                                                 int research_file_name_in_file_list(filer_view_t *fv)
{                                                                                                     {
    int file_idx = search_file_name_in_file_list(fv, fv->next_file);                                      int file_idx = search_file_name_in_file_list(fv, fv->next_file);
    if (file_idx < 0) {                                                                                   if (file_idx < 0) {
        if (fv->cur_sel_idx >= 0)                                                                             if (fv->cur_sel_idx >= 0)
            file_idx = fv->cur_sel_idx;                                                                           file_idx = fv->cur_sel_idx;
        else                                                                                                  else
            file_idx = 0;                                                                                         file_idx = 0;
    }                                                                                                     }
    file_idx = MIN_MAX_(0, file_idx, fv->file_list_entries-1);                                            file_idx = MIN_MAX_(0, file_idx, fv->file_list_entries-1);
    fv->cur_sel_idx = file_idx;                                                                           fv->cur_sel_idx = file_idx;
    return 0;                                                                                             return 0;
}                                                                                                     }

int search_file_name_in_file_list(filer_view_t *fv, const char *file_name)                            int search_file_name_in_file_list(filer_view_t *fv, const char *file_name)
{                                                                                                     {
    int file_name_len;                                                                                    int file_name_len;
    // 0,1: the same file type, 2,3: all file                                                             // 0,1: the same file type, 2,3: all file
    // 0,2: case sensitive, 1,3: case ignorant                                                            // 0,2: case sensitive, 1,3: case ignorant
    // 0: the same file type    , case sensitive                                                          // 0: the same file type    , case sensitive
    // 1: the same file type    , case ignorant                                                           // 1: the same file type    , case ignorant
    // 2: may diffrent file type, case sensitive                                                          // 2: may diffrent file type, case sensitive
    // 3: may diffrent file type, case ignorant                                                           // 3: may diffrent file type, case ignorant
    int cmp_type;                                                                                         int cmp_type;

    // exact match                                                                                        // exact match
    for (int file_idx = 0; file_idx < fv->file_list_entries; file_idx++) {                                for (int file_idx = 0; file_idx < fv->file_list_entries; file_idx++) {
        if (strcmp(fv->file_list[file_idx].file_name, file_name) == 0) {                                      if (strcmp(fv->file_list[file_idx].file_name, file_name) == 0) {
            return file_idx;                                                                                      return file_idx;
        }                                                                                                     }
    }                                                                                                     }
    // partial match                                                                                      // partial match
    for (file_name_len = strlen(file_name); file_name_len; file_name_len--) {                             for (file_name_len = strlen(file_name); file_name_len; file_name_len--) {
        for (cmp_type = 0; cmp_type < 4; cmp_type++) {                                                        for (cmp_type = 0; cmp_type < 4; cmp_type++) {
            for (int file_idx = 0; file_idx < fv->file_list_entries; file_idx++) {                                for (int file_idx = 0; file_idx < fv->file_list_entries; file_idx++) {
                if (((cmp_type < 2)     // cmp_type = 0, 1                                                            if (((cmp_type < 2)     // cmp_type = 0, 1
                  && (S_ISREG(get_cur_filer_view()                                                                      && (S_ISREG(get_cur_filer_view()
                       ->file_list[get_cur_filer_view()->cur_sel_idx].st.st_mode)                                            ->file_list[get_cur_filer_view()->cur_sel_idx].st.st_mode)
                      == S_ISREG(get_cur_filer_view()                                                                       == S_ISREG(get_cur_filer_view()
                       ->file_list[file_idx].st.st_mode)))                                                                   ->file_list[file_idx].st.st_mode)))
                 || (cmp_type >= 2)) {  // cmp_type = 2, 3                                                             || (cmp_type >= 2)) {  // cmp_type = 2, 3
                    if (((cmp_type % 2) == 0)                                                                             if (((cmp_type % 2) == 0)
                        // case sensitive                                                                                     // case sensitive
                      ? (strncmp(fv->file_list[file_idx].file_name, file_name,                                              ? (strncmp(fv->file_list[file_idx].file_name, file_name,
                         file_name_len) == 0)                                                                                  file_name_len) == 0)
                        // case ignorant                                                                                      // case ignorant
                      : (strncasecmp(fv->file_list[file_idx].file_name, file_name,                                          : (strncasecmp(fv->file_list[file_idx].file_name, file_name,
                         file_name_len) == 0)) {                                                                               file_name_len) == 0)) {
                        return file_idx;                                                                                      return file_idx;
                    }                                                                                                     }
                }                                                                                                     }
            }                                                                                                     }
        }                                                                                                     }
    }                                                                                                     }
    return -1;                                                                                            return -1;
}                                                                                                     }

#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER

// End of filer2.c                                                                                    // End of filer2.c
kdiff3 ../old/be/filercmd.c filercmd.c #========================
/**************************************************************************                           /**************************************************************************
 *   filercmd.c                                                           *                            *   filercmd.c                                                           *
 *                                                                        *                            *                                                                        *
 *   Copyright (C) 1999-2003 Chris Allegretta                             *                            *   Copyright (C) 1999-2003 Chris Allegretta                             *
 *                                                                        *                            *                                                                        *
 *   This program is free software; you can redistribute it and/or modify *                            *   This program is free software; you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published by *                            *   it under the terms of the GNU General Public License as published by *
 *   the Free Software Foundation; either version 2, or (at your option)  *                            *   the Free Software Foundation; either version 2, or (at your option)  *
 *   any later version.                                                   *                            *   any later version.                                                   *
 *                                                                        *                            *                                                                        *
 *   This program is distributed in the hope that it will be useful,      *                            *   This program is distributed in the hope that it will be useful,      *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *                            *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *                            *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 *   GNU General Public License for more details.                         *                            *   GNU General Public License for more details.                         *
 *                                                                        *                            *                                                                        *
 *   You should have received a copy of the GNU General Public License    *                            *   You should have received a copy of the GNU General Public License    *
 *   along with this program; if not, write to the Free Software          *                            *   along with this program; if not, write to the Free Software          *
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *                            *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *
 *                                                                        *                            *                                                                        *
 **************************************************************************/                           **************************************************************************/

#include "headers.h"                                                                                  #include "headers.h"

#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER

PRIVATE int dof_open_file_(int recursive);                                                            PRIVATE int dof_open_file_(int recursive);

PRIVATE int filer_change_dir_to_cur_sel(void);                                                        PRIVATE int filer_change_dir_to_cur_sel(void);
PRIVATE int filer_change_dir_if_not_yet(char *dir);                                                   PRIVATE int filer_change_dir_if_not_yet(char *dir);
PRIVATE int filer_change_dir_to_prev_dir(void);                                                       PRIVATE int filer_change_dir_to_prev_dir(void);

#define BEPAGER     "bepager"                                                                         #define BEPAGER     "bepager"
#define BETAIL      "betail"                                                                          #define BETAIL      "betail"
#define BETRASH     "betrash"                                                                         #define BETRASH     "betrash"
#define BEMARKDEL   "bemarkdel"                                                                       #define BEMARKDEL   "bemarkdel"
#define BESIZE0     "besize0"                                                                         #define BESIZE0     "besize0"

#define BECMD       "becmd"     // becmd?                                                             #define BECMD       "becmd"     // becmd?

PRIVATE int is_reg_file_and_app_list_mode_then_enter_file_name()                                      PRIVATE int is_reg_file_and_app_list_mode_then_enter_file_name()
{                                                                                                     {
    if (S_ISREG(get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].st.st_mode)            if (S_ISREG(get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].st.st_mode)
     && is_app_list_mode()) {                                                                              && is_app_list_mode()) {
        filer_do_next = FILER_DO_ENTER_FILE_NAME;                                                             filer_do_next = FILER_DO_ENTER_FILE_NAME;
        return -1;                                                                                            return -1;
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }

int dof_up(void)                                                                                      int dof_up(void)
{                                                                                                     {
    get_cur_filer_view()->cur_sel_idx = MIN_MAX_(0,                                                       get_cur_filer_view()->cur_sel_idx = MIN_MAX_(0,
     get_cur_filer_view()->cur_sel_idx - 1,                                                                get_cur_filer_view()->cur_sel_idx - 1,
     get_cur_filer_view()->file_list_entries-1);                                                           get_cur_filer_view()->file_list_entries-1);
    return 1;                                                                                             return 1;
}                                                                                                     }
int dof_down(void)                                                                                    int dof_down(void)
{                                                                                                     {
    get_cur_filer_view()->cur_sel_idx = MIN_MAX_(0,                                                       get_cur_filer_view()->cur_sel_idx = MIN_MAX_(0,
     get_cur_filer_view()->cur_sel_idx + 1,                                                                get_cur_filer_view()->cur_sel_idx + 1,
     get_cur_filer_view()->file_list_entries-1);                                                           get_cur_filer_view()->file_list_entries-1);
    return 1;                                                                                             return 1;
}                                                                                                     }
int dof_page_up(void)                                                                                 int dof_page_up(void)
{                                                                                                     {
    get_cur_filer_view()->cur_sel_idx = MIN_MAX_(0,                                                       get_cur_filer_view()->cur_sel_idx = MIN_MAX_(0,
     get_cur_filer_view()->cur_sel_idx - FILER_VERT_SCROLL_LINES,                                          get_cur_filer_view()->cur_sel_idx - FILER_VERT_SCROLL_LINES,
     get_cur_filer_view()->file_list_entries-1);                                                           get_cur_filer_view()->file_list_entries-1);
    return 1;                                                                                             return 1;
}                                                                                                     }
int dof_page_down(void)                                                                               int dof_page_down(void)
{                                                                                                     {
    get_cur_filer_view()->cur_sel_idx = MIN_MAX_(0,                                                       get_cur_filer_view()->cur_sel_idx = MIN_MAX_(0,
     get_cur_filer_view()->cur_sel_idx + FILER_VERT_SCROLL_LINES,                                          get_cur_filer_view()->cur_sel_idx + FILER_VERT_SCROLL_LINES,
     get_cur_filer_view()->file_list_entries-1);                                                           get_cur_filer_view()->file_list_entries-1);
    return 1;                                                                                             return 1;
}                                                                                                     }
int dof_top_of_list(void)                                                                             int dof_top_of_list(void)
{                                                                                                     {
    get_cur_filer_view()->cur_sel_idx = 0;                                                                get_cur_filer_view()->cur_sel_idx = 0;
    return 1;                                                                                             return 1;
}                                                                                                     }
int dof_bottom_of_list(void)                                                                          int dof_bottom_of_list(void)
{                                                                                                     {
    get_cur_filer_view()->cur_sel_idx = get_cur_filer_view()->file_list_entries-1;                        get_cur_filer_view()->cur_sel_idx = get_cur_filer_view()->file_list_entries-1;
    return 1;                                                                                             return 1;
}                                                                                                     }

int dof_switch_filer_pane(void)                                                                       int dof_switch_filer_pane(void)
{                                                                                                     {
    set_filer_cur_pane_idx((get_filer_cur_pane_idx() + 1) % FILER_PANES);                                 set_filer_cur_pane_idx((get_filer_cur_pane_idx() + 1) % FILER_PANES);
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    return 1;                                                                                             return 1;
}                                                                                                     }
int dof_refresh_filer(void)                                                                           int dof_refresh_filer(void)
{                                                                                                     {
    disp_status_bar_done(_("File view refreshed"));                                                       disp_status_bar_done(_("File view refreshed"));
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    return 1;                                                                                             return 1;
}                                                                                                     }
int dof_tap_file(void)                                                                                int dof_tap_file(void)
{                                                                                                     {
    if (filer_change_dir_to_cur_sel()) {                                                                  if (filer_change_dir_to_cur_sel()) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (is_reg_file_and_app_list_mode_then_enter_file_name()) {                                           if (is_reg_file_and_app_list_mode_then_enter_file_name()) {
        return -1;                                                                                            return -1;
    }                                                                                                     }

    if (S_ISREG(get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].st.st_mode)) {         if (S_ISREG(get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].st.st_mode)) {
        if (count_edit_bufs() == 0) {                                                                         if (count_edit_bufs() == 0) {
            return dof_view_file();                                                                               return dof_view_file();
        } else {                                                                                              } else {
            return dof_open_file_non_recursive();                                                                 return dof_open_file_non_recursive();
        }                                                                                                     }
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_open_file(void)                                                                               int dof_open_file(void)
{                                                                                                     {
    dof_open_file_(RECURSIVE1);                                                                           dof_open_file_(RECURSIVE1);
////_D_(dump_edit_bufs())                                                                          <
    return 1;                                                                                             return 1;
}                                                                                                     }
int dof_open_file_non_recursive(void)                                                                 int dof_open_file_non_recursive(void)
{                                                                                                     {
    if (count_edit_bufs()) {                                                                              if (count_edit_bufs()) {
        return dof_call_editor();                                                                             return dof_call_editor();
    }                                                                                                     }
    dof_open_file_(RECURSIVE0);                                                                           dof_open_file_(RECURSIVE0);
    return 1;                                                                                             return 1;
}                                                                                                     }

int dof_open_proj_file(void)                                                                          int dof_open_proj_file(void)
{                                                                                                     {
    do_open_proj_file();                                                                                  do_open_proj_file();
    post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);                   post_cmd_processing(NULL, CURS_MOVE_HORIZ, LOCATE_CURS_NONE, UPDATE_SCRN_ALL_SOON);
    if (get_files_loaded() >= 0) {                                                                        if (get_files_loaded() >= 0) {
        filer_do_next = FILER_DO_FILE_LOADED;                                                                 filer_do_next = FILER_DO_FILE_LOADED;
    }                                                                                                     }
    clear_files_loaded();                                                                                 clear_files_loaded();
    return 1;                                                                                             return 1;
}                                                                                                     }

int dof_call_editor()                                                                                 int dof_call_editor()
{                                                                                                     {
    if (count_edit_bufs() == 0) {                                                                         if (count_edit_bufs() == 0) {
        return dof_edit_new_file();                                                                           return dof_edit_new_file();
    }                                                                                                     }
    call_editor(1, 1);                                                                                    call_editor(1, 1);
    return 1;                                                                                             return 1;
}                                                                                                     }

int dof_edit_new_file(void)                                                                           int dof_edit_new_file(void)
{                                                                                                     {
    char file_name[MAX_PATH_LEN+1];                                                                       char file_name[MAX_PATH_LEN+1];

    int ret = input_string_tail("", file_name, HISTORY_TYPE_IDX_CURSPOS , _("Edit new file:"));           int ret = input_string_tail("", file_name, HISTORY_TYPE_IDX_CURSPOS , _("Edit new file:"));
    if (ret < 0) {                                                                                        if (ret < 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (ret <= 0) {                                                                                       if (ret <= 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (load_file_name_upp_low(file_name, TUL0, OOE1, MOE0, LFH0, RECURSIVE0) <= 0) {                     if (load_file_name_upp_low(file_name, TUL0, OOE1, MOE0, LFH0, RECURSIVE0) <= 0) {
        tio_beep();                                                                                           tio_beep();
        return 0;                                                                                             return 0;
    }                                                                                                     }
    disp_files_loaded_if_ge_0();                                                                          disp_files_loaded_if_ge_0();
    filer_do_next = FILER_DO_FILE_LOADED;                                                                 filer_do_next = FILER_DO_FILE_LOADED;
    return 1;                                                                                             return 1;
}                                                                                                     }
int dof_view_file(void)                                                                               int dof_view_file(void)
{                                                                                                     {
    char *file_name;                                                                                      char *file_name;

    if (filer_change_dir_to_cur_sel()) {                                                                  if (filer_change_dir_to_cur_sel()) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    int file_idx = get_cur_filer_view()->cur_sel_idx;                                                     int file_idx = get_cur_filer_view()->cur_sel_idx;
    file_name = get_cur_filer_view()->file_list[file_idx].file_name;                                      file_name = get_cur_filer_view()->file_list[file_idx].file_name;
    if (S_ISREG(get_cur_filer_view()->file_list[file_idx].st.st_mode)) {                                  if (S_ISREG(get_cur_filer_view()->file_list[file_idx].st.st_mode)) {
        if (fork_exec_args_once(PAUSE0, BEPAGER, file_name, 0))                                               if (fork_exec_args_once(PAUSE0, BEPAGER, file_name, 0))
            if (fork_exec_args_once(PAUSE0, "less", file_name, 0))                                                if (fork_exec_args_once(PAUSE0, "less", file_name, 0))
                fork_exec_args_once(PAUSE0, "more", file_name, 0);                                                    fork_exec_args_once(PAUSE0, "more", file_name, 0);
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_tail_file(void) // view file with "tail" command                                              int dof_tail_file(void) // view file with "tail" command
{                                                                                                     {
    char *file_name;                                                                                      char *file_name;

    if (filer_change_dir_to_cur_sel()) {                                                                  if (filer_change_dir_to_cur_sel()) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    int file_idx = get_cur_filer_view()->cur_sel_idx;                                                     int file_idx = get_cur_filer_view()->cur_sel_idx;
    file_name = get_cur_filer_view()->file_list[file_idx].file_name;                                      file_name = get_cur_filer_view()->file_list[file_idx].file_name;
    if (S_ISREG(get_cur_filer_view()->file_list[file_idx].st.st_mode)) {                                  if (S_ISREG(get_cur_filer_view()->file_list[file_idx].st.st_mode)) {
        fork_exec_args_once(PAUSE0, BETAIL, file_name, 0);                                                    fork_exec_args_once(PAUSE0, BETAIL, file_name, 0);
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_copy_file(void)                                                                               int dof_copy_file(void)
{                                                                                                     {
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];

    int ret = input_string_tail(get_other_filer_view()->cur_dir, file_path,                               int ret = input_string_tail(get_other_filer_view()->cur_dir, file_path,
     HISTORY_TYPE_IDX_DIR, _("Copy to:"));                                                                 HISTORY_TYPE_IDX_DIR, _("Copy to:"));
    if (ret < 0) {                                                                                        if (ret < 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (ret <= 0) {                                                                                       if (ret <= 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    begin_fork_exec_repeat();                                                                             begin_fork_exec_repeat();
    for (int file_idx = select_and_get_first_file_idx_selected();                                         for (int file_idx = select_and_get_first_file_idx_selected();
     file_idx >= 0;                                                                                        file_idx >= 0;
     file_idx = get_next_file_idx_selected(file_idx)) {                                                    file_idx = get_next_file_idx_selected(file_idx)) {
        if (is_sigint_signaled())                                                                             if (is_sigint_signaled())
            break;                                                                                                break;
#ifndef USE_BUSYBOX                                                                                   #ifndef USE_BUSYBOX
        fork_exec_args_repeat(SEPARATE1, "cp", "-afv",                                                        fork_exec_args_repeat(SEPARATE1, "cp", "-afv",
         get_cur_filer_view()->file_list[file_idx].file_name, file_path, 0);                                   get_cur_filer_view()->file_list[file_idx].file_name, file_path, 0);
#else                                                                                                 #else
        fork_exec_args_repeat(SEPARATE1, "cp", "-a",                                                          fork_exec_args_repeat(SEPARATE1, "cp", "-a",
         get_cur_filer_view()->file_list[file_idx].file_name, file_path, 0);                                   get_cur_filer_view()->file_list[file_idx].file_name, file_path, 0);
#endif                                                                                                #endif
    }                                                                                                     }
    end_fork_exec_repeat();                                                                               end_fork_exec_repeat();
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_copy_file_update(void)                                                                        int dof_copy_file_update(void)
{                                                                                                     {
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];

    int ret = input_string_tail(get_other_filer_view()->cur_dir, file_path,                               int ret = input_string_tail(get_other_filer_view()->cur_dir, file_path,
     HISTORY_TYPE_IDX_DIR, _("Copy to (Update):"));                                                        HISTORY_TYPE_IDX_DIR, _("Copy to (Update):"));
    if (ret < 0) {                                                                                        if (ret < 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (ret <= 0) {                                                                                       if (ret <= 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    begin_fork_exec_repeat();                                                                             begin_fork_exec_repeat();
    for (int file_idx = select_and_get_first_file_idx_selected();                                         for (int file_idx = select_and_get_first_file_idx_selected();
     file_idx >= 0;                                                                                        file_idx >= 0;
     file_idx = get_next_file_idx_selected(file_idx)) {                                                    file_idx = get_next_file_idx_selected(file_idx)) {
        if (is_sigint_signaled())                                                                             if (is_sigint_signaled())
            break;                                                                                                break;
#ifndef USE_BUSYBOX                                                                                   #ifndef USE_BUSYBOX
        fork_exec_args_repeat(SEPARATE1, "cp", "-aufv",                                                       fork_exec_args_repeat(SEPARATE1, "cp", "-aufv",
         get_cur_filer_view()->file_list[file_idx].file_name, file_path, 0);                                   get_cur_filer_view()->file_list[file_idx].file_name, file_path, 0);
#else                                                                                                 #else
        fork_exec_args_repeat(SEPARATE1, "cp", "-a",                                                          fork_exec_args_repeat(SEPARATE1, "cp", "-a",
         get_cur_filer_view()->file_list[file_idx].file_name, file_path, 0);                                   get_cur_filer_view()->file_list[file_idx].file_name, file_path, 0);
#endif                                                                                                #endif
    }                                                                                                     }
    end_fork_exec_repeat();                                                                               end_fork_exec_repeat();
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_move_file(void)                                                                               int dof_move_file(void)
{                                                                                                     {
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];
    int ret;                                                                                              int ret;

    ret = input_string_tail(get_other_filer_view()->cur_dir, file_path,                                   ret = input_string_tail(get_other_filer_view()->cur_dir, file_path,
     HISTORY_TYPE_IDX_DIR, _("Move to:"));                                                                 HISTORY_TYPE_IDX_DIR, _("Move to:"));
    if (ret <= 0) {                                                                                       if (ret <= 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    begin_fork_exec_repeat();                                                                             begin_fork_exec_repeat();
    for (int file_idx = select_and_get_first_file_idx_selected();                                         for (int file_idx = select_and_get_first_file_idx_selected();
     file_idx >= 0;                                                                                        file_idx >= 0;
     file_idx = get_next_file_idx_selected(file_idx)) {                                                    file_idx = get_next_file_idx_selected(file_idx)) {
        if (is_sigint_signaled())                                                                             if (is_sigint_signaled())
            break;                                                                                                break;
#ifndef USE_BUSYBOX                                                                                   #ifndef USE_BUSYBOX
        fork_exec_args_repeat(SEPARATE1, "mv", "-ufv",                                                        fork_exec_args_repeat(SEPARATE1, "mv", "-ufv",
         get_cur_filer_view()->file_list[file_idx].file_name, file_path, 0);                                   get_cur_filer_view()->file_list[file_idx].file_name, file_path, 0);
#else                                                                                                 #else
        fork_exec_args_repeat(SEPARATE1, "mv",                                                                fork_exec_args_repeat(SEPARATE1, "mv",
         get_cur_filer_view()->file_list[file_idx].file_name, file_path, 0);                                   get_cur_filer_view()->file_list[file_idx].file_name, file_path, 0);
#endif                                                                                                #endif
    }                                                                                                     }
    end_fork_exec_repeat();                                                                               end_fork_exec_repeat();
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_trash_file(void)                                                                              int dof_trash_file(void)
{                                                                                                     {
    int files_selected;                                                                                   int files_selected;
    int ret;                                                                                              int ret;

    if ((files_selected = get_files_selected_cfv()) == 0)                                                 if ((files_selected = get_files_selected_cfv()) == 0)
        ret = ask_yes_no(ASK_YES_NO, _("Trash file %s ?"),                                                    ret = ask_yes_no(ASK_YES_NO, _("Trash file %s ?"),
         get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].file_name);                        get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].file_name);
    else                                                                                                  else
        ret = ask_yes_no(ASK_YES_NO, _("Trash %d files ?"), files_selected);                                  ret = ask_yes_no(ASK_YES_NO, _("Trash %d files ?"), files_selected);
    if (ret <= 0) {                                                                                       if (ret <= 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    begin_fork_exec_repeat();                                                                             begin_fork_exec_repeat();
    for (int file_idx = select_and_get_first_file_idx_selected();                                         for (int file_idx = select_and_get_first_file_idx_selected();
     file_idx >= 0;                                                                                        file_idx >= 0;
     file_idx = get_next_file_idx_selected(file_idx)) {                                                    file_idx = get_next_file_idx_selected(file_idx)) {
        if (is_sigint_signaled())                                                                             if (is_sigint_signaled())
            break;                                                                                                break;
        if (fork_exec_args_repeat(SEPARATE1, BETRASH,                                                         if (fork_exec_args_repeat(SEPARATE1, BETRASH,
         get_cur_filer_view()->file_list[file_idx].file_name, 0)) {                                            get_cur_filer_view()->file_list[file_idx].file_name, 0)) {
#ifndef USE_BUSYBOX                                                                                   #ifndef USE_BUSYBOX
            fork_exec_args_repeat(SEPARATE1, "rm", "-rv",                                                         fork_exec_args_repeat(SEPARATE1, "rm", "-rv",
             get_cur_filer_view()->file_list[file_idx].file_name, 0);                                              get_cur_filer_view()->file_list[file_idx].file_name, 0);
#else                                                                                                 #else
            fork_exec_args_repeat(SEPARATE1, "rm", "-r",                                                          fork_exec_args_repeat(SEPARATE1, "rm", "-r",
             get_cur_filer_view()->file_list[file_idx].file_name, 0);                                              get_cur_filer_view()->file_list[file_idx].file_name, 0);
#endif                                                                                                #endif
        }                                                                                                     }
    }                                                                                                     }
    end_fork_exec_repeat();                                                                               end_fork_exec_repeat();
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_delete_file(void)                                                                             int dof_delete_file(void)
{                                                                                                     {
    int files_selected;                                                                                   int files_selected;
    int ret;                                                                                              int ret;

    if ((files_selected = get_files_selected_cfv()) == 0)                                                 if ((files_selected = get_files_selected_cfv()) == 0)
        ret = ask_yes_no(ASK_YES_NO, _("Delete file %s ?"),                                                   ret = ask_yes_no(ASK_YES_NO, _("Delete file %s ?"),
         get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].file_name);                        get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].file_name);
    else                                                                                                  else
        ret = ask_yes_no(ASK_YES_NO, _("Delete %d files ?"), files_selected);                                 ret = ask_yes_no(ASK_YES_NO, _("Delete %d files ?"), files_selected);
    if (ret <= 0) {                                                                                       if (ret <= 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    begin_fork_exec_repeat();                                                                             begin_fork_exec_repeat();
    for (int file_idx = select_and_get_first_file_idx_selected();                                         for (int file_idx = select_and_get_first_file_idx_selected();
     file_idx >= 0;                                                                                        file_idx >= 0;
     file_idx = get_next_file_idx_selected(file_idx)) {                                                    file_idx = get_next_file_idx_selected(file_idx)) {
        if (is_sigint_signaled())                                                                             if (is_sigint_signaled())
            break;                                                                                                break;
#ifndef USE_BUSYBOX                                                                                   #ifndef USE_BUSYBOX
        fork_exec_args_repeat(SEPARATE1, "rm", "-rv",                                                         fork_exec_args_repeat(SEPARATE1, "rm", "-rv",
         get_cur_filer_view()->file_list[file_idx].file_name, 0);                                              get_cur_filer_view()->file_list[file_idx].file_name, 0);
#else                                                                                                 #else
        fork_exec_args_repeat(SEPARATE1, "rm", "-r",                                                          fork_exec_args_repeat(SEPARATE1, "rm", "-r",
         get_cur_filer_view()->file_list[file_idx].file_name, 0);                                              get_cur_filer_view()->file_list[file_idx].file_name, 0);
#endif                                                                                                #endif
    }                                                                                                     }
    end_fork_exec_repeat();                                                                               end_fork_exec_repeat();
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_mark_to_delete_file(void)                                                                     int dof_mark_to_delete_file(void)
{                                                                                                     {
    int files_selected;                                                                                   int files_selected;
    int ret;                                                                                              int ret;

    if ((files_selected = get_files_selected_cfv()) == 0)                                                 if ((files_selected = get_files_selected_cfv()) == 0)
        ret = ask_yes_no(ASK_YES_NO, _("Mark file %s to be Deleted later ?"),                                 ret = ask_yes_no(ASK_YES_NO, _("Mark file %s to be Deleted later ?"),
         get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].file_name);                        get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].file_name);
    else                                                                                                  else
        ret = ask_yes_no(ASK_YES_NO, _("Mark %d files to be Deleted later ?"),                                ret = ask_yes_no(ASK_YES_NO, _("Mark %d files to be Deleted later ?"),
         files_selected);                                                                                      files_selected);
    if (ret <= 0) {                                                                                       if (ret <= 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    begin_fork_exec_repeat();                                                                             begin_fork_exec_repeat();
    for (int file_idx = select_and_get_first_file_idx_selected();                                         for (int file_idx = select_and_get_first_file_idx_selected();
     file_idx >= 0;                                                                                        file_idx >= 0;
     file_idx = get_next_file_idx_selected(file_idx)) {                                                    file_idx = get_next_file_idx_selected(file_idx)) {
        if (is_sigint_signaled())                                                                             if (is_sigint_signaled())
            break;                                                                                                break;
        if (fork_exec_args_repeat(SEPARATE0, BEMARKDEL,                                                       if (fork_exec_args_repeat(SEPARATE0, BEMARKDEL,
         get_cur_filer_view()->file_list[file_idx].file_name, 0)) {                                            get_cur_filer_view()->file_list[file_idx].file_name, 0)) {
#ifndef USE_BUSYBOX                                                                                   #ifndef USE_BUSYBOX
            fork_exec_args_repeat(SEPARATE0, "chmod", "-v", "606",                                                fork_exec_args_repeat(SEPARATE0, "chmod", "-v", "606",
             get_cur_filer_view()->file_list[file_idx].file_name, 0);                                              get_cur_filer_view()->file_list[file_idx].file_name, 0);
#else                                                                                                 #else
            fork_exec_args_repeat(SEPARATE0, "chmod", "606",                                                      fork_exec_args_repeat(SEPARATE0, "chmod", "606",
             get_cur_filer_view()->file_list[file_idx].file_name, 0);                                              get_cur_filer_view()->file_list[file_idx].file_name, 0);
#endif                                                                                                #endif
        }                                                                                                     }
    }                                                                                                     }
    end_fork_exec_repeat();                                                                               end_fork_exec_repeat();
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_size_zero_file(void)                                                                          int dof_size_zero_file(void)
{                                                                                                     {
    int files_selected;                                                                                   int files_selected;
    int ret;                                                                                              int ret;

    if ((files_selected = get_files_selected_cfv()) == 0)                                                 if ((files_selected = get_files_selected_cfv()) == 0)
        ret = ask_yes_no(ASK_YES_NO, _("Make size of file %s 0 ?"),                                           ret = ask_yes_no(ASK_YES_NO, _("Make size of file %s 0 ?"),
         get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].file_name);                        get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].file_name);
    else                                                                                                  else
        ret = ask_yes_no(ASK_YES_NO, _("Make size of %d files 0 ?"),                                          ret = ask_yes_no(ASK_YES_NO, _("Make size of %d files 0 ?"),
         files_selected);                                                                                      files_selected);
    if (ret <= 0) {                                                                                       if (ret <= 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    begin_fork_exec_repeat();                                                                             begin_fork_exec_repeat();
    for (int file_idx = select_and_get_first_file_idx_selected();                                         for (int file_idx = select_and_get_first_file_idx_selected();
     file_idx >= 0;                                                                                        file_idx >= 0;
     file_idx = get_next_file_idx_selected(file_idx)) {                                                    file_idx = get_next_file_idx_selected(file_idx)) {
        if (is_sigint_signaled())                                                                             if (is_sigint_signaled())
            break;                                                                                                break;
        if (fork_exec_args_repeat(SEPARATE0, BESIZE0,                                                         if (fork_exec_args_repeat(SEPARATE0, BESIZE0,
         get_cur_filer_view()->file_list[file_idx].file_name, 0)) {                                            get_cur_filer_view()->file_list[file_idx].file_name, 0)) {
#ifndef USE_BUSYBOX                                                                                   #ifndef USE_BUSYBOX
            fork_exec_args_repeat(SEPARATE0, "chmod", "-v", "000",                                                fork_exec_args_repeat(SEPARATE0, "chmod", "-v", "000",
             get_cur_filer_view()->file_list[file_idx].file_name, 0);                                              get_cur_filer_view()->file_list[file_idx].file_name, 0);
#else                                                                                                 #else
            fork_exec_args_repeat(SEPARATE0, "chmod", "000",                                                      fork_exec_args_repeat(SEPARATE0, "chmod", "000",
             get_cur_filer_view()->file_list[file_idx].file_name, 0);                                              get_cur_filer_view()->file_list[file_idx].file_name, 0);
#endif                                                                                                #endif
        }                                                                                                     }
    }                                                                                                     }
    end_fork_exec_repeat();                                                                               end_fork_exec_repeat();
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_rename_file(void)                                                                             int dof_rename_file(void)
{                                                                                                     {
    char file_name[MAX_PATH_LEN+1];                                                                       char file_name[MAX_PATH_LEN+1];

    strlcpy__(file_name, get_cur_filer_view()                                                             strlcpy__(file_name, get_cur_filer_view()
     ->file_list[get_cur_filer_view()->cur_sel_idx].file_name, MAX_PATH_LEN);                              ->file_list[get_cur_filer_view()->cur_sel_idx].file_name, MAX_PATH_LEN);

    int ret = input_string_tail(file_name, file_name, HISTORY_TYPE_IDX_EXEC, _("Rename to:"));            int ret = input_string_tail(file_name, file_name, HISTORY_TYPE_IDX_EXEC, _("Rename to:"));
    if (ret < 0) {                                                                                        if (ret < 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (ret <= 0) {                                                                                       if (ret <= 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (fork_exec_args_once(PAUSE1, "mv", "-i",                                                           if (fork_exec_args_once(PAUSE1, "mv", "-i",
     get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].file_name,                         get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].file_name,
     file_name, 0) == 0) {                                                                                 file_name, 0) == 0) {
        strlcpy__(get_cur_filer_view()->next_file, file_name, MAX_PATH_LEN);                                  strlcpy__(get_cur_filer_view()->next_file, file_name, MAX_PATH_LEN);
        filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_find_file(void)                                                                               int dof_find_file(void)
{                                                                                                     {
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];

    int ret = input_string_tail("", file_path, HISTORY_TYPE_IDX_DIR, _("Find:"));                         int ret = input_string_tail("", file_path, HISTORY_TYPE_IDX_DIR, _("Find:"));
    if (ret < 0) {                                                                                        if (ret < 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (ret <= 0) {                                                                                       if (ret <= 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    strlcpy__(get_cur_filer_view()->next_file, file_path, MAX_PATH_LEN);                                  strlcpy__(get_cur_filer_view()->next_file, file_path, MAX_PATH_LEN);
    get_cur_filer_view()->top_idx = 0;                                                                    get_cur_filer_view()->top_idx = 0;
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_make_directory(void)                                                                          int dof_make_directory(void)
{                                                                                                     {
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];

    int ret = input_string_tail("", file_path, HISTORY_TYPE_IDX_DIR, _("Mkdir:"));                        int ret = input_string_tail("", file_path, HISTORY_TYPE_IDX_DIR, _("Mkdir:"));
    if (ret < 0) {                                                                                        if (ret < 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (ret <= 0) {                                                                                       if (ret <= 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    fork_exec_args_once(PAUSE1, "mkdir", "-p", file_path, 0);                                             fork_exec_args_once(PAUSE1, "mkdir", "-p", file_path, 0);
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_change_directory(void)                                                                        int dof_change_directory(void)
{                                                                                                     {
    char string[MAX_PATH_LEN+1];                                                                          char string[MAX_PATH_LEN+1];
    char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];

    int ret = input_string_tail("", string, HISTORY_TYPE_IDX_DIR, _("Chdir to:"));                        int ret = input_string_tail("", string, HISTORY_TYPE_IDX_DIR, _("Chdir to:"));
    if (ret < 0) {                                                                                        if (ret < 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (ret <= 0) {                                                                                       if (ret <= 0) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    get_file_line_col_from_str_null(string, file_path, NULL, NULL);                                       get_file_line_col_from_str_null(string, file_path, NULL, NULL);
    return filer_change_dir_parent(file_path);                                                            return filer_change_dir_parent(file_path);
}                                                                                                     }

int dof_parent_directory(void)                                                                        int dof_parent_directory(void)
{                                                                                                     {
    if (filer_change_dir("..")) {                                                                         if (filer_change_dir("..")) {
        return 1;   // OK                                                                                     return 1;   // OK
    }                                                                                                     }
    separate_path_to_dir_and_file(                                                                        separate_path_to_dir_and_file(
     get_cur_filer_view()->cur_dir,                                                                        get_cur_filer_view()->cur_dir,
     get_cur_filer_view()->cur_dir,                                                                        get_cur_filer_view()->cur_dir,
     get_cur_filer_view()->next_file);                                                                     get_cur_filer_view()->next_file);
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_beginning_directory(void)                                                                     int dof_beginning_directory(void)
{                                                                                                     {
    return filer_change_dir_if_not_yet(cur_filer_panes->org_cur_dir);                                     return filer_change_dir_if_not_yet(cur_filer_panes->org_cur_dir);
}                                                                                                     }
int dof_home_directory(void)                                                                          int dof_home_directory(void)
{                                                                                                     {
    return filer_change_dir_if_not_yet("~");                                                              return filer_change_dir_if_not_yet("~");
}                                                                                                     }
int dof_root_directory(void)                                                                          int dof_root_directory(void)
{                                                                                                     {
    return filer_change_dir_if_not_yet("/");                                                              return filer_change_dir_if_not_yet("/");
}                                                                                                     }
int dof_prev_directory(void)                                                                          int dof_prev_directory(void)
{                                                                                                     {
    return filer_change_dir_to_prev_dir();                                                                return filer_change_dir_to_prev_dir();
}                                                                                                     }
int dof_real_path(void)                                                                               int dof_real_path(void)
{                                                                                                     {
    char dir[MAX_PATH_LEN+1];                                                                             char dir[MAX_PATH_LEN+1];
    return filer_change_dir_if_not_yet(get_real_path_of_cur_dir(dir));                                    return filer_change_dir_if_not_yet(get_real_path_of_cur_dir(dir));
}                                                                                                     }
//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
int dof_select_file(void)                                                                             int dof_select_file(void)
{                                                                                                     {
    int files_selected;                                                                                   int files_selected;

    get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].selected                           get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].selected
     = get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].selected                         = get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].selected
      ^ _FILE_SEL_MAN_;                                                                                     ^ _FILE_SEL_MAN_;
    files_selected = get_files_selected_cfv();                                                            files_selected = get_files_selected_cfv();
    disp_status_bar_done(P_(_("%d file selected"),                                                        disp_status_bar_done(P_(_("%d file selected"),
                            _("%d files selected"),                                                                               _("%d files selected"),
                            _("%d filess selected"),                                                                              _("%d filess selected"),
                            _("%d filesss selected"),                                                                             _("%d filesss selected"),
     files_selected), files_selected);                                                                     files_selected), files_selected);
    get_cur_filer_view()->cur_sel_idx = MIN_MAX_(0,                                                       get_cur_filer_view()->cur_sel_idx = MIN_MAX_(0,
     get_cur_filer_view()->cur_sel_idx + 1, get_cur_filer_view()->file_list_entries-1);                    get_cur_filer_view()->cur_sel_idx + 1, get_cur_filer_view()->file_list_entries-1);
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_select_no_file(void)                                                                          int dof_select_no_file(void)
{                                                                                                     {
    for (int file_idx = 0 ; file_idx < get_cur_filer_view()->file_list_entries; file_idx++) {             for (int file_idx = 0 ; file_idx < get_cur_filer_view()->file_list_entries; file_idx++) {
        get_cur_filer_view()->file_list[file_idx].selected = 0;                                               get_cur_filer_view()->file_list[file_idx].selected = 0;
    }                                                                                                     }
    disp_status_bar_done(_("File selection cleared"));                                                    disp_status_bar_done(_("File selection cleared"));
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_select_all_files(void)                                                                        int dof_select_all_files(void)
{                                                                                                     {
    int files_selected;                                                                                   int files_selected;

    for (int file_idx = 0 ; file_idx < get_cur_filer_view()->file_list_entries; file_idx++) {             for (int file_idx = 0 ; file_idx < get_cur_filer_view()->file_list_entries; file_idx++) {
        if (strcmp(get_cur_filer_view()->file_list[file_idx].file_name, ".") == 0                             if (strcmp(get_cur_filer_view()->file_list[file_idx].file_name, ".") == 0
         || strcmp(get_cur_filer_view()->file_list[file_idx].file_name, "..") == 0)                            || strcmp(get_cur_filer_view()->file_list[file_idx].file_name, "..") == 0)
            get_cur_filer_view()->file_list[file_idx].selected = 0;                                               get_cur_filer_view()->file_list[file_idx].selected = 0;
        else                                                                                                  else
            get_cur_filer_view()->file_list[file_idx].selected                                                    get_cur_filer_view()->file_list[file_idx].selected
             = get_cur_filer_view()->file_list[file_idx].selected ^ _FILE_SEL_MAN_;                                = get_cur_filer_view()->file_list[file_idx].selected ^ _FILE_SEL_MAN_;
    }                                                                                                     }
    files_selected = get_files_selected_cfv();                                                            files_selected = get_files_selected_cfv();
    disp_status_bar_done(P_(_("%d file selected"),                                                        disp_status_bar_done(P_(_("%d file selected"),
                            _("%d files selected"),                                                                               _("%d files selected"),
                            _("%d filess selected"),                                                                              _("%d filess selected"),
                            _("%d filesss selected"),                                                                             _("%d filesss selected"),
     files_selected), files_selected);                                                                     files_selected), files_selected);
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_quit_filer(void)                                                                              int dof_quit_filer(void)
{                                                                                                     {
    filer_do_next = FILER_DO_QUIT;                                                                        filer_do_next = FILER_DO_QUIT;
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_quit_home_dir(void)                                                                           int dof_quit_home_dir(void)
{                                                                                                     {
    dof_home_directory();                                                                                 dof_home_directory();
    dof_quit_filer();                                                                                     dof_quit_filer();
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_tog_show_dot_file(void)                                                                       int dof_tog_show_dot_file(void)
{                                                                                                     {
    do_tog_show_dot_file();                                                                               do_tog_show_dot_file();
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_inc_show_file_info(void)                                                                      int dof_inc_show_file_info(void)
{                                                                                                     {
    inc_show_file_info();                                                                                 inc_show_file_info();
    SHOW_MODE("File information", get_str_show_file_info());                                              SHOW_MODE("File information", get_str_show_file_info());
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_clr_sort_by(void)                                                                             int dof_clr_sort_by(void)
{                                                                                                     {
    clr_sort_by();                                                                                        clr_sort_by();
    SHOW_MODE("Clear File sort mode", get_str_sort_by());                                                 SHOW_MODE("Clear File sort mode", get_str_sort_by());
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_inc_sort_by(void)                                                                             int dof_inc_sort_by(void)
{                                                                                                     {
    inc_sort_by();                                                                                        inc_sort_by();
    SHOW_MODE("File sort mode", get_str_sort_by());                                                       SHOW_MODE("File sort mode", get_str_sort_by());
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_tog_panes(void)                                                                               int dof_tog_panes(void)
{                                                                                                     {
    tog_filer_panes();                                                                                    tog_filer_panes();
    SHOW_MODE("Filer panes", get_str_filer_panes());                                                      SHOW_MODE("Filer panes", get_str_filer_panes());
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_AUTO;                                                       filer_do_next = FILER_DO_UPDATE_FILE_LIST_AUTO;
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_inc_key_list_lines(void)                                                                      int dof_inc_key_list_lines(void)
{                                                                                                     {
    do_inc_key_list_lines_();                                                                             do_inc_key_list_lines_();
    return 0;                                                                                             return 0;
}                                                                                                     }

int dof_display_color_settings(void)                                                                  int dof_display_color_settings(void)
{                                                                                                     {
    display_color_settings();                                                                             display_color_settings();
    return 0;                                                                                             return 0;
}                                                                                                     }

#ifdef ENABLE_HELP                                                                                    #ifdef ENABLE_HELP
int dof_filer_splash(void)                                                                            int dof_filer_splash(void)
{                                                                                                     {
    disp_splash(100);                                                                                     disp_splash(100);
    examine_key_code();                                                                                   examine_key_code();
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    return 0;                                                                                             return 0;
}                                                                                                     }
#endif // ENABLE_HELP                                                                                 #endif // ENABLE_HELP

int dof_filer_menu_0(void)                                                                            int dof_filer_menu_0(void)
{                                                                                                     {
    filer_menu_n(-1);                                                                                     filer_menu_n(-1);
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_filer_menu_1(void)                                                                            int dof_filer_menu_1(void)
{                                                                                                     {
    if (is_app_list_mode()) {                                                                             if (is_app_list_mode()) {
        filer_do_next = FILER_DO_QUIT;                                                                        filer_do_next = FILER_DO_QUIT;
        return -1;                                                                                            return -1;
    }                                                                                                     }

    filer_menu_n(0);                                                                                      filer_menu_n(0);
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_filer_menu_2(void)                                                                            int dof_filer_menu_2(void)
{                                                                                                     {
    filer_menu_n(1);                                                                                      filer_menu_n(1);
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_filer_menu_3(void)                                                                            int dof_filer_menu_3(void)
{                                                                                                     {
    filer_menu_n(2);                                                                                      filer_menu_n(2);
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_filer_menu_4(void)                                                                            int dof_filer_menu_4(void)
{                                                                                                     {
    filer_menu_n(2);                                                                                      filer_menu_n(2);
    return 0;                                                                                             return 0;
}                                                                                                     }
int dof_filer_menu_5(void)                                                                            int dof_filer_menu_5(void)
{                                                                                                     {
    filer_menu_n(2);                                                                                      filer_menu_n(2);
    return 0;                                                                                             return 0;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
PRIVATE int dof_open_file_(int recursive)                                                             PRIVATE int dof_open_file_(int recursive)
{                                                                                                     {
    int prev_count_edit_bufs = count_edit_bufs();                                                         int prev_count_edit_bufs = count_edit_bufs();

    if (filer_change_dir_to_cur_sel()) {                                                                  if (filer_change_dir_to_cur_sel()) {
        return 0;                                                                                             return 0;
    }                                                                                                     }
    if (is_reg_file_and_app_list_mode_then_enter_file_name()) {                                           if (is_reg_file_and_app_list_mode_then_enter_file_name()) {
        return -1;                                                                                            return -1;
    }                                                                                                     }

    clear_files_loaded();                                                                                 clear_files_loaded();
    begin_check_break_key();                                                                              begin_check_break_key();
    for (int file_idx = select_and_get_first_file_idx_selected();                                         for (int file_idx = select_and_get_first_file_idx_selected();
     file_idx >= 0;                                                                                        file_idx >= 0;
     file_idx = get_next_file_idx_selected(file_idx)) {                                                    file_idx = get_next_file_idx_selected(file_idx)) {
        if (S_ISREG(get_cur_filer_view()->file_list[file_idx].st.st_mode)) {                                  if (S_ISREG(get_cur_filer_view()->file_list[file_idx].st.st_mode)) {
            if (load_file_name_upp_low_(get_cur_filer_view()->file_list[file_idx].file_name,                      if (load_file_name_upp_low_(get_cur_filer_view()->file_list[file_idx].file_name,
             TUL0, OOE0, MOE1, LFH0, recursive) <= 0) {                                                            TUL0, OOE0, MOE1, LFH0, recursive) <= 0) {
                tio_beep();                                                                                           tio_beep();
            }                                                                                                     }
        }                                                                                                     }
        if (check_break_key()) {                                                                              if (check_break_key()) {
            break;                                                                                                break;
        }                                                                                                     }
    }                                                                                                     }
    end_check_break_key();                                                                                end_check_break_key();

    if (get_files_loaded() >= 0) {                                                                        if (get_files_loaded() >= 0) {
#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
        if (prev_count_edit_bufs == 0) {                                                                      if (prev_count_edit_bufs == 0) {
////_D_(dump_edit_bufs())                                                                          <
            goto_last_file_line_col_in_history();                                                                 goto_last_file_line_col_in_history();
        }                                                                                                     }
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
    }                                                                                                     }
    unselect_all_files_auto(_FILE_SEL_MAN_ | _FILE_SEL_AUTO_);                                            unselect_all_files_auto(_FILE_SEL_MAN_ | _FILE_SEL_AUTO_);
    disp_files_loaded_if_ge_0();                                                                          disp_files_loaded_if_ge_0();
    if (get_files_loaded() < 0) {                                                                         if (get_files_loaded() < 0) {
        filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    } else {                                                                                              } else {
        filer_do_next = FILER_DO_FILE_LOADED;                                                                 filer_do_next = FILER_DO_FILE_LOADED;
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }

PRIVATE int filer_change_dir_to_cur_sel(void)                                                         PRIVATE int filer_change_dir_to_cur_sel(void)
{                                                                                                     {
    if (S_ISDIR(get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].st.st_mode)) {         if (S_ISDIR(get_cur_filer_view()->file_list[get_cur_filer_view()->cur_sel_idx].st.st_mode)) {
        filer_change_dir(get_cur_filer_view()                                                                 filer_change_dir(get_cur_filer_view()
         ->file_list[get_cur_filer_view()->cur_sel_idx].file_name);                                            ->file_list[get_cur_filer_view()->cur_sel_idx].file_name);
        return 1;       // OK                                                                                 return 1;       // OK
    }                                                                                                     }
    return 0;           // error                                                                          return 0;           // error
}                                                                                                     }
PRIVATE int filer_change_dir_if_not_yet(char *dir)                                                    PRIVATE int filer_change_dir_if_not_yet(char *dir)
{                                                                                                     {
    if (strcmp(get_cur_filer_view()->cur_dir, dir) == 0) {                                                if (strcmp(get_cur_filer_view()->cur_dir, dir) == 0) {
        return filer_change_dir_to_prev_dir();                                                                return filer_change_dir_to_prev_dir();
    } else {                                                                                              } else {
        return filer_change_dir(dir);                                                                         return filer_change_dir(dir);
    }                                                                                                     }
}                                                                                                     }
PRIVATE int filer_change_dir_to_prev_dir(void)                                                        PRIVATE int filer_change_dir_to_prev_dir(void)
{                                                                                                     {
    if (strlen(get_cur_filer_view()->prev_dir)) {                                                         if (strlen(get_cur_filer_view()->prev_dir)) {
        return filer_change_dir(get_cur_filer_view()->prev_dir);                                              return filer_change_dir(get_cur_filer_view()->prev_dir);
    }                                                                                                     }
    return 0;       // error                                                                              return 0;       // error
}                                                                                                     }

// If can not change dir, try parent dir                                                              // If can not change dir, try parent dir
int filer_change_dir_parent(char *path)                                                               int filer_change_dir_parent(char *path)
{                                                                                                     {
    char dir[MAX_PATH_LEN+1];                                                                             char dir[MAX_PATH_LEN+1];

    strlcpy__(dir, path, MAX_PATH_LEN);                                                                   strlcpy__(dir, path, MAX_PATH_LEN);
    for ( ; ; ) {                                                                                         for ( ; ; ) {
flf_d_printf("try to dir[%s]\n", dir);                                                                flf_d_printf("try to dir[%s]\n", dir);
        if (strcmp(dir, "/") == 0) {                                                                          if (strcmp(dir, "/") == 0) {
            return 0;   // error                                                                                  return 0;   // error
        }                                                                                                     }
        if (filer_change_dir(dir)) {                                                                          if (filer_change_dir(dir)) {
            break;                                                                                                break;
        }                                                                                                     }
        // If can not change dir, try parent dir                                                              // If can not change dir, try parent dir
        // /try/to/change/dir/file ==> /try/to/change/dir                                                     // /try/to/change/dir/file ==> /try/to/change/dir
        strip_file_from_path(dir, NULL);                                                                      strip_file_from_path(dir, NULL);
    }                                                                                                     }
    return 1;   // changed                                                                                return 1;   // changed
}                                                                                                     }
int filer_change_dir(char *dir)                                                                       int filer_change_dir(char *dir)
{                                                                                                     {
    if (change_cur_dir_saving_prev_next_dir(dir, get_cur_filer_view()->cur_dir,                           if (change_cur_dir_saving_prev_next_dir(dir, get_cur_filer_view()->cur_dir,
     get_cur_filer_view()->prev_dir, get_cur_filer_view()->next_file) == 0) {                              get_cur_filer_view()->prev_dir, get_cur_filer_view()->next_file) == 0) {
        // We can't open this dir for some reason. Complain.                                                  // We can't open this dir for some reason. Complain.
        disp_status_bar_err(_("Can not change current to [%s]: %s"),                                          disp_status_bar_err(_("Can not change current to [%s]: %s"),
         shrink_str_to_scr_static(dir), strerror(errno));                                                      shrink_str_to_scr_static(dir), strerror(errno));
        return 0;   // error                                                                                  return 0;   // error
    }                                                                                                     }
#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
    // previous dir, next dir                                                                             // previous dir, next dir
    update_dir_history(get_cur_filer_view()->prev_dir, get_cur_filer_view()->cur_dir);                    update_dir_history(get_cur_filer_view()->prev_dir, get_cur_filer_view()->cur_dir);
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
    get_cur_filer_view()->top_idx = 0;                                                                    get_cur_filer_view()->top_idx = 0;
    disp_status_bar_done(_("Changed current directory to [%s]"),                                          disp_status_bar_done(_("Changed current directory to [%s]"),
     shrink_str_to_scr_static(get_cur_filer_view()->cur_dir));                                             shrink_str_to_scr_static(get_cur_filer_view()->cur_dir));
    filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;                                                      filer_do_next = FILER_DO_UPDATE_FILE_LIST_FORCE;
    return 1;       // OK                                                                                 return 1;       // OK
}                                                                                                     }

#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER

// End of filercmd.c                                                                                  // End of filercmd.c
kdiff3 ../old/be/filerkeys.c filerkeys.c #========================
kdiff3 ../old/be/filerrun.c filerrun.c #========================
kdiff3 ../old/be/history.c history.c #========================
kdiff3 ../old/be/keymacro.c keymacro.c #========================
kdiff3 ../old/be/keys.c keys.c #========================
kdiff3 ../old/be/line.c line.c #========================
kdiff3 ../old/be/linewrap.c linewrap.c #========================
/**************************************************************************                           /**************************************************************************
 *   linewrap.c                                                           *                            *   linewrap.c                                                           *
 *                                                                        *                            *                                                                        *
 *   Copyright (C) 1999-2003 Chris Allegretta                             *                            *   Copyright (C) 1999-2003 Chris Allegretta                             *
 *                                                                        *                            *                                                                        *
 *   This program is free software; you can redistribute it and/or modify *                            *   This program is free software; you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published by *                            *   it under the terms of the GNU General Public License as published by *
 *   the Free Software Foundation; either version 2, or (at your option)  *                            *   the Free Software Foundation; either version 2, or (at your option)  *
 *   any later version.                                                   *                            *   any later version.                                                   *
 *                                                                        *                            *                                                                        *
 *   This program is distributed in the hope that it will be useful,      *                            *   This program is distributed in the hope that it will be useful,      *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *                            *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *                            *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 *   GNU General Public License for more details.                         *                            *   GNU General Public License for more details.                         *
 *                                                                        *                            *                                                                        *
 *   You should have received a copy of the GNU General Public License    *                            *   You should have received a copy of the GNU General Public License    *
 *   along with this program; if not, write to the Free Software          *                            *   along with this program; if not, write to the Free Software          *
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *                            *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *
 *                                                                        *                            *                                                                        *
 **************************************************************************/                           **************************************************************************/

#include "headers.h"                                                                                  #include "headers.h"

int priv_tab_size = DEFAULT_TAB_SIZE;   // Tab size gotten from buf_state                             int priv_tab_size = DEFAULT_TAB_SIZE;   // Tab size gotten from buf_state

void set_wrap_line_tab_size(int tab_size)                                                             void set_wrap_line_tab_size(int tab_size)
{                                                                                                     {
    priv_tab_size = tab_size;                                                                             priv_tab_size = tab_size;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

#ifdef START_UP_TEST                                                                                  #ifdef START_UP_TEST
void test_wrap_line(void)                                                                             void test_wrap_line(void)
{                                                                                                     {
flf_d_printf("----------------------------------------------------------------------\n");             flf_d_printf("----------------------------------------------------------------------\n");
flf_d_printf("priv_tab_size: %d\n", priv_tab_size);                                                   flf_d_printf("priv_tab_size: %d\n", priv_tab_size);
#define CMP_RET(func_call, ret)     _FLF_; if (func_call != ret) _WARNING_                            #define CMP_RET(func_call, ret)     _FLF_; if (func_call != ret) _WARNING_
#define C_R(func_call, ret)         CMP_RET(func_call, ret)                                           #define C_R(func_call, ret)         CMP_RET(func_call, ret)
    C_R(max_wrap_line_idx("1234567890", 10), 0)                                                           C_R(max_wrap_line_idx("1234567890", 10), 0)
    C_R(max_wrap_line_idx("123456789012", 10), 1)                                                         C_R(max_wrap_line_idx("123456789012", 10), 1)
    C_R(max_wrap_line_idx("1234567890123456789012", 10), 2)                                               C_R(max_wrap_line_idx("1234567890123456789012", 10), 2)
    C_R(max_wrap_line_idx("一二三四五六七八九零", 10), 1)                                                 C_R(max_wrap_line_idx("一二三四五六七八九零", 10), 1)
    C_R(max_wrap_line_idx("一二三四五六七八九零一", 10), 2)                                               C_R(max_wrap_line_idx("一二三四五六七八九零一", 10), 2)
    C_R(max_wrap_line_idx("1一二三四五六七八九", 10), 1)                                                  C_R(max_wrap_line_idx("1一二三四五六七八九", 10), 1)
    C_R(max_wrap_line_idx("1一二三四五六七八九零", 10), 2)                                                C_R(max_wrap_line_idx("1一二三四五六七八九零", 10), 2)
    C_R(max_wrap_line_idx("1一二三四五123456789012", 10), 2)                                              C_R(max_wrap_line_idx("1一二三四五123456789012", 10), 2)
    C_R(max_wrap_line_idx("123456\t78", 10), 0)                                                           C_R(max_wrap_line_idx("123456\t78", 10), 0)
    C_R(max_wrap_line_idx("1234567\t89", 10), 0)                                                          C_R(max_wrap_line_idx("1234567\t89", 10), 0)
    C_R(max_wrap_line_idx("12345678\t90", 10), 1)                                                         C_R(max_wrap_line_idx("12345678\t90", 10), 1)
    C_R(max_wrap_line_idx("123456789\t01", 10), 1)                                                        C_R(max_wrap_line_idx("123456789\t01", 10), 1)
    C_R(max_wrap_line_idx("123456\t12", 12), 0)                                                           C_R(max_wrap_line_idx("123456\t12", 12), 0)
    C_R(max_wrap_line_idx("1234567\t12", 12), 0)                                                          C_R(max_wrap_line_idx("1234567\t12", 12), 0)
    C_R(max_wrap_line_idx("12345678\t12", 12), 1)                                                         C_R(max_wrap_line_idx("12345678\t12", 12), 1)
    C_R(max_wrap_line_idx("123456789\t12", 12), 1)                                                        C_R(max_wrap_line_idx("123456789\t12", 12), 1)
    C_R(max_wrap_line_idx("1234567890\t12", 12), 1)                                                       C_R(max_wrap_line_idx("1234567890\t12", 12), 1)
    C_R(max_wrap_line_idx("12345678901\t12", 12), 1)                                                      C_R(max_wrap_line_idx("12345678901\t12", 12), 1)
    C_R(max_wrap_line_idx("123456789012\t12", 12), 1)                                                     C_R(max_wrap_line_idx("123456789012\t12", 12), 1)
    C_R(max_wrap_line_idx("1234567890123\t12", 12), 1)                                                    C_R(max_wrap_line_idx("1234567890123\t12", 12), 1)
    C_R(max_wrap_line_idx("12345678901234\t12", 12), 1)                                                   C_R(max_wrap_line_idx("12345678901234\t12", 12), 1)

    C_R(start_wl_idx_of_wrap_line("1234567890", 8, 10), 0)                                                C_R(start_wl_idx_of_wrap_line("1234567890", 8, 10), 0)
    C_R(start_wl_idx_of_wrap_line("1234567890", 10, 10), 1)                                               C_R(start_wl_idx_of_wrap_line("1234567890", 10, 10), 1)
    C_R(start_wl_idx_of_wrap_line("123456789012", 10, 10), 1)                                             C_R(start_wl_idx_of_wrap_line("123456789012", 10, 10), 1)
    C_R(start_wl_idx_of_wrap_line("123456789012", 12, 10), 1)                                             C_R(start_wl_idx_of_wrap_line("123456789012", 12, 10), 1)
    C_R(start_wl_idx_of_wrap_line("1234567890123456789012", 20, 10), 2)                                   C_R(start_wl_idx_of_wrap_line("1234567890123456789012", 20, 10), 2)
    C_R(start_wl_idx_of_wrap_line("1234567890123456789012", 22, 10), 2)                                   C_R(start_wl_idx_of_wrap_line("1234567890123456789012", 22, 10), 2)

    C_R(start_col_idx_of_wrap_line("1234567890123456789012345678901234567890", 10, 10), 0)                C_R(start_col_idx_of_wrap_line("1234567890123456789012345678901234567890", 10, 10), 0)
    C_R(start_col_idx_of_wrap_line("1234567890123456789012345678901234567890", 10, 10), 0)                C_R(start_col_idx_of_wrap_line("1234567890123456789012345678901234567890", 10, 10), 0)
    C_R(end_col_idx_of_wrap_line("1234567890123456789012345678901234567890", 0, 10, 10), 10)              C_R(end_col_idx_of_wrap_line("1234567890123456789012345678901234567890", 0, 10, 10), 10)
    C_R(end_col_idx_of_wrap_line("1234567890123456789012345678901234567890", 1, 10, 10), 10)              C_R(end_col_idx_of_wrap_line("1234567890123456789012345678901234567890", 1, 10, 10), 10)
    C_R(start_byte_idx_of_wrap_line("1234567890123456789012345678901234567890", 0, 10, 10), 10)           C_R(start_byte_idx_of_wrap_line("1234567890123456789012345678901234567890", 0, 10, 10), 10)
    C_R(start_byte_idx_of_wrap_line("1234567890123456789012345678901234567890", 1, 10, 10), 20)           C_R(start_byte_idx_of_wrap_line("1234567890123456789012345678901234567890", 1, 10, 10), 20)
    C_R(end_byte_idx_of_wrap_line_le("1234567890123456789012345678901234567890", 0, 10, 10), 10)          C_R(end_byte_idx_of_wrap_line_le("1234567890123456789012345678901234567890", 0, 10, 10), 10)
    C_R(end_byte_idx_of_wrap_line_le("1234567890123456789012345678901234567890", 1, 10, 10), 20)          C_R(end_byte_idx_of_wrap_line_le("1234567890123456789012345678901234567890", 1, 10, 10), 20)
    C_R(start_col_idx_of_wrap_line("一二三四五六七八九零一", 0, 10), 0)                                   C_R(start_col_idx_of_wrap_line("一二三四五六七八九零一", 0, 10), 0)
    C_R(start_col_idx_of_wrap_line("一二三四五六七八九零一", 15, 10), 0)                                  C_R(start_col_idx_of_wrap_line("一二三四五六七八九零一", 15, 10), 0)
    C_R(start_col_idx_of_wrap_line("一二三四五六七八九零一", 15, 10), 0)                                  C_R(start_col_idx_of_wrap_line("一二三四五六七八九零一", 15, 10), 0)
    C_R(start_col_idx_of_wrap_line("一二三四五六七八九零一", 30, 10), 0)                                  C_R(start_col_idx_of_wrap_line("一二三四五六七八九零一", 30, 10), 0)
    C_R(start_col_idx_of_wrap_line("一二三四五六七八九零一", 30, 10), 0)                                  C_R(start_col_idx_of_wrap_line("一二三四五六七八九零一", 30, 10), 0)
    C_R(start_col_idx_of_wrap_line("一二三四五六七八九零一", 45, 10), 2)                                  C_R(start_col_idx_of_wrap_line("一二三四五六七八九零一", 45, 10), 2)
    C_R(start_col_idx_of_wrap_line("1一二三四五六七八九零一", 0, 10), 0)                                  C_R(start_col_idx_of_wrap_line("1一二三四五六七八九零一", 0, 10), 0)
    C_R(start_col_idx_of_wrap_line("1一二三四五六七八九零一", 13, 10), 0)                                 C_R(start_col_idx_of_wrap_line("1一二三四五六七八九零一", 13, 10), 0)
    C_R(start_col_idx_of_wrap_line("1一二三四五六七八九零一", 13, 10), 0)                                 C_R(start_col_idx_of_wrap_line("1一二三四五六七八九零一", 13, 10), 0)
    C_R(start_col_idx_of_wrap_line("1一二三四五六七八九零一", 28, 10), 0)                                 C_R(start_col_idx_of_wrap_line("1一二三四五六七八九零一", 28, 10), 0)
    C_R(start_col_idx_of_wrap_line("1一二三四五六七八九零一", 28, 10), 0)                                 C_R(start_col_idx_of_wrap_line("1一二三四五六七八九零一", 28, 10), 0)
    C_R(start_col_idx_of_wrap_line("1一二三四五六七八九零一", 43, 10), 4)                                 C_R(start_col_idx_of_wrap_line("1一二三四五六七八九零一", 43, 10), 4)

    C_R(start_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四")-1, 10), 0)              C_R(start_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四")-1, 10), 0)
    C_R(start_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四"), 10), 0)                C_R(start_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四"), 10), 0)
    C_R(start_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四")+1, 10), 1)              C_R(start_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四")+1, 10), 1)
    C_R(start_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四")+2, 10), 1)              C_R(start_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四")+2, 10), 1)
    C_R(start_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四五"), 10), 1)              C_R(start_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四五"), 10), 1)
    C_R(start_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四五")+1, 10), 1)            C_R(start_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四五")+1, 10), 1)
    C_R(start_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三"), 10), 0)                C_R(start_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三"), 10), 0)
    C_R(start_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三")+1, 10), 1)              C_R(start_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三")+1, 10), 1)
    C_R(start_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三")+2, 10), 1)              C_R(start_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三")+2, 10), 1)
    C_R(start_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四"), 10), 1)              C_R(start_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四"), 10), 1)
    C_R(start_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四")+1, 10), 1)            C_R(start_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四")+1, 10), 1)
    C_R(start_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四")+2, 10), 1)            C_R(start_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四")+2, 10), 1)
    C_R(start_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四五"), 10), 1)            C_R(start_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四五"), 10), 1)
    C_R(start_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四五")+1, 10), 1)          C_R(start_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四五")+1, 10), 1)
    C_R(end_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四")-1, 10), 0)                C_R(end_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四")-1, 10), 0)
    C_R(end_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四"), 10), 0)                  C_R(end_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四"), 10), 0)
    C_R(end_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四")+1, 10), 0)                C_R(end_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四")+1, 10), 0)
    C_R(end_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四")+2, 10), 0)                C_R(end_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四")+2, 10), 0)
    C_R(end_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四五"), 10), 0)                C_R(end_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四五"), 10), 0)
    C_R(end_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四五")+1, 10), 1)              C_R(end_wl_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四五")+1, 10), 1)
    C_R(end_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三"), 10), 0)                  C_R(end_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三"), 10), 0)
    C_R(end_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三")+1, 10), 0)                C_R(end_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三")+1, 10), 0)
    C_R(end_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三")+2, 10), 0)                C_R(end_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三")+2, 10), 0)
    C_R(end_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四"), 10), 0)                C_R(end_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四"), 10), 0)
    C_R(end_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四")+1, 10), 1)              C_R(end_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四")+1, 10), 1)
    C_R(end_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四")+2, 10), 1)              C_R(end_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四")+2, 10), 1)
    C_R(end_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四五"), 10), 1)              C_R(end_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四五"), 10), 1)
    C_R(end_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四五")+1, 10), 1)            C_R(end_wl_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四五")+1, 10), 1)
    C_R(start_col_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三"), 10), 6)                 C_R(start_col_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三"), 10), 6)
    C_R(start_col_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三")+1, 10), 8)               C_R(start_col_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三")+1, 10), 8)
    C_R(start_col_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三")+2, 10), 8)               C_R(start_col_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三")+2, 10), 8)
    C_R(start_col_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四"), 10), 8)               C_R(start_col_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四"), 10), 8)
    C_R(start_col_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四")+1, 10), 0)             C_R(start_col_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四")+1, 10), 0)
    C_R(start_col_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四")+2, 10), 0)             C_R(start_col_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四")+2, 10), 0)
    C_R(start_col_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四五"), 10), 0)             C_R(start_col_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四五"), 10), 0)
    C_R(start_col_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四五")+1, 10), 2)           C_R(start_col_idx_of_wrap_line("一二三四五六七23456789012", strlen("一二三四五")+1, 10), 2)
    C_R(start_col_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三"), 10), 7)               C_R(start_col_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三"), 10), 7)
    C_R(start_col_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三")+1, 10), 0)             C_R(start_col_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三")+1, 10), 0)
    C_R(start_col_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三")+2, 10), 0)             C_R(start_col_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三")+2, 10), 0)
    C_R(start_col_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四"), 10), 0)             C_R(start_col_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四"), 10), 0)
    C_R(start_col_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四")+1, 10), 2)           C_R(start_col_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四")+1, 10), 2)
    C_R(start_col_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四")+2, 10), 2)           C_R(start_col_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四")+2, 10), 2)
    C_R(start_col_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四五"), 10), 2)           C_R(start_col_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四五"), 10), 2)
    C_R(start_col_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四五")+1, 10), 4)         C_R(start_col_idx_of_wrap_line("1一二三四五六七23456789012", strlen("1一二三四五")+1, 10), 4)
    C_R(end_col_idx_of_wrap_line("一二三四五六七23456789012", 0, strlen("一二三四"), 10), 8)              C_R(end_col_idx_of_wrap_line("一二三四五六七23456789012", 0, strlen("一二三四"), 10), 8)
    C_R(end_col_idx_of_wrap_line("一二三四五六七23456789012", 0, strlen("一二三四")+1, 10), 10)           C_R(end_col_idx_of_wrap_line("一二三四五六七23456789012", 0, strlen("一二三四")+1, 10), 10)
    C_R(end_col_idx_of_wrap_line("一二三四五六七23456789012", 0, strlen("一二三四")+2, 10), 10)           C_R(end_col_idx_of_wrap_line("一二三四五六七23456789012", 0, strlen("一二三四")+2, 10), 10)
    C_R(end_col_idx_of_wrap_line("一二三四五六七23456789012", 1, strlen("一二三四五"), 10), 10)           C_R(end_col_idx_of_wrap_line("一二三四五六七23456789012", 1, strlen("一二三四五"), 10), 10)
    C_R(end_col_idx_of_wrap_line("一二三四五六七23456789012", 1, strlen("一二三四五")+1, 10), 2)          C_R(end_col_idx_of_wrap_line("一二三四五六七23456789012", 1, strlen("一二三四五")+1, 10), 2)
    C_R(end_col_idx_of_wrap_line("1一二三四五六七23456789012", 0, strlen("1一二三四"), 10), 9)            C_R(end_col_idx_of_wrap_line("1一二三四五六七23456789012", 0, strlen("1一二三四"), 10), 9)
    C_R(end_col_idx_of_wrap_line("1一二三四五六七23456789012", 0, strlen("1一二三四")+1, 10), 2)          C_R(end_col_idx_of_wrap_line("1一二三四五六七23456789012", 0, strlen("1一二三四")+1, 10), 2)
    C_R(end_col_idx_of_wrap_line("1一二三四五六七23456789012", 0, strlen("1一二三四")+2, 10), 2)          C_R(end_col_idx_of_wrap_line("1一二三四五六七23456789012", 0, strlen("1一二三四")+2, 10), 2)
    C_R(end_col_idx_of_wrap_line("1一二三四五六七23456789012", 1, strlen("1一二三四五"), 10), 2)          C_R(end_col_idx_of_wrap_line("1一二三四五六七23456789012", 1, strlen("1一二三四五"), 10), 2)
    C_R(end_col_idx_of_wrap_line("1一二三四五六七23456789012", 1, strlen("1一二三四五")+1, 10), 4)        C_R(end_col_idx_of_wrap_line("1一二三四五六七23456789012", 1, strlen("1一二三四五")+1, 10), 4)
    C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 0, 0, 10), 0)                            C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 0, 0, 10), 0)
    C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 0, 7, 10), 12)                           C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 0, 7, 10), 12)
    C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 0, 8, 10), 12)                           C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 0, 8, 10), 12)
    C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 0, 9, 10), 15)                           C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 0, 9, 10), 15)
    C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 0, 10, 10), 15)                          C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 0, 10, 10), 15)
    C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 0, 11, 10), 15)                          C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 0, 11, 10), 15)
    C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 1, 0, 10), 15)                           C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 1, 0, 10), 15)
    C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 1, 1, 10), 18)                           C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 1, 1, 10), 18)
    C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 1, 2, 10), 18)                           C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 1, 2, 10), 18)
    C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 1, 3, 10), 21)                           C_R(start_byte_idx_of_wrap_line("一二三四五六七23456789012", 1, 3, 10), 21)
    C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 0, 0, 10), 0)                           C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 0, 0, 10), 0)
    C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 0, 7, 10), 10)                          C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 0, 7, 10), 10)
    C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 0, 8, 10), 13)                          C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 0, 8, 10), 13)
    C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 0, 9, 10), 13)                          C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 0, 9, 10), 13)
    C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 0, 10, 10), 13)                         C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 0, 10, 10), 13)
    C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 0, 11, 10), 13)                         C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 0, 11, 10), 13)
    C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 1, 0, 10), 13)                          C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 1, 0, 10), 13)
    C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 1, 1, 10), 16)                          C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 1, 1, 10), 16)
    C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 1, 2, 10), 16)                          C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 1, 2, 10), 16)
    C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 1, 3, 10), 19)                          C_R(start_byte_idx_of_wrap_line("1一二三四五六七23456789012", 1, 3, 10), 19)
    C_R(end_byte_idx_of_wrap_line_le("一二三四五六七23456789012", 0, 0, 10), 0)                           C_R(end_byte_idx_of_wrap_line_le("一二三四五六七23456789012", 0, 0, 10), 0)
    C_R(end_byte_idx_of_wrap_line_le("一二三四五六七23456789012", 0, 9, 10), 12)                          C_R(end_byte_idx_of_wrap_line_le("一二三四五六七23456789012", 0, 9, 10), 12)
    C_R(end_byte_idx_of_wrap_line_le("一二三四五六七23456789012", 0, 10, 10), 15)                         C_R(end_byte_idx_of_wrap_line_le("一二三四五六七23456789012", 0, 10, 10), 15)
    C_R(end_byte_idx_of_wrap_line_le("一二三四五六七23456789012", 0, 11, 10), 15)                         C_R(end_byte_idx_of_wrap_line_le("一二三四五六七23456789012", 0, 11, 10), 15)
    C_R(end_byte_idx_of_wrap_line_le("一二三四五六七23456789012", 1, 0, 10), 15)                          C_R(end_byte_idx_of_wrap_line_le("一二三四五六七23456789012", 1, 0, 10), 15)
    C_R(end_byte_idx_of_wrap_line_le("一二三四五六七23456789012", 1, 1, 10), 15)                          C_R(end_byte_idx_of_wrap_line_le("一二三四五六七23456789012", 1, 1, 10), 15)
    C_R(end_byte_idx_of_wrap_line_le("一二三四五六七23456789012", 1, 2, 10), 18)                          C_R(end_byte_idx_of_wrap_line_le("一二三四五六七23456789012", 1, 2, 10), 18)
    C_R(end_byte_idx_of_wrap_line_le("一二三四五六七23456789012", 1, 3, 10), 18)                          C_R(end_byte_idx_of_wrap_line_le("一二三四五六七23456789012", 1, 3, 10), 18)
    C_R(end_byte_idx_of_wrap_line_le("1一二三四五六七23456789012", 0, 0, 10), 0)                          C_R(end_byte_idx_of_wrap_line_le("1一二三四五六七23456789012", 0, 0, 10), 0)
    C_R(end_byte_idx_of_wrap_line_le("1一二三四五六七23456789012", 0, 9, 10), 13)                         C_R(end_byte_idx_of_wrap_line_le("1一二三四五六七23456789012", 0, 9, 10), 13)
    C_R(end_byte_idx_of_wrap_line_le("1一二三四五六七23456789012", 0, 10, 10), 13)                        C_R(end_byte_idx_of_wrap_line_le("1一二三四五六七23456789012", 0, 10, 10), 13)
    C_R(end_byte_idx_of_wrap_line_le("1一二三四五六七23456789012", 0, 11, 10), 13)                        C_R(end_byte_idx_of_wrap_line_le("1一二三四五六七23456789012", 0, 11, 10), 13)
    C_R(end_byte_idx_of_wrap_line_le("1一二三四五六七23456789012", 1, 0, 10), 13)                         C_R(end_byte_idx_of_wrap_line_le("1一二三四五六七23456789012", 1, 0, 10), 13)
    C_R(end_byte_idx_of_wrap_line_le("1一二三四五六七23456789012", 1, 1, 10), 13)                         C_R(end_byte_idx_of_wrap_line_le("1一二三四五六七23456789012", 1, 1, 10), 13)
    C_R(end_byte_idx_of_wrap_line_le("1一二三四五六七23456789012", 1, 2, 10), 16)                         C_R(end_byte_idx_of_wrap_line_le("1一二三四五六七23456789012", 1, 2, 10), 16)
    C_R(end_byte_idx_of_wrap_line_le("1一二三四五六七23456789012", 1, 3, 10), 16)                         C_R(end_byte_idx_of_wrap_line_le("1一二三四五六七23456789012", 1, 3, 10), 16)
}                                                                                                     }
#endif // START_UP_TEST                                                                               #endif // START_UP_TEST

// line wrapping macros                                                                               // line wrapping macros
#define DEFINE_WRAP_LINE_VARS   \                                                                     #define DEFINE_WRAP_LINE_VARS   \
    const char *ptr = line;     \                                                                         const char *ptr = line;     \
    int wl_idx = 0;             \                                                                         int wl_idx = 0;             \
    int col_idx = 0;            \                                                                         int col_idx = 0;            \
    int total_col_idx = 0;      \                                                                         int total_col_idx = 0;      \
    int chr_cols;                                                                                         int chr_cols;
#define CHAR_COLUMNS(ptr)                                                   \                         #define CHAR_COLUMNS(ptr)                                                   \
    ((*ptr == '\0') ? 0 :                                                   \                             ((*ptr == '\0') ? 0 :                                                   \
     ((*ptr == '\t') ? (priv_tab_size - total_col_idx % priv_tab_size) :    \                              ((*ptr == '\t') ? (priv_tab_size - total_col_idx % priv_tab_size) :    \
      ((*ptr == '\n') ? 1 :                                                 \                               ((*ptr == '\n') ? 1 :                                                 \
       ((is_ctrl_char((unsigned char)*ptr)) ? 2 :                           \                                ((is_ctrl_char((unsigned char)*ptr)) ? 2 :                           \
        (((unsigned char)*ptr < 0x80) ? 1 : utf8c_columns(ptr))             \                                 (((unsigned char)*ptr < 0x80) ? 1 : utf8c_columns(ptr))             \
       )                                                                    \                                )                                                                    \
      )                                                                     \                               )                                                                     \
     )                                                                      \                              )                                                                      \
    )                                                                                                     )
#define FORWARD_WRAP_LINE_COL_IDX()     \                                                             #define FORWARD_WRAP_LINE_COL_IDX()     \
    chr_cols = CHAR_COLUMNS(ptr);       \                                                                 chr_cols = CHAR_COLUMNS(ptr);       \
    total_col_idx += chr_cols;          \                                                                 total_col_idx += chr_cols;          \
    col_idx += chr_cols;                                                                                  col_idx += chr_cols;
#define FORWARD_WRAP_LINE_PTR()         \                                                             #define FORWARD_WRAP_LINE_PTR()         \
    ptr += utf8c_bytes(ptr);                                                                              ptr += utf8c_bytes(ptr);
#define GOTO_NEXT_LINE_IF_LINE_EXCEED()     \                                                         #define GOTO_NEXT_LINE_IF_LINE_EXCEED()     \
    if (*ptr == '\t') {                     \                                                             if (*ptr == '\t') {                     \
        if (col_idx >= width) {             \                                                                 if (col_idx >= width) {             \
            col_idx -= width;               \                                                                     col_idx -= width;               \
            wl_idx++;                       \                                                                     wl_idx++;                       \
        }                                   \                                                                 }                                   \
    } else {                                \                                                             } else {                                \
        if (col_idx > width) {              \                                                                 if (col_idx > width) {              \
            col_idx = chr_cols;             \                                                                     col_idx = chr_cols;             \
            wl_idx++;                       \                                                                     wl_idx++;                       \
        }                                   \                                                                 }                                   \
    }                                                                                                     }
#define GOTO_NEXT_LINE_IF_LINE_END_COL()    \                                                         #define GOTO_NEXT_LINE_IF_LINE_END_COL()    \
    if (col_idx == width) {                 \                                                             if (col_idx == width) {                 \
        col_idx = 0;                        \                                                                 col_idx = 0;                        \
        wl_idx++;                           \                                                                 wl_idx++;                           \
    }                                                                                                     }
#define GOTO_NEXT_LINE_IF_NEXT_CHAR_WRAPS() \                                                         #define GOTO_NEXT_LINE_IF_NEXT_CHAR_WRAPS() \
    if (*ptr != '\t') {                     \                                                             if (*ptr != '\t') {                     \
        /* If the next char would cause line-wrapping, */ \                                                   /* If the next char would cause line-wrapping, */ \
        /* go to the next line earlier. */  \                                                                 /* go to the next line earlier. */  \
        chr_cols = CHAR_COLUMNS(ptr);       \                                                                 chr_cols = CHAR_COLUMNS(ptr);       \
        if (col_idx + chr_cols > width) {   \                                                                 if (col_idx + chr_cols > width) {   \
            col_idx = 0;    /* go to top of the next line */ \                                                    col_idx = 0;    /* go to top of the next line */ \
            wl_idx++;                       \                                                                     wl_idx++;                       \
        }                                   \                                                                 }                                   \
    }                                                                                                     }

//[全角wrapping]                                                                                      //[全角wrapping]
// Ex1                                                                                                // Ex1
//  "aaaaaaaa漢"                                                                                      //  "aaaaaaaa漢"
//  |aaaaaaaa漢|                                                                                      //  |aaaaaaaa漢|
// Ex2                                                                                                // Ex2
//  "aaaaaaaaa漢"                                                                                     //  "aaaaaaaaa漢"
//  |aaaaaaaaa |                                                                                      //  |aaaaaaaaa |
//  |漢        |                                                                                      //  |漢        |
//[TAB wrapping]                                                                                      //[TAB wrapping]
// Ex1                                                                                                // Ex1
//  "aaaaaaaa>>>>bbbb"                                                                                //  "aaaaaaaa>>>>bbbb"
//  |aaaaaaaa>>|                                                                                      //  |aaaaaaaa>>|
//  |>>bbbb    |                                                                                      //  |>>bbbb    |

int max_wrap_line_idx(const char *line, int width)                                                    int max_wrap_line_idx(const char *line, int width)
{                                                                                                     {
    int line_idx;                                                                                         int line_idx;

    line_idx = end_wl_idx_of_wrap_line(line, INT_MAX, width);                                             line_idx = end_wl_idx_of_wrap_line(line, INT_MAX, width);
    return line_idx;                                                                                      return line_idx;
}                                                                                                     }
int start_wl_idx_of_wrap_line(const char *line, int byte_idx, int width)                              int start_wl_idx_of_wrap_line(const char *line, int byte_idx, int width)
{                                                                                                     {
    DEFINE_WRAP_LINE_VARS                                                                                 DEFINE_WRAP_LINE_VARS

    width = wrap_line_length(width);                                                                      width = wrap_line_length(width);
    for ( ; *ptr; ) {                                                                                     for ( ; *ptr; ) {
        if (ptr - line >= byte_idx)                                                                           if (ptr - line >= byte_idx)
            break;                                                                                                break;
        FORWARD_WRAP_LINE_COL_IDX();                                                                          FORWARD_WRAP_LINE_COL_IDX();
        FORWARD_WRAP_LINE_PTR();                                                                              FORWARD_WRAP_LINE_PTR();
        GOTO_NEXT_LINE_IF_LINE_EXCEED();                                                                      GOTO_NEXT_LINE_IF_LINE_EXCEED();
        GOTO_NEXT_LINE_IF_LINE_END_COL();                                                                     GOTO_NEXT_LINE_IF_LINE_END_COL();
        GOTO_NEXT_LINE_IF_NEXT_CHAR_WRAPS();                                                                  GOTO_NEXT_LINE_IF_NEXT_CHAR_WRAPS();
    }                                                                                                     }
    return wl_idx;                                                                                        return wl_idx;
}                                                                                                     }
int end_wl_idx_of_wrap_line(const char *line, int byte_idx, int width)                                int end_wl_idx_of_wrap_line(const char *line, int byte_idx, int width)
{                                                                                                     {
    DEFINE_WRAP_LINE_VARS                                                                                 DEFINE_WRAP_LINE_VARS

    width = wrap_line_length(width);                                                                      width = wrap_line_length(width);
    for ( ; *ptr; ) {                                                                                     for ( ; *ptr; ) {
        if (ptr - line >= byte_idx)                                                                           if (ptr - line >= byte_idx)
            break;                                                                                                break;
        FORWARD_WRAP_LINE_COL_IDX();                                                                          FORWARD_WRAP_LINE_COL_IDX();
        FORWARD_WRAP_LINE_PTR();                                                                              FORWARD_WRAP_LINE_PTR();
        GOTO_NEXT_LINE_IF_LINE_EXCEED();                                                                      GOTO_NEXT_LINE_IF_LINE_EXCEED();
        if (ptr - line >= byte_idx)                                                                           if (ptr - line >= byte_idx)
            break;                                                                                                break;
        GOTO_NEXT_LINE_IF_NEXT_CHAR_WRAPS();                                                                  GOTO_NEXT_LINE_IF_NEXT_CHAR_WRAPS();
    }                                                                                                     }
    return wl_idx;                                                                                        return wl_idx;
}                                                                                                     }
// line_idx=0, byte_idx=80 ==> col_idx=0                                                              // line_idx=0, byte_idx=80 ==> col_idx=0
int start_col_idx_of_wrap_line(const char *line, int byte_idx, int width)                             int start_col_idx_of_wrap_line(const char *line, int byte_idx, int width)
{                                                                                                     {
    DEFINE_WRAP_LINE_VARS                                                                                 DEFINE_WRAP_LINE_VARS

    width = wrap_line_length(width);                                                                      width = wrap_line_length(width);
    for ( ; *ptr; ) {                                                                                     for ( ; *ptr; ) {
        if (ptr - line >= byte_idx)                                                                           if (ptr - line >= byte_idx)
            break;                                                                                                break;
        FORWARD_WRAP_LINE_COL_IDX();                                                                          FORWARD_WRAP_LINE_COL_IDX();
        FORWARD_WRAP_LINE_PTR();                                                                              FORWARD_WRAP_LINE_PTR();
        GOTO_NEXT_LINE_IF_LINE_EXCEED();                                                                      GOTO_NEXT_LINE_IF_LINE_EXCEED();
        GOTO_NEXT_LINE_IF_LINE_END_COL();                                                                     GOTO_NEXT_LINE_IF_LINE_END_COL();
        GOTO_NEXT_LINE_IF_NEXT_CHAR_WRAPS();                                                                  GOTO_NEXT_LINE_IF_NEXT_CHAR_WRAPS();
    }                                                                                                     }
    return col_idx;                                                                                       return col_idx;
}                                                                                                     }
// line_idx=0, byte_idx=80 ==> col_idx=80                                                             // line_idx=0, byte_idx=80 ==> col_idx=80
int end_col_idx_of_wrap_line(const char *line, int line_idx, int byte_idx, int width)                 int end_col_idx_of_wrap_line(const char *line, int line_idx, int byte_idx, int width)
{                                                                                                     {
    DEFINE_WRAP_LINE_VARS                                                                                 DEFINE_WRAP_LINE_VARS

    width = wrap_line_length(width);                                                                      width = wrap_line_length(width);
    for ( ; *ptr; ) {                                                                                     for ( ; *ptr; ) {
        if ((ptr - line >= byte_idx)                                                                          if ((ptr - line >= byte_idx)
         || (wl_idx > line_idx))                                                                               || (wl_idx > line_idx))
            break;                                                                                                break;
        GOTO_NEXT_LINE_IF_LINE_END_COL();                                                                     GOTO_NEXT_LINE_IF_LINE_END_COL();
        GOTO_NEXT_LINE_IF_NEXT_CHAR_WRAPS();                                                                  GOTO_NEXT_LINE_IF_NEXT_CHAR_WRAPS();
        FORWARD_WRAP_LINE_COL_IDX();                                                                          FORWARD_WRAP_LINE_COL_IDX();
        FORWARD_WRAP_LINE_PTR();                                                                              FORWARD_WRAP_LINE_PTR();
        if ((ptr - line >= byte_idx)                                                                          if ((ptr - line >= byte_idx)
         || (wl_idx > line_idx))                                                                               || (wl_idx > line_idx))
            break;                                                                                                break;
        GOTO_NEXT_LINE_IF_LINE_EXCEED();                                                                      GOTO_NEXT_LINE_IF_LINE_EXCEED();
    }                                                                                                     }
    return col_idx;                                                                                       return col_idx;
}                                                                                                     }
int start_byte_idx_of_wrap_line(const char *line, int line_idx, int column, int width)                int start_byte_idx_of_wrap_line(const char *line, int line_idx, int column, int width)
{                                                                                                     {
    DEFINE_WRAP_LINE_VARS                                                                                 DEFINE_WRAP_LINE_VARS

    width = wrap_line_length(width);                                                                      width = wrap_line_length(width);
    for ( ; *ptr; ) {                                                                                     for ( ; *ptr; ) {
        if ((wl_idx >= line_idx && col_idx >= column)                                                         if ((wl_idx >= line_idx && col_idx >= column)
         || (wl_idx > line_idx))                                                                               || (wl_idx > line_idx))
            break;                                                                                                break;
        FORWARD_WRAP_LINE_COL_IDX();                                                                          FORWARD_WRAP_LINE_COL_IDX();
        FORWARD_WRAP_LINE_PTR();                                                                              FORWARD_WRAP_LINE_PTR();
        GOTO_NEXT_LINE_IF_LINE_EXCEED();                                                                      GOTO_NEXT_LINE_IF_LINE_EXCEED();
        GOTO_NEXT_LINE_IF_LINE_END_COL();                                                                     GOTO_NEXT_LINE_IF_LINE_END_COL();
        GOTO_NEXT_LINE_IF_NEXT_CHAR_WRAPS();                                                                  GOTO_NEXT_LINE_IF_NEXT_CHAR_WRAPS();
        if ((wl_idx >= line_idx && col_idx > column)                                                          if ((wl_idx >= line_idx && col_idx > column)
         || (wl_idx > line_idx))                                                                               || (wl_idx > line_idx))
            break;                                                                                                break;
    }                                                                                                     }
    return ptr - line;                                                                                    return ptr - line;
}                                                                                                     }
int end_byte_idx_of_wrap_line_le(const char *line, int line_idx, int column, int width)               int end_byte_idx_of_wrap_line_le(const char *line, int line_idx, int column, int width)
{                                                                                                     {
    DEFINE_WRAP_LINE_VARS                                                                                 DEFINE_WRAP_LINE_VARS

    width = wrap_line_length(width);                                                                      width = wrap_line_length(width);
    for ( ; *ptr; ) {                                                                                     for ( ; *ptr; ) {
        if ((wl_idx >= line_idx && col_idx >= column)                                                         if ((wl_idx >= line_idx && col_idx >= column)
         || (wl_idx > line_idx))                                                                               || (wl_idx > line_idx))
            break;                                                                                                break;
        GOTO_NEXT_LINE_IF_LINE_END_COL();                                                                     GOTO_NEXT_LINE_IF_LINE_END_COL();
        GOTO_NEXT_LINE_IF_NEXT_CHAR_WRAPS();                                                                  GOTO_NEXT_LINE_IF_NEXT_CHAR_WRAPS();
        FORWARD_WRAP_LINE_COL_IDX();                                                                          FORWARD_WRAP_LINE_COL_IDX();
        if ((wl_idx >= line_idx && col_idx > column)                                                          if ((wl_idx >= line_idx && col_idx > column)
         || (wl_idx > line_idx))                                                                               || (wl_idx > line_idx))
            break;                                                                                                break;
        FORWARD_WRAP_LINE_PTR();                                                                              FORWARD_WRAP_LINE_PTR();
        GOTO_NEXT_LINE_IF_LINE_EXCEED();                                                                      GOTO_NEXT_LINE_IF_LINE_EXCEED();
    }                                                                                                     }
    return ptr - line;                                                                                    return ptr - line;
}                                                                                                     }
int end_byte_idx_of_wrap_line_ge(const char *line, int line_idx, int column, int width)               int end_byte_idx_of_wrap_line_ge(const char *line, int line_idx, int column, int width)
{                                                                                                     {
    DEFINE_WRAP_LINE_VARS                                                                                 DEFINE_WRAP_LINE_VARS

    width = wrap_line_length(width);                                                                      width = wrap_line_length(width);
    for ( ; *ptr; ) {                                                                                     for ( ; *ptr; ) {
        if ((wl_idx >= line_idx && col_idx >= column)                                                         if ((wl_idx >= line_idx && col_idx >= column)
         || (wl_idx > line_idx))                                                                               || (wl_idx > line_idx))
            break;                                                                                                break;
        FORWARD_WRAP_LINE_COL_IDX();                                                                          FORWARD_WRAP_LINE_COL_IDX();
        FORWARD_WRAP_LINE_PTR();                                                                              FORWARD_WRAP_LINE_PTR();
        if ((wl_idx >= line_idx && col_idx >= column)                                                         if ((wl_idx >= line_idx && col_idx >= column)
         || (wl_idx > line_idx))                                                                               || (wl_idx > line_idx))
            break;                                                                                                break;
        GOTO_NEXT_LINE_IF_LINE_EXCEED();                                                                      GOTO_NEXT_LINE_IF_LINE_EXCEED();
        GOTO_NEXT_LINE_IF_LINE_END_COL();                                                                     GOTO_NEXT_LINE_IF_LINE_END_COL();
        GOTO_NEXT_LINE_IF_NEXT_CHAR_WRAPS();                                                                  GOTO_NEXT_LINE_IF_NEXT_CHAR_WRAPS();
    }                                                                                                     }
    return ptr - line;                                                                                    return ptr - line;
}                                                                                                     }
int wrap_line_length(int width)                                                                       int wrap_line_length(int width)
{                                                                                                     {
    return width > 0                                                                                      return width > 0
     ? width                                                                                               ? width
     : (CUR_EBUF_STATE(buf_LINE_WRAP_MODE) == 0                                                            : (CUR_EBUF_STATE(buf_LINE_WRAP_MODE) == 0
      ? (MAX_EDIT_LINE_LEN * priv_tab_size + 1)     // will never wrap                                      ? (MAX_EDIT_LINE_LEN * priv_tab_size + 1)     // will never wrap
      : get_edit_win_columns_for_text());           // wrap line by editor window width                     : get_edit_win_columns_for_text());           // wrap line by editor window width
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
#define FORWARD_COL_IDX()                                       \                                     #define FORWARD_COL_IDX()                                       \
    if (*ptr == '\t') {                                         \                                         if (*ptr == '\t') {                                         \
        col_idx += (priv_tab_size - col_idx % priv_tab_size);   \                                             col_idx += (priv_tab_size - col_idx % priv_tab_size);   \
        ptr++;                                                  \                                             ptr++;                                                  \
    } else if (*ptr == '\n') {                                  \                                         } else if (*ptr == '\n') {                                  \
        col_idx++;                                              \                                             col_idx++;                                              \
        ptr++;                                                  \                                             ptr++;                                                  \
    } else if (is_ctrl_char((unsigned char)*ptr)) {             \                                         } else if (is_ctrl_char((unsigned char)*ptr)) {             \
        col_idx += 2;                                           \                                             col_idx += 2;                                           \
        ptr++;                                                  \                                             ptr++;                                                  \
    } else if ((unsigned char)*ptr < 0x80) {                    \                                         } else if ((unsigned char)*ptr < 0x80) {                    \
        col_idx++;                                              \                                             col_idx++;                                              \
        ptr++;                                                  \                                             ptr++;                                                  \
    } else {                                                    \                                         } else {                                                    \
        col_idx += utf8c_columns(ptr);                          \                                             col_idx += utf8c_columns(ptr);                          \
        ptr += utf8c_bytes(ptr);                                \                                             ptr += utf8c_bytes(ptr);                                \
    }                                                                                                     }
#define FORWARD_VIS_IDX()                                       \                                     #define FORWARD_VIS_IDX()                                       \
    if (*ptr == '\t') {                                         \                                         if (*ptr == '\t') {                                         \
        vis_idx += (priv_tab_size - col_idx % priv_tab_size);   \                                             vis_idx += (priv_tab_size - col_idx % priv_tab_size);   \
        col_idx += (priv_tab_size - col_idx % priv_tab_size);   \                                             col_idx += (priv_tab_size - col_idx % priv_tab_size);   \
        ptr++;                                                  \                                             ptr++;                                                  \
    } else if (*ptr == '\n') {                                  \                                         } else if (*ptr == '\n') {                                  \
        vis_idx++;                                              \                                             vis_idx++;                                              \
        col_idx++;                                              \                                             col_idx++;                                              \
        ptr++;                                                  \                                             ptr++;                                                  \
    } else if (is_ctrl_char((unsigned char)*ptr)) {             \                                         } else if (is_ctrl_char((unsigned char)*ptr)) {             \
        vis_idx += 2;                                           \                                             vis_idx += 2;                                           \
        col_idx += 2;                                           \                                             col_idx += 2;                                           \
        ptr++;                                                  \                                             ptr++;                                                  \
    } else if ((unsigned char)*ptr < 0x80) {                    \                                         } else if ((unsigned char)*ptr < 0x80) {                    \
        vis_idx++;                                              \                                             vis_idx++;                                              \
        col_idx++;                                              \                                             col_idx++;                                              \
        ptr++;                                                  \                                             ptr++;                                                  \
    } else {                                                    \                                         } else {                                                    \
        vis_idx += utf8c_bytes(ptr);                            \                                             vis_idx += utf8c_bytes(ptr);                            \
        col_idx += utf8c_columns(ptr);                          \                                             col_idx += utf8c_columns(ptr);                          \
        ptr += utf8c_bytes(ptr);                                \                                             ptr += utf8c_bytes(ptr);                                \
    }                                                                                                     }

// return byte_idx not exceed bytes                                                                   // return byte_idx not exceed bytes
int byte_idx_from_byte_idx(const char *utf8s, int bytes)                                              int byte_idx_from_byte_idx(const char *utf8s, int bytes)
{                                                                                                     {
    const char *ptr;                                                                                      const char *ptr;
    const char *prev_ptr;                                                                                 const char *prev_ptr;

    for (prev_ptr = ptr = utf8s; *ptr && ptr - utf8s < bytes; ) {                                         for (prev_ptr = ptr = utf8s; *ptr && ptr - utf8s < bytes; ) {
        prev_ptr = ptr;                                                                                       prev_ptr = ptr;
        ptr += utf8c_bytes(ptr);                                                                              ptr += utf8c_bytes(ptr);
    }                                                                                                     }
    if (ptr - utf8s > bytes)                                                                              if (ptr - utf8s > bytes)
        ptr = prev_ptr;                                                                                       ptr = prev_ptr;
    return ptr - utf8s;                                                                                   return ptr - utf8s;
}                                                                                                     }

int byte_idx_from_col_idx(const char *utf8s, int columns, char_left_right_t left_right,               int byte_idx_from_col_idx(const char *utf8s, int columns, char_left_right_t left_right,
 int *col_idx__)                                                                                       int *col_idx__)
{                                                                                                     {
    int col_idx;                                                                                          int col_idx;
    int prev_col_idx;                                                                                     int prev_col_idx;
    const char *ptr;                                                                                      const char *ptr;
    const char *prev_ptr;                                                                                 const char *prev_ptr;

    prev_col_idx = columns;                                                                               prev_col_idx = columns;
    for (prev_ptr = ptr = utf8s, col_idx = 0; *ptr && col_idx < columns; ) {                              for (prev_ptr = ptr = utf8s, col_idx = 0; *ptr && col_idx < columns; ) {
        prev_col_idx = col_idx;                                                                               prev_col_idx = col_idx;
        prev_ptr = ptr;                                                                                       prev_ptr = ptr;
        FORWARD_COL_IDX()                                                                                     FORWARD_COL_IDX()
    }                                                                                                     }
///flf_d_printf("([%s], %d) ==> %d\n", utf8s, columns, ptr - utf8s);                                  ///flf_d_printf("([%s], %d) ==> %d\n", utf8s, columns, ptr - utf8s);
    if (left_right == CHAR_LEFT && columns < col_idx) {                                                   if (left_right == CHAR_LEFT && columns < col_idx) {
        col_idx = prev_col_idx;                                                                               col_idx = prev_col_idx;
        ptr = prev_ptr;                                                                                       ptr = prev_ptr;
    }                                                                                                     }
    if (col_idx__)                                                                                        if (col_idx__)
        *col_idx__ = col_idx;                                                                                 *col_idx__ = col_idx;
    return ptr - utf8s;                                                                                   return ptr - utf8s;
}                                                                                                     }

int col_idx_from_byte_idx(const char *utf8s, int col_idx, int bytes)                                  int col_idx_from_byte_idx(const char *utf8s, int col_idx, int bytes)
{                                                                                                     {
    const char *ptr;                                                                                      const char *ptr;

    for (ptr = utf8s; *ptr && ptr - utf8s < bytes; ) {                                                    for (ptr = utf8s; *ptr && ptr - utf8s < bytes; ) {
        FORWARD_COL_IDX()                                                                                     FORWARD_COL_IDX()
    }                                                                                                     }
    return col_idx;                                                                                       return col_idx;
}                                                                                                     }

int vis_idx_from_byte_idx(const char *utf8s, int bytes)                                               int vis_idx_from_byte_idx(const char *utf8s, int bytes)
{                                                                                                     {
    int vis_idx;                                                                                          int vis_idx;
    int col_idx;                                                                                          int col_idx;
    const char *ptr;                                                                                      const char *ptr;

    for (ptr = utf8s, col_idx = 0, vis_idx = 0; *ptr && ptr - utf8s < bytes; ) {                          for (ptr = utf8s, col_idx = 0, vis_idx = 0; *ptr && ptr - utf8s < bytes; ) {
        FORWARD_VIS_IDX()                                                                                     FORWARD_VIS_IDX()
    }                                                                                                     }
    return vis_idx;                                                                                       return vis_idx;
}                                                                                                     }

#if 0                                                                                                 #if 0
int char_idx_from_byte_idx(const char *utf8s, int bytes);                                             int char_idx_from_byte_idx(const char *utf8s, int bytes);
int char_idx_from_byte_idx(const char *utf8s, int bytes)                                              int char_idx_from_byte_idx(const char *utf8s, int bytes)
{                                                                                                     {
    int char_idx;                                                                                         int char_idx;
    int col_idx;                                                                                          int col_idx;
    const char *ptr;                                                                                      const char *ptr;

    char_idx = 0;                                                                                         char_idx = 0;
    for (ptr = utf8s, col_idx = 0; *ptr && ptr - utf8s < bytes;                                           for (ptr = utf8s, col_idx = 0; *ptr && ptr - utf8s < bytes;
     char_idx++) {                                                                                         char_idx++) {
        FORWARD_COL_IDX()                                                                                     FORWARD_COL_IDX()
    }                                                                                                     }
    return char_idx;                                                                                      return char_idx;
}                                                                                                     }
int vis_idx_from_col_idx(const char *utf8s, int columns);                                             int vis_idx_from_col_idx(const char *utf8s, int columns);
int vis_idx_from_col_idx(const char *utf8s, int columns)                                              int vis_idx_from_col_idx(const char *utf8s, int columns)
{                                                                                                     {
    int vis_idx;                                                                                          int vis_idx;
    int col_idx;                                                                                          int col_idx;
    const char *ptr;                                                                                      const char *ptr;

/////_D_(dump_memory("vis_idx_from_col_idx\n", utf8s, strlen(utf8s)))                              |  ////_D_(dump_memory("vis_idx_from_col_idx\n", utf8s, strlen(utf8s)))
    for (ptr = utf8s, col_idx = 0, vis_idx = 0; *ptr && col_idx < columns; ) {                            for (ptr = utf8s, col_idx = 0, vis_idx = 0; *ptr && col_idx < columns; ) {
        FORWARD_VIS_IDX()                                                                                     FORWARD_VIS_IDX()
    }                                                                                                     }
///flf_d_printf("vis_idx_from_col_idx([%s], %d) ==> %d\n", utf8s, columns, vis_idx);                  ///flf_d_printf("vis_idx_from_col_idx([%s], %d) ==> %d\n", utf8s, columns, vis_idx);
    return vis_idx;                                                                                       return vis_idx;
}                                                                                                     }
#endif                                                                                                #endif

//------------------------------------------------------------------------------                      //------------------------------------------------------------------------------
#ifdef START_UP_TEST                                                                                  #ifdef START_UP_TEST
PRIVATE int test_get_intersection_(int min1, int max1, int min2, int max2,                            PRIVATE int test_get_intersection_(int min1, int max1, int min2, int max2,
 int expected_ret, int expected_min, int expected_max);                                                int expected_ret, int expected_min, int expected_max);
void test_get_intersection(void)                                                                      void test_get_intersection(void)
{                                                                                                     {
    flf_d_printf("-----------------------\n");                                                            flf_d_printf("-----------------------\n");
    // aaaaaa bbbbbb                                                                                      // aaaaaa bbbbbb
    MY_UT_INT(test_get_intersection_(0, 54, 64, 65, -10, 64, 54), 0);                                     MY_UT_INT(test_get_intersection_(0, 54, 64, 65, -10, 64, 54), 0);
    // aaaaaa bbbbbb                                                                                      // aaaaaa bbbbbb
    MY_UT_INT(test_get_intersection_(10, 20, 30, 40, -10, 30, 20), 0);                                    MY_UT_INT(test_get_intersection_(10, 20, 30, 40, -10, 30, 20), 0);
    // bbbbbb aaaaaa                                                                                      // bbbbbb aaaaaa
    MY_UT_INT(test_get_intersection_(60, 100, 10, 50, -10, 60, 50), 0);                                   MY_UT_INT(test_get_intersection_(60, 100, 10, 50, -10, 60, 50), 0);

    // aaaaaabbbbbb                                                                                       // aaaaaabbbbbb
    MY_UT_INT(test_get_intersection_(10, 20, 20, 40, 0, 20, 20), 0);                                      MY_UT_INT(test_get_intersection_(10, 20, 20, 40, 0, 20, 20), 0);
    // bbbbbbaaaaaa                                                                                       // bbbbbbaaaaaa
    MY_UT_INT(test_get_intersection_(60, 100, 10, 60, 0, 60, 60), 0);                                     MY_UT_INT(test_get_intersection_(60, 100, 10, 60, 0, 60, 60), 0);

    // aaaaaa                                                                                             // aaaaaa
    //   bbbbbb                                                                                           //   bbbbbb
    MY_UT_INT(test_get_intersection_(10, 100, 90, 110, 10, 90, 100), 0);                                  MY_UT_INT(test_get_intersection_(10, 100, 90, 110, 10, 90, 100), 0);
    //   aaaaaa                                                                                           //   aaaaaa
    // bbbbbb                                                                                             // bbbbbb
    MY_UT_INT(test_get_intersection_(50, 100, 10, 60, 10, 50, 60), 0);                                    MY_UT_INT(test_get_intersection_(50, 100, 10, 60, 10, 50, 60), 0);
    //   aaaaaa                                                                                           //   aaaaaa
    // bbbbbbbbbb                                                                                         // bbbbbbbbbb
    MY_UT_INT(test_get_intersection_(20, 100, 10, 110, 80, 20, 100), 0);                                  MY_UT_INT(test_get_intersection_(20, 100, 10, 110, 80, 20, 100), 0);
    // aaaaaaaaaa                                                                                         // aaaaaaaaaa
    //   bbbbbb                                                                                           //   bbbbbb
    MY_UT_INT(test_get_intersection_(10, 100, 50, 60, 10, 50, 60), 0);                                    MY_UT_INT(test_get_intersection_(10, 100, 50, 60, 10, 50, 60), 0);
}                                                                                                     }
// [not intersect]                                                                                    // [not intersect]
//  <-------->                                                                                        //  <-------->
//             <-------->                                                                             //             <-------->
// [intersect pattern 1]                                                                              // [intersect pattern 1]
//  <-------->                                                                                        //  <-------->
//      <-------->                                                                                    //      <-------->
// [intersect pattern 2]                                                                              // [intersect pattern 2]
//    <-------->                                                                                      //    <-------->
//  <------------>                                                                                    //  <------------>
PRIVATE int test_get_intersection_(int min1, int max1, int min2, int max2,                            PRIVATE int test_get_intersection_(int min1, int max1, int min2, int max2,
 int expected_ret, int expected_min, int expected_max)                                                 int expected_ret, int expected_min, int expected_max)
{                                                                                                     {
    int min;                                                                                              int min;
    int max;                                                                                              int max;
    int ret;                                                                                              int ret;

    ret = get_intersection(min1, max1, min2, max2, &min, &max);                                           ret = get_intersection(min1, max1, min2, max2, &min, &max);
    if ((ret != expected_ret) || (min != expected_min) || (max != expected_max)) {                        if ((ret != expected_ret) || (min != expected_min) || (max != expected_max)) {
warning_printf("get_intersection(min1:%d, max1:%d, min2:%d, max2:%d)\n"                               warning_printf("get_intersection(min1:%d, max1:%d, min2:%d, max2:%d)\n"
 " ==> %d, min:%d, max:%d ?? %d, %d, %d\n", min1, max1, min2, max2,                                    " ==> %d, min:%d, max:%d ?? %d, %d, %d\n", min1, max1, min2, max2,
 ret, min, max, expected_ret, expected_min, expected_max);                                             ret, min, max, expected_ret, expected_min, expected_max);
        return 1;                                                                                             return 1;
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }
#endif // START_UP_TEST                                                                               #endif // START_UP_TEST
int get_intersection(int min1, int max1, int min2, int max2, int *min, int *max)                      int get_intersection(int min1, int max1, int min2, int max2, int *min, int *max)
{                                                                                                     {
    int _min, _max;                                                                                       int _min, _max;

    _min = MAX_(min1, min2);                                                                              _min = MAX_(min1, min2);
    _max = MIN_(max1, max2);                                                                              _max = MIN_(max1, max2);
    if (min)                                                                                              if (min)
        *min = _min;                                                                                          *min = _min;
    if (max)                                                                                              if (max)
        *max = _max;                                                                                          *max = _max;
    return _max - _min;     // >0: intersect, <=0: not intersect                                          return _max - _min;     // >0: intersect, <=0: not intersect
}                                                                                                     }

// End of linewrap.c                                                                                  // End of linewrap.c
kdiff3 ../old/be/main.c main.c #========================
/**************************************************************************                           /**************************************************************************
 *   main.c                                                               *                            *   main.c                                                               *
 *                                                                        *                            *                                                                        *
 *   Copyright (C) 1999-2003 Chris Allegretta                             *                            *   Copyright (C) 1999-2003 Chris Allegretta                             *
 *                                                                        *                            *                                                                        *
 *   This program is free software; you can redistribute it and/or modify *                            *   This program is free software; you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published by *                            *   it under the terms of the GNU General Public License as published by *
 *   the Free Software Foundation; either version 2, or (at your option)  *                            *   the Free Software Foundation; either version 2, or (at your option)  *
 *   any later version.                                                   *                            *   any later version.                                                   *
 *                                                                        *                            *                                                                        *
 *   This program is distributed in the hope that it will be useful,      *                            *   This program is distributed in the hope that it will be useful,      *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *                            *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *                            *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 *   GNU General Public License for more details.                         *                            *   GNU General Public License for more details.                         *
 *                                                                        *                            *                                                                        *
 *   You should have received a copy of the GNU General Public License    *                            *   You should have received a copy of the GNU General Public License    *
 *   along with this program; if not, write to the Free Software          *                            *   along with this program; if not, write to the Free Software          *
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *                            *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *
 *                                                                        *                            *                                                                        *
 **************************************************************************/                           **************************************************************************/

#include "headers.h"                                                                                  #include "headers.h"

#ifdef HAVE_GETOPT_H                                                                                  #ifdef HAVE_GETOPT_H
#include <getopt.h>                                                                                   #include <getopt.h>
#endif // HAVE_GETOPT_H                                                                               #endif // HAVE_GETOPT_H

#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
#warning "**** ENABLE_DEBUG defined (debug output is ENABLED) ****"                                   #warning "**** ENABLE_DEBUG defined (debug output is ENABLED) ****"
#endif // ENABLE_DEBUG                                                                                #endif // ENABLE_DEBUG

#ifdef ENABLE_NCURSES                                                                                 #ifdef ENABLE_NCURSES
#warning "Terminal control via ncurses (curses_...)"                                                  #warning "Terminal control via ncurses (curses_...)"
#else // ENABLE_NCURSES                                                                               #else // ENABLE_NCURSES
///#warning "Terminal control via own terminal interface library (termif_...)"                        ///#warning "Terminal control via own terminal interface library (termif_...)"
#endif // ENABLE_NCURSES                                                                              #endif // ENABLE_NCURSES

PRIVATE int init_locale(void);                                                                        PRIVATE int init_locale(void);
PRIVATE int init_app_mode(void);                                                                      PRIVATE int init_app_mode(void);
PRIVATE int parse_options(int argc, char *argv[]);                                                    PRIVATE int parse_options(int argc, char *argv[]);
#ifdef START_UP_TEST                                                                                  #ifdef START_UP_TEST
PRIVATE void start_up_test(void);                                                                     PRIVATE void start_up_test(void);
PRIVATE void start_up_test2(void);                                                                    PRIVATE void start_up_test2(void);
#endif // START_UP_TEST                                                                               #endif // START_UP_TEST
PRIVATE int write_cur_dir_to_exit_file(void);                                                         PRIVATE int write_cur_dir_to_exit_file(void);
PRIVATE void die_save_file(const char *die_file_path);                                                PRIVATE void die_save_file(const char *die_file_path);

char *main_rc_file_name = RC_FILE_NAME; // standard rc file                                           char *main_rc_file_name = RC_FILE_NAME; // standard rc file

int main(int argc, char *argv[])                                                                      int main(int argc, char *argv[])
{                                                                                                     {
#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
    filer_panes_t root_filer_panes;                                                                       filer_panes_t root_filer_panes;
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER

    init_app_mode();                                                                                      init_app_mode();
#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
    set_debug_printf_output(GET_APPMD(app_DEBUG_PRINTF) == DEBUG_PRINTF);                                 set_debug_printf_output(GET_APPMD(app_DEBUG_PRINTF) == DEBUG_PRINTF);
    ////set_debug_printf_output(1);                                                                       ////set_debug_printf_output(1);
#endif // ENABLE_DEBUG                                                                                #endif // ENABLE_DEBUG
flf_d_printf("Start %s ===================================\n", APP_NAME " " __DATE__ " " __TIME__)    flf_d_printf("Start %s ===================================\n", APP_NAME " " __DATE__ " " __TIME__)
    _mlc_init                                                                                             _mlc_init
    get_home_dir();                                                                                       get_home_dir();
    get_starting_dir();                                                                                   get_starting_dir();
    signal_init();                                                                                        signal_init();
    init_locale();                                                                                        init_locale();
    _mlc_memorize_count                                                                                   _mlc_memorize_count
    init_buffers();     // parse_options() needs epc_buf. So do here.                                     init_buffers();     // parse_options() needs epc_buf. So do here.
    _mlc_differ_count                                                                                     _mlc_differ_count
#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
    init_filer_panes(&root_filer_panes, get_starting_dir());                                              init_filer_panes(&root_filer_panes, get_starting_dir());
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER
    parse_options(argc, argv);      // parse command line options                                         parse_options(argc, argv);      // parse command line options
    cache_users();                                                                                        cache_users();
    cache_groups();                                                                                       cache_groups();
    init_default_app_color();                                                                             init_default_app_color();
    check_wsl();                                                                                          check_wsl();
#ifdef START_UP_TEST                                                                                  #ifdef START_UP_TEST
    start_up_test();                                                                                      start_up_test();
#endif // START_UP_TEST                                                                               #endif // START_UP_TEST

#ifdef ENABLE_RC                                                                                      #ifdef ENABLE_RC
    if (GET_APPMD(app_RCFILE)) {                                                                          if (GET_APPMD(app_RCFILE)) {
        read_rc_file(main_rc_file_name);            // read standard rc file                                  read_rc_file(main_rc_file_name);            // read standard rc file
    }                                                                                                     }
#endif // ENABLE_RC                                                                                   #endif // ENABLE_RC
#ifdef ENABLE_SYNTAX                                                                                  #ifdef ENABLE_SYNTAX
    _mlc_memorize_count                                                                                   _mlc_memorize_count
    register_default_color_syntax();                                                                      register_default_color_syntax();
    _mlc_differ_count                                                                                     _mlc_differ_count
#endif // ENABLE_SYNTAX                                                                               #endif // ENABLE_SYNTAX

    // setup terminal                                                                                     // setup terminal
flf_d_printf("initializing terminal\n");                                                              flf_d_printf("initializing terminal\n");
    // initialize terminal interface(curses/termif)                                                       // initialize terminal interface(curses/termif)
    tio_init();                                                                                           tio_init();
flf_d_printf("columns:%d lines:%d\n", tio_get_columns(), tio_get_lines());                            flf_d_printf("columns:%d lines:%d\n", tio_get_columns(), tio_get_lines());
flf_d_printf("setting up windows\n");                                                                 flf_d_printf("setting up windows\n");
    win_init_win_size();                                                                                  win_init_win_size();
#ifdef SCRN_COLS_TWO_PANES                                                                            #ifdef SCRN_COLS_TWO_PANES
    if (COLS >= SCRN_COLS_TWO_PANES) {                                                                    if (COLS >= SCRN_COLS_TWO_PANES) {
        // set two pane                                                                                       // set two pane
        SET_APPMD(fl_FILER_PANES);                                                                            SET_APPMD(fl_FILER_PANES);
    }                                                                                                     }
#endif // SCRN_COLS_TWO_PANES                                                                         #endif // SCRN_COLS_TWO_PANES

#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
flf_d_printf("init_histories()\n");                                                                   flf_d_printf("init_histories()\n");
    init_histories();                                                                                     init_histories();
flf_d_printf("load_histories()\n");                                                                   flf_d_printf("load_histories()\n");
    load_histories();                                                                                     load_histories();
    load_last_searched_needle();                                                                          load_last_searched_needle();
flf_d_printf("load_key_macro()\n");                                                                   flf_d_printf("load_key_macro()\n");
    load_key_macro(1);                                                                                    load_key_macro(1);
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY

#ifdef START_UP_TEST                                                                                  #ifdef START_UP_TEST
    start_up_test2();                                                                                     start_up_test2();
#endif // START_UP_TEST                                                                               #endif // START_UP_TEST

    set_die_on_callback(app_die_on);                                                                      set_die_on_callback(app_die_on);

flf_d_printf("opening files --------------------------------------------\n");                         flf_d_printf("opening files --------------------------------------------\n");
#ifdef ENABLE_HELP                                                                                    #ifdef ENABLE_HELP
    disp_splash(0);                                                                                       disp_splash(0);
    MSLEEP(500);                                                                                          MSLEEP(500);
#endif // ENABLE_HELP                                                                                 #endif // ENABLE_HELP
    // If there's a +LINE flag, it is the first non-option argument                                       // If there's a +LINE flag, it is the first non-option argument
    int start_line_num = 0;         // Line to start at                                                   int start_line_num = 0;         // Line to start at
    if (0 < optind && optind < argc && argv[optind][0] == '+') {                                          if (0 < optind && optind < argc && argv[optind][0] == '+') {
flf_d_printf("optind:%d: %s\n", optind, argv[optind]);                                                flf_d_printf("optind:%d: %s\n", optind, argv[optind]);
        sscanf(&argv[optind][1], "%d", &start_line_num);                                                      sscanf(&argv[optind][1], "%d", &start_line_num);
        optind++;                                                                                             optind++;
    }                                                                                                     }
    // More than one file is specified on the command line,                                               // More than one file is specified on the command line,
    // load them all and switch to the first one afterward.                                               // load them all and switch to the first one afterward.
    if (optind < argc) {                                                                                  if (optind < argc) {
        clear_files_loaded();                                                                                 clear_files_loaded();
        begin_check_break_key();                                                                              begin_check_break_key();
        for ( ; optind < argc; optind++) {                                                                    for ( ; optind < argc; optind++) {
flf_d_printf("optind:%d: %s\n", optind, argv[optind]);                                                flf_d_printf("optind:%d: %s\n", optind, argv[optind]);
            // CURDIR: changed in editor                                                                          // CURDIR: changed in editor
            if (load_file_name_upp_low_(argv[optind], TUL0, OOE1, MOE0, LFH0, RECURSIVE1) <= 0) {                 if (load_file_name_upp_low_(argv[optind], TUL0, OOE1, MOE0, LFH0, RECURSIVE1) <= 0) {
                tio_beep();                                                                                           tio_beep();
            }                                                                                                     }
            tio_refresh();                                                                                        tio_refresh();
            if (check_break_key()) {                                                                              if (check_break_key()) {
                break;                                                                                                break;
            }                                                                                                     }
        }                                                                                                     }
        end_check_break_key();                                                                                end_check_break_key();
    }                                                                                                     }
    if (count_edit_bufs()) {                                                                              if (count_edit_bufs()) {
#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
        if (goto_last_file_line_col_in_history() == 0) {                                                      if (goto_last_file_line_col_in_history() == 0) {
            doe_switch_to_top_file();                                                                             doe_switch_to_top_file();
        }                                                                                                     }
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
        if (start_line_num > 0) {                                                                             if (start_line_num > 0) {
            goto_line_col_in_cur_buf(start_line_num, -1);                                                         goto_line_col_in_cur_buf(start_line_num, -1);
        }                                                                                                     }
        disp_files_loaded_if_ge_0();                                                                          disp_files_loaded_if_ge_0();
    }                                                                                                     }

    app_main_loop();                                                                                      app_main_loop();

    set_die_on_callback(NULL);                                                                            set_die_on_callback(NULL);

    set_color_by_idx(ITEM_COLOR_IDX_DEFAULT, 0);                                                          set_color_by_idx(ITEM_COLOR_IDX_DEFAULT, 0);
    tio_clear_screen();                                                                                   tio_clear_screen();
    tio_destroy();                                                                                        tio_destroy();

    write_cur_dir_to_exit_file();                                                                         write_cur_dir_to_exit_file();

    _mlc_check_count                                                                                      _mlc_check_count
    free_all_allocated_memory();                                                                          free_all_allocated_memory();
#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
    free_filer_panes(&root_filer_panes, NULL);                                                            free_filer_panes(&root_filer_panes, NULL);
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER

    signal_clear();                                                                                       signal_clear();

    _mlc_check_count                                                                                      _mlc_check_count
    _D_(_mlc_check_leak)                                                                                  _D_(_mlc_check_leak)

flf_d_printf("Exit %s ====================================\n", APP_NAME " " __DATE__ " " __TIME__)    flf_d_printf("Exit %s ====================================\n", APP_NAME " " __DATE__ " " __TIME__)
    printf("\n");                                                                                         printf("\n");
    return 0;                                                                                             return 0;
}                                                                                                     }

int app_main_loop(void)                                                                               int app_main_loop(void)
{                                                                                                     {
#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
    if (count_edit_bufs()) {                                                                              if (count_edit_bufs()) {
        // application was started as a EDITOR                                                                // application was started as a EDITOR
        while (count_edit_bufs()) {                                                                           while (count_edit_bufs()) {
            call_editor(0, 0);                                                                                    call_editor(0, 0);
        }                                                                                                     }
    } else {                                                                                              } else {
        // application was started as a FILER                                                                 // application was started as a FILER
        while (1) {                                                                                           while (1) {
            char file_path[MAX_PATH_LEN+1];                                                                       char file_path[MAX_PATH_LEN+1];
            call_filer(0, 0, "", "", file_path, MAX_PATH_LEN);                                                    call_filer(0, 0, "", "", file_path, MAX_PATH_LEN);
            if (count_edit_bufs() == 0) {                                                                         if (count_edit_bufs() == 0) {
                // no file loaded in filer                                                                            // no file loaded in filer
                break;                                                                                                break;
            }                                                                                                     }
            call_editor(0, 0);                                                                                    call_editor(0, 0);
        }                                                                                                     }
    }                                                                                                     }
#else // ENABLE_FILER                                                                                 #else // ENABLE_FILER
    if (count_edit_bufs() == 0) {                                                                         if (count_edit_bufs() == 0) {
        doe_open_file();                                                                                      doe_open_file();
    }                                                                                                     }
    while (count_edit_bufs()) {                                                                           while (count_edit_bufs()) {
        call_editor(0, 0);                                                                                    call_editor(0, 0);
    }                                                                                                     }
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER
    return 0;                                                                                             return 0;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

PRIVATE int init_locale(void)                                                                         PRIVATE int init_locale(void)
{                                                                                                     {
    // setup system environment                                                                           // setup system environment
    setlocale(LC_ALL, "");  // set locale so that wchar related functions work                            setlocale(LC_ALL, "");  // set locale so that wchar related functions work
#if defined(ENABLE_NLS) && defined(ENABLE_UTF8)                                                       #if defined(ENABLE_NLS) && defined(ENABLE_UTF8)
e_printf("LANG: [%s]\n", getenv__("LANG"));                                                           e_printf("LANG: [%s]\n", getenv__("LANG"));
    setlocale(LC_ALL, getenv__("LANG"));                                                                  setlocale(LC_ALL, getenv__("LANG"));
e_printf("cur locale: %s\n", setlocale(LC_ALL, NULL));                                                e_printf("cur locale: %s\n", setlocale(LC_ALL, NULL));
e_printf("PACKAGE: %s, LOCALEDIR: %s\n", PACKAGE, LOCALEDIR);                                         e_printf("PACKAGE: %s, LOCALEDIR: %s\n", PACKAGE, LOCALEDIR);
    bindtextdomain(PACKAGE, LOCALEDIR);                                                                   bindtextdomain(PACKAGE, LOCALEDIR);
    textdomain(PACKAGE);                                                                                  textdomain(PACKAGE);
#endif // defined(ENABLE_NLS) && defined(ENABLE_UTF8)                                                 #endif // defined(ENABLE_NLS) && defined(ENABLE_UTF8)
    return 0;                                                                                             return 0;
}                                                                                                     }

PRIVATE int init_app_mode(void)                                                                       PRIVATE int init_app_mode(void)
{                                                                                                     {
    // setup application settings                                                                         // setup application settings
    memset(&app_mode__, 0x00, sizeof(app_mode__));                                                        memset(&app_mode__, 0x00, sizeof(app_mode__));

    // editor and filer                                                                                   // editor and filer
#ifdef ENABLE_RC                                                                                      #ifdef ENABLE_RC
    SET_APPMD(app_RCFILE);                                                                                SET_APPMD(app_RCFILE);
#endif // ENABLE_RC                                                                                   #endif // ENABLE_RC
#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
    SET_APPMD(app_HISTORY);                                                                               SET_APPMD(app_HISTORY);
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
    CLR_APPMD(app_DRAW_CURSOR);                                                                           CLR_APPMD(app_DRAW_CURSOR);
    SET_APPMD_VAL(app_KEY_LINES, 3);                                                                      SET_APPMD_VAL(app_KEY_LINES, 3);
    SET_APPMD_VAL(app_DEBUG_PRINTF, DEBUG_NONE);                                                          SET_APPMD_VAL(app_DEBUG_PRINTF, DEBUG_NONE);
    // editor mode                                                                                        // editor mode
    CLR_APPMD(app_EDITOR_FILER);                                                                          CLR_APPMD(app_EDITOR_FILER);
    set_app_func_key_table();                                                                             set_app_func_key_table();
    CLR_APPMD(app_LIST_MODE);                                                                             CLR_APPMD(app_LIST_MODE);
    SET_APPMD(app_UTF8);                                                                                  SET_APPMD(app_UTF8);
/// CLR_APPMD(app_MAP_KEY_7F_BS);                                                                     /// CLR_APPMD(app_MAP_KEY_7F_BS);
    SET_APPMD(app_MAP_KEY_7F_BS);                                                                         SET_APPMD(app_MAP_KEY_7F_BS);

    CLR_APPMD(ed_EDITOR_PANES);                                                                           CLR_APPMD(ed_EDITOR_PANES);
    CLR_APPMD(ed_DUAL_SCROLL);                                                                            CLR_APPMD(ed_DUAL_SCROLL);
    SET_APPMD(ed_SHOW_RULER);                                                                             SET_APPMD(ed_SHOW_RULER);
    SET_APPMD(ed_SHOW_LINE_NUMBER);                                                                       SET_APPMD(ed_SHOW_LINE_NUMBER);
    CLR_APPMD(ed_CURS_POSITIONING);                                                                       CLR_APPMD(ed_CURS_POSITIONING);
#ifdef USE_NKF                                                                                        #ifdef USE_NKF
    SET_APPMD(ed_USE_NKF);                                                                                SET_APPMD(ed_USE_NKF);
#endif // USE_NKF                                                                                     #endif // USE_NKF
    CLR_APPMD(ed_AUTO_INDENT);                                                                            CLR_APPMD(ed_AUTO_INDENT);
    SET_APPMD_VAL(ed_BACKUP_FILES, BACKUP_FILES_MAX);                                                     SET_APPMD_VAL(ed_BACKUP_FILES, BACKUP_FILES_MAX);
#ifdef ENABLE_REGEX                                                                                   #ifdef ENABLE_REGEX
    SET_APPMD(ed_USE_REGEXP);                                                                             SET_APPMD(ed_USE_REGEXP);
#ifdef ENABLE_SYNTAX                                                                                  #ifdef ENABLE_SYNTAX
    SET_APPMD(ed_SYNTAX_HIGHLIGHT);                                                                       SET_APPMD(ed_SYNTAX_HIGHLIGHT);
    SET_APPMD(ed_TAB_EOL_NOTATION);                                                                       SET_APPMD(ed_TAB_EOL_NOTATION);
#endif // ENABLE_SYNTAX                                                                               #endif // ENABLE_SYNTAX
#endif // ENABLE_REGEX                                                                                #endif // ENABLE_REGEX

    // filer mode                                                                                         // filer mode
    SET_APPMD_VAL(fl_SHOW_FILE_INFO, SHOW_FILE_INFO_5);                                                   SET_APPMD_VAL(fl_SHOW_FILE_INFO, SHOW_FILE_INFO_5);
    SET_APPMD_VAL(fl_FILE_SORT_BY, 0);                                                                    SET_APPMD_VAL(fl_FILE_SORT_BY, 0);
    CLR_APPMD(fl_FILER_PANES);                                                                            CLR_APPMD(fl_FILER_PANES);

    return 0;                                                                                             return 0;
}                                                                                                     }

const char short_options[] = "C:cht:rne:wdv?k";                                                       const char short_options[] = "C:cht:rne:wdv?k";
#ifdef HAVE_GETOPT_LONG                                                                               #ifdef HAVE_GETOPT_LONG
int option_index = 0;                                                                                 int option_index = 0;
const struct option long_options[] = {                                                                const struct option long_options[] = {
#ifdef ENABLE_RC                                                                                      #ifdef ENABLE_RC
    { "rcfile",        required_argument, 0, 'C' },                                                       { "rcfile",        required_argument, 0, 'C' },
    { "norcfile",      no_argument,       0, 'c' },                                                       { "norcfile",      no_argument,       0, 'c' },
#endif // ENABLE_RC                                                                                   #endif // ENABLE_RC
#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
    { "nohistory",     no_argument,       0, 'h' },                                                       { "nohistory",     no_argument,       0, 'h' },
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
    { "tabsize",       required_argument, 0, 't' },                                                       { "tabsize",       required_argument, 0, 't' },
    { "view",          no_argument,       0, 'r' },                                                       { "view",          no_argument,       0, 'r' },
#ifdef USE_NKF                                                                                        #ifdef USE_NKF
    { "nonkf",         no_argument,       0, 'n' },                                                       { "nonkf",         no_argument,       0, 'n' },
    { "encoding",      required_argument, 0, 'e' },                                                       { "encoding",      required_argument, 0, 'e' },
#endif // USE_NKF                                                                                     #endif // USE_NKF
#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
    { "twopane",       no_argument,       0, 'w' },                                                       { "twopane",       no_argument,       0, 'w' },
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
    { "debug",         no_argument,       0, 'd' },                                                       { "debug",         no_argument,       0, 'd' },
#endif // ENABLE_DEBUG                                                                                #endif // ENABLE_DEBUG
    { "version",       no_argument,       0, 'v' },     // show version                                   { "version",       no_argument,       0, 'v' },     // show version
    { "help",          no_argument,       0, '?' },     // show help text                                 { "help",          no_argument,       0, '?' },     // show help text
#ifndef ENABLE_NCURSES                                                                                #ifndef ENABLE_NCURSES
    { "keyseq",        no_argument,       0, 'k' },     // investigate key sequence                       { "keyseq",        no_argument,       0, 'k' },     // investigate key sequence
#endif // ENABLE_NCURSES                                                                              #endif // ENABLE_NCURSES
    { 0,               no_argument,       0, 0 }                                                          { 0,               no_argument,       0, 0 }
};                                                                                                    };
#endif // HAVE_GETOPT_LONG                                                                            #endif // HAVE_GETOPT_LONG

PRIVATE int parse_options(int argc, char *argv[])                                                     PRIVATE int parse_options(int argc, char *argv[])
{                                                                                                     {
    int optchr;                                                                                           int optchr;

    SET_APPMD_VAL(app_DEBUG_PRINTF, DEBUG_NONE);                                                          SET_APPMD_VAL(app_DEBUG_PRINTF, DEBUG_NONE);
#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
    for (optchr = 0; optchr < argc; optchr++) {                                                           for (optchr = 0; optchr < argc; optchr++) {
        flf_d_printf("optind:%d: %s\n", optchr, argv[optchr]);                                                flf_d_printf("optind:%d: %s\n", optchr, argv[optchr]);
    }                                                                                                     }
#endif // ENABLE_DEBUG                                                                                #endif // ENABLE_DEBUG
#ifdef HAVE_GETOPT_LONG                                                                               #ifdef HAVE_GETOPT_LONG
    while ((optchr = getopt_long(argc, argv,                                                              while ((optchr = getopt_long(argc, argv,
     short_options, long_options, &option_index)) != -1) {                                                 short_options, long_options, &option_index)) != -1) {
#else                                                                                                 #else
    while ((optchr = getopt(argc, argv,                                                                   while ((optchr = getopt(argc, argv,
     short_options)) != -1) {                                                                              short_options)) != -1) {
#endif                                                                                                #endif
flf_d_printf("optchr: %c\n", optchr);                                                                 flf_d_printf("optchr: %c\n", optchr);
if (optarg) {                                                                                         if (optarg) {
  flf_d_printf("*optarg: %c\n", *optarg);                                                               flf_d_printf("*optarg: %c\n", *optarg);
}                                                                                                     }
        switch (optchr) {                                                                                     switch (optchr) {
#ifdef ENABLE_RC                                                                                      #ifdef ENABLE_RC
        case 'C':                                                                                             case 'C':
            main_rc_file_name = optarg;                                                                           main_rc_file_name = optarg;
flf_d_printf("main_rc_file_name: [%s]\n", main_rc_file_name);                                         flf_d_printf("main_rc_file_name: [%s]\n", main_rc_file_name);
            break;                                                                                                break;
        case 'c':                                                                                             case 'c':
            CLR_APPMD(app_RCFILE);                                                                                CLR_APPMD(app_RCFILE);
            break;                                                                                                break;
#endif // ENABLE_RC                                                                                   #endif // ENABLE_RC
#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
        case 'h':                                                                                             case 'h':
            CLR_APPMD(app_HISTORY);                                                                               CLR_APPMD(app_HISTORY);
            break;                                                                                                break;
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
        case 't':                                                                                             case 't':
            if (optarg) {                                                                                         if (optarg) {
                int tab_size = 0;                                                                                     int tab_size = 0;
                sscanf(optarg, "%d", &tab_size);                                                                      sscanf(optarg, "%d", &tab_size);
                if ((tab_size < 1) || (MAX_TAB_SIZE < tab_size)) {                                                    if ((tab_size < 1) || (MAX_TAB_SIZE < tab_size)) {
flf_d_printf("Illegal tab size: [%d]\n", tab_size);                                                   flf_d_printf("Illegal tab size: [%d]\n", tab_size);
                    show_usage();                                                                                         show_usage();
                }                                                                                                     }
                SET_CUR_EBUF_STATE(buf_TAB_SIZE, tab_size);                                                           SET_CUR_EBUF_STATE(buf_TAB_SIZE, tab_size);
            }                                                                                                     }
            break;                                                                                                break;
        case 'r':                                                                                             case 'r':
            SET_CUR_EBUF_STATE(buf_VIEW_MODE, 1);                                                                 SET_CUR_EBUF_STATE(buf_VIEW_MODE, 1);
            break;                                                                                                break;
#ifdef USE_NKF                                                                                        #ifdef USE_NKF
        case 'n':                                                                                             case 'n':
            CLR_APPMD(ed_USE_NKF);                                                                                CLR_APPMD(ed_USE_NKF);
            break;                                                                                                break;
#endif // USE_NKF                                                                                     #endif // USE_NKF
#ifdef USE_NKF                                                                                        #ifdef USE_NKF
        case 'e':                                                                                             case 'e':
            if (optarg) {                                                                                         if (optarg) {
                switch (optarg[0]) {                                                                                  switch (optarg[0]) {
                case 'u':                                                                                             case 'u':
                    SET_CUR_EBUF_STATE(buf_ENCODE, ENCODE_UTF8);                                                          SET_CUR_EBUF_STATE(buf_ENCODE, ENCODE_UTF8);
                    break;                                                                                                break;
                case 'e':                                                                                             case 'e':
                    SET_CUR_EBUF_STATE(buf_ENCODE, ENCODE_EUCJP);                                                         SET_CUR_EBUF_STATE(buf_ENCODE, ENCODE_EUCJP);
                    break;                                                                                                break;
                case 's':                                                                                             case 's':
                    SET_CUR_EBUF_STATE(buf_ENCODE, ENCODE_SJIS);                                                          SET_CUR_EBUF_STATE(buf_ENCODE, ENCODE_SJIS);
                    break;                                                                                                break;
                case 'j':                                                                                             case 'j':
                    SET_CUR_EBUF_STATE(buf_ENCODE, ENCODE_JIS);                                                           SET_CUR_EBUF_STATE(buf_ENCODE, ENCODE_JIS);
                    break;                                                                                                break;
                case 'b':                                                                                             case 'b':
                    SET_CUR_EBUF_STATE(buf_ENCODE, ENCODE_BINARY);                                                        SET_CUR_EBUF_STATE(buf_ENCODE, ENCODE_BINARY);
                    break;                                                                                                break;
                case 'a':                                                                                             case 'a':
                default:                                                                                              default:
                    SET_CUR_EBUF_STATE(buf_ENCODE, ENCODE_ASCII);                                                         SET_CUR_EBUF_STATE(buf_ENCODE, ENCODE_ASCII);
                    break;                                                                                                break;
                }                                                                                                     }
            }                                                                                                     }
/////flf_d_printf("CUR_EBUF_STATE(buf_ENCODE): %d\n", CUR_EBUF_STATE(buf_ENCODE));                 |  ////flf_d_printf("CUR_EBUF_STATE(buf_ENCODE): %d\n", CUR_EBUF_STATE(buf_ENCODE));
            break;                                                                                                break;
#endif // USE_NKF                                                                                     #endif // USE_NKF
#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
        case 'w':                                                                                             case 'w':
            SET_APPMD(fl_FILER_PANES);                                                                            SET_APPMD(fl_FILER_PANES);
            SET_APPMD_VAL(fl_SHOW_FILE_INFO, SHOW_FILE_INFO_1);                                                   SET_APPMD_VAL(fl_SHOW_FILE_INFO, SHOW_FILE_INFO_1);
///         SET_APPMD_VAL(fl_SHOW_FILE_INFO, SHOW_FILE_INFO_3);                                       ///         SET_APPMD_VAL(fl_SHOW_FILE_INFO, SHOW_FILE_INFO_3);
            break;                                                                                                break;
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER
#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
        case 'd':                                                                                             case 'd':
            SET_APPMD_VAL(app_DEBUG_PRINTF, DEBUG_PRINTF);                                                        SET_APPMD_VAL(app_DEBUG_PRINTF, DEBUG_PRINTF);
            set_debug_printf_output(GET_APPMD(app_DEBUG_PRINTF) == DEBUG_PRINTF);                                 set_debug_printf_output(GET_APPMD(app_DEBUG_PRINTF) == DEBUG_PRINTF);
#endif // ENABLE_DEBUG                                                                                #endif // ENABLE_DEBUG
            break;                                                                                                break;
        case 'v':                                                                                             case 'v':
            show_version();                                                                                       show_version();
            exit(0);                                                                                              exit(0);
        case '?':                                                                                             case '?':
            show_usage();                                                                                         show_usage();
            exit(0);                                                                                              exit(0);
#ifndef ENABLE_NCURSES                                                                                #ifndef ENABLE_NCURSES
        case 'k':                                                                                             case 'k':
            investigate_key_sequence();                                                                           investigate_key_sequence();
            exit(0);                                                                                              exit(0);
#endif // ENABLE_NCURSES                                                                              #endif // ENABLE_NCURSES
        default:                                                                                              default:
            fprintf(stderr, "Unknown option: [%c]\n", optchr);                                                    fprintf(stderr, "Unknown option: [%c]\n", optchr);
            break;                                                                                                break;
        }                                                                                                     }
    }                                                                                                     }
    return 0;                                                                                             return 0;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
#ifdef START_UP_TEST                                                                                  #ifdef START_UP_TEST
PRIVATE void start_up_test(void)                                                                      PRIVATE void start_up_test(void)
{                                                                                                     {
    char buf[MAX_PATH_LEN+1];                                                                             char buf[MAX_PATH_LEN+1];
    void *allocated;                                                                                      void *allocated;

/// tio_test();                                                                                       /// tio_test();
    flf_d_printf("getenv(USER): [%s]\n", getenv__("USER"));                                               flf_d_printf("getenv(USER): [%s]\n", getenv__("USER"));
    flf_d_printf("getenv(HOSTNAME): [%s]\n", getenv__("HOSTNAME"));                                       flf_d_printf("getenv(HOSTNAME): [%s]\n", getenv__("HOSTNAME"));
    flf_d_printf("getenv(LANG): [%s]\n", getenv__("LANG"));                                               flf_d_printf("getenv(LANG): [%s]\n", getenv__("LANG"));
    flf_d_printf("ttyname(0): [%s]\n", ttyname(0));                                                       flf_d_printf("ttyname(0): [%s]\n", ttyname(0));
    flf_d_printf("getenv(HOME): [%s]\n", get_home_dir());                                                 flf_d_printf("getenv(HOME): [%s]\n", get_home_dir());

    flf_d_printf("sizeof(int): %d\n", sizeof(int));                                                       flf_d_printf("sizeof(int): %d\n", sizeof(int));
    flf_d_printf("sizeof(long): %d\n", sizeof(long));                                                     flf_d_printf("sizeof(long): %d\n", sizeof(long));
    flf_d_printf("sizeof(int *): %d\n", sizeof(int *));                                                   flf_d_printf("sizeof(int *): %d\n", sizeof(int *));
    flf_d_printf("sizeof(app_mode_t): %d\n", sizeof(app_mode_t));                                         flf_d_printf("sizeof(app_mode_t): %d\n", sizeof(app_mode_t));
    flf_d_printf("sizeof(buf_state_t): %d\n", sizeof(buf_state_t));                                       flf_d_printf("sizeof(buf_state_t): %d\n", sizeof(buf_state_t));
    flf_d_printf("MAX_UTF8C_BYTES: %d\n", MAX_UTF8C_BYTES);                                               flf_d_printf("MAX_UTF8C_BYTES: %d\n", MAX_UTF8C_BYTES);
    flf_d_printf("PATH_MAX: %d\n", PATH_MAX);                                                             flf_d_printf("PATH_MAX: %d\n", PATH_MAX);
    flf_d_printf("MAX_PATH_LEN: %d\n", MAX_PATH_LEN);                                                     flf_d_printf("MAX_PATH_LEN: %d\n", MAX_PATH_LEN);
    flf_d_printf("MAX_SCRN_LINE_BUF_LEN: %d\n", MAX_SCRN_LINE_BUF_LEN);                                   flf_d_printf("MAX_SCRN_LINE_BUF_LEN: %d\n", MAX_SCRN_LINE_BUF_LEN);
    flf_d_printf("MAX_EDIT_LINE_LEN: %d\n", MAX_EDIT_LINE_LEN);                                           flf_d_printf("MAX_EDIT_LINE_LEN: %d\n", MAX_EDIT_LINE_LEN);

    // memory address of various object                                                                   // memory address of various object
    flf_d_printf("mem type: 0x1234567890123456\n");                                                       flf_d_printf("mem type: 0x1234567890123456\n");
    flf_d_printf("auto buf: %p\n", buf);                                                                  flf_d_printf("auto buf: %p\n", buf);
    flf_d_printf("\"string\": %p\n", "string");                                                           flf_d_printf("\"string\": %p\n", "string");
    allocated = malloc__(100);                                                                            allocated = malloc__(100);
    flf_d_printf("malloc  : %p\n", allocated);                                                            flf_d_printf("malloc  : %p\n", allocated);
    free__(allocated);                                                                                    free__(allocated);

    flf_d_printf("#define KEY_RESIZE    0x%04x\n", KEY_RESIZE);                                           flf_d_printf("#define KEY_RESIZE    0x%04x\n", KEY_RESIZE);
    flf_d_printf("#define KEY_HOME      0x%04x\n", KEY_HOME);                                             flf_d_printf("#define KEY_HOME      0x%04x\n", KEY_HOME);
    flf_d_printf("#define KEY_END       0x%04x\n", KEY_END);                                              flf_d_printf("#define KEY_END       0x%04x\n", KEY_END);
    flf_d_printf("#define KEY_UP        0x%04x\n", KEY_UP);                                               flf_d_printf("#define KEY_UP        0x%04x\n", KEY_UP);
    flf_d_printf("#define KEY_DOWN      0x%04x\n", KEY_DOWN);                                             flf_d_printf("#define KEY_DOWN      0x%04x\n", KEY_DOWN);
    flf_d_printf("#define KEY_LEFT      0x%04x\n", KEY_LEFT);                                             flf_d_printf("#define KEY_LEFT      0x%04x\n", KEY_LEFT);
    flf_d_printf("#define KEY_RIGHT     0x%04x\n", KEY_RIGHT);                                            flf_d_printf("#define KEY_RIGHT     0x%04x\n", KEY_RIGHT);
    flf_d_printf("#define KEY_PPAGE     0x%04x\n", KEY_PPAGE);                                            flf_d_printf("#define KEY_PPAGE     0x%04x\n", KEY_PPAGE);
    flf_d_printf("#define KEY_NPAGE     0x%04x\n", KEY_NPAGE);                                            flf_d_printf("#define KEY_NPAGE     0x%04x\n", KEY_NPAGE);
    flf_d_printf("#define KEY_IC        0x%04x\n", KEY_IC);                                               flf_d_printf("#define KEY_IC        0x%04x\n", KEY_IC);
    flf_d_printf("#define KEY_DC        0x%04x\n", KEY_DC);                                               flf_d_printf("#define KEY_DC        0x%04x\n", KEY_DC);
    flf_d_printf("#define KEY_BACKSPACE 0x%04x\n", KEY_BACKSPACE);                                        flf_d_printf("#define KEY_BACKSPACE 0x%04x\n", KEY_BACKSPACE);
    flf_d_printf("#define KEY_ENTER     0x%04x\n", KEY_ENTER);                                            flf_d_printf("#define KEY_ENTER     0x%04x\n", KEY_ENTER);
    flf_d_printf("#define KEY_F(0)      0x%04x\n", KEY_F(0));                                             flf_d_printf("#define KEY_F(0)      0x%04x\n", KEY_F(0));

/// test_wrap_line();                                                                                 /// test_wrap_line();
    test_cwd_PWD();                                                                                       test_cwd_PWD();
    test_normalize_path();                                                                                test_normalize_path();
    test_get_full_path();                                                                                 test_get_full_path();
#if defined(HAVE_REALPATH)                                                                            #if defined(HAVE_REALPATH)
    test_realpath();                                                                                      test_realpath();
#endif // HAVE_REALPATH                                                                               #endif // HAVE_REALPATH

    test_get_file_name_extension();                                                                       test_get_file_name_extension();
    test_cat_dir_and_file();                                                                              test_cat_dir_and_file();
    test_separate_path_to_dir_and_file();                                                                 test_separate_path_to_dir_and_file();

///                                                                                                   /// 
test_get_intersection();                                                                              test_get_intersection();
    get_mem_free_in_kb(1);                                                                                get_mem_free_in_kb(1);
/// test_nn_from_num();                                                                               /// test_nn_from_num();
/// test_utf8c_encode();                                                                              /// test_utf8c_encode();
    test_utf8c_bytes();                                                                                   test_utf8c_bytes();
/// test_wcwidth();                                                                                   /// test_wcwidth();
#ifdef ENABLE_REGEX                                                                                   #ifdef ENABLE_REGEX
    test_regexp();                                                                                        test_regexp();
#endif // ENABLE_REGEX                                                                                #endif // ENABLE_REGEX
///                                                                                                   ///
    test_make_ruler_text();                                                                               test_make_ruler_text();
#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
    test_get_file_size_str();                                                                             test_get_file_size_str();
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER
    test_replace_str();                                                                                   test_replace_str();

    test_get_n_th_file_name();                                                                            test_get_n_th_file_name();
}                                                                                                     }
PRIVATE void start_up_test2(void)                                                                     PRIVATE void start_up_test2(void)
{                                                                                                     {
flf_d_printf("modulo test --------------\n");                                                         flf_d_printf("modulo test --------------\n");
    for (int nn = -9; nn < 10; nn++) {                                                                    for (int nn = -9; nn < 10; nn++) {
flf_d_printf("%2d mod 7 = %2d, %2d mod 5 = %2d, %2d mod 3 = %2d\n",                                   flf_d_printf("%2d mod 7 = %2d, %2d mod 5 = %2d, %2d mod 3 = %2d\n",
 nn, nn % 7, nn, nn % 5, nn, nn % 3);                                                                  nn, nn % 7, nn, nn % 5, nn, nn % 3);
    }                                                                                                     }
}                                                                                                     }
#endif // START_UP_TEST                                                                               #endif // START_UP_TEST
//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

PRIVATE int write_cur_dir_to_exit_file(void)                                                          PRIVATE int write_cur_dir_to_exit_file(void)
{                                                                                                     {
    char buffer[MAX_PATH_LEN+1];                                                                          char buffer[MAX_PATH_LEN+1];
    FILE *fp;                                                                                             FILE *fp;

    // write current directory to the $HOME/EXIT_FILE_NAME                                                // write current directory to the $HOME/EXIT_FILE_NAME
    snprintf(buffer, MAX_PATH_LEN+1, "%s/%s", get_home_dir(), EXIT_FILE_NAME);                            snprintf(buffer, MAX_PATH_LEN+1, "%s/%s", get_home_dir(), EXIT_FILE_NAME);
    if ((fp = fopen(buffer, "w")) != NULL) {                                                              if ((fp = fopen(buffer, "w")) != NULL) {
        fputs(get_full_path_of_cur_dir(buffer), fp);                                                          fputs(get_full_path_of_cur_dir(buffer), fp);
        if (fclose(fp) != 0) {                                                                                if (fclose(fp) != 0) {
            return -1;                                                                                            return -1;
        }                                                                                                     }
        return 0;                                                                                             return 0;
    }                                                                                                     }
    return -1;                                                                                            return -1;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

// Die (gracefully?)                                                                                  // Die (gracefully?)
void app_die_on(const char *msg)                                                                      void app_die_on(const char *msg)
{                                                                                                     {
    be_buf_t *buf;                                                                                        be_buf_t *buf;

    tio_destroy();                                                                                        tio_destroy();

    e_printf("%s", msg);                                                                                  e_printf("%s", msg);

    // then save all of the modified buffers, if any                                                      // then save all of the modified buffers, if any
    for (buf = EDIT_BUFS_TOP_BUF; IS_NODE_INT(buf); buf = NODE_NEXT(buf)) {                               for (buf = EDIT_BUFS_TOP_BUF; IS_NODE_INT(buf); buf = NODE_NEXT(buf)) {
        set_epc_buf(buf);                                                                                     set_epc_buf(buf);
        if (check_cur_buf_modified()) {                                                                       if (check_cur_buf_modified()) {
            // save the file if it's been modified                                                                // save the file if it's been modified
            die_save_file(get_epc_buf()->file_path);                                                              die_save_file(get_epc_buf()->file_path);
        }                                                                                                     }
    }                                                                                                     }

    signal_clear();                                                                                       signal_clear();
    exit(255);                                                                                            exit(255);
}                                                                                                     }

// save modified files to save-file before dying                                                      // save modified files to save-file before dying
PRIVATE void die_save_file(const char *die_file_path)                                                 PRIVATE void die_save_file(const char *die_file_path)
{                                                                                                     {
    char file_path[MAX_PATH_LEN+5+1];                                                                     char file_path[MAX_PATH_LEN+5+1];
    int ret = 0;                                                                                          int ret = 0;

    // If we can't save, we have REAL bad problems, but we might as well TRY.                             // If we can't save, we have REAL bad problems, but we might as well TRY.
    if (die_file_path[0] == '\0') {                                                                       if (die_file_path[0] == '\0') {
        e_printf(_("\nNo file written\n"));                                                                   e_printf(_("\nNo file written\n"));
        return;                                                                                               return;
    } else {                                                                                              } else {
        strlcpy__(file_path, die_file_path, MAX_PATH_LEN);                                                    strlcpy__(file_path, die_file_path, MAX_PATH_LEN);
        strlcat__(file_path, MAX_PATH_LEN, "#");                                                              strlcat__(file_path, MAX_PATH_LEN, "#");
    }                                                                                                     }
    if (is_strlen_not_0(file_path)) {                                                                     if (is_strlen_not_0(file_path)) {
        ret = backup_and_save_cur_buf(file_path);                                                             ret = backup_and_save_cur_buf(file_path);
        if (ret == 0) {                                                                                       if (ret == 0) {
            e_printf(_("\nBuffer written to %s\n"), file_path);                                                   e_printf(_("\nBuffer written to %s\n"), file_path);
            return;                                                                                               return;
        }                                                                                                     }
    }                                                                                                     }
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

void free_all_allocated_memory(void)                                                                  void free_all_allocated_memory(void)
{                                                                                                     {
#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
    save_histories();                                                                                     save_histories();
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
    _mlc_memorize_count                                                                                   _mlc_memorize_count
    free_all_buffers();                                                                                   free_all_buffers();
    _mlc_differ_count                                                                                     _mlc_differ_count

#ifdef ENABLE_SYNTAX                                                                                  #ifdef ENABLE_SYNTAX
    free_file_types();                                                                                    free_file_types();
#endif // ENABLE_SYNTAX                                                                               #endif // ENABLE_SYNTAX
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

PRIVATE void show_one_option(const char *shortflag, const char *longflag, const char *desc);          PRIVATE void show_one_option(const char *shortflag, const char *longflag, const char *desc);
void show_usage(void)                                                                                 void show_usage(void)
{                                                                                                     {
    printf(_("\nUsage: " BIN_NAME " [+LINE] [option] [file(s)]\n"));                                      printf(_("\nUsage: " BIN_NAME " [+LINE] [option] [file(s)]\n"));
    //               12345678901234567890 12345678901234567890 12345678901234567890                       //               12345678901234567890 12345678901234567890 12345678901234567890
    show_one_option(_("Option"),         _("Long option"),    _("Meaning"));                              show_one_option(_("Option"),         _("Long option"),    _("Meaning"));
#ifdef ENABLE_RC                                                                                      #ifdef ENABLE_RC
    show_one_option("-C RCFILE",         "--rcfile=RCFILE",   _("Read RCFILE"));                          show_one_option("-C RCFILE",         "--rcfile=RCFILE",   _("Read RCFILE"));
    show_one_option("-c",                "--norcfile",        _("Don't look at berc files"));             show_one_option("-c",                "--norcfile",        _("Don't look at berc files"));
#endif // ENABLE_RC                                                                                   #endif // ENABLE_RC
#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
    show_one_option("-h",                "--nohistory",       _("Don't use history file"));               show_one_option("-h",                "--nohistory",       _("Don't use history file"));
#endif // ENABLE_HISTORY                                                                              #endif // ENABLE_HISTORY
    show_one_option("-t NUM",            "--tabsize=NUM",     _("Set tab-size to NUM[1-15]"));            show_one_option("-t NUM",            "--tabsize=NUM",     _("Set tab-size to NUM[1-15]"));
    show_one_option("-r",                "--view",            _("View mode(Read only mode)"));            show_one_option("-r",                "--view",            _("View mode(Read only mode)"));
#ifdef USE_NKF                                                                                        #ifdef USE_NKF
    show_one_option("-n",                "--nonkf",           _("Don't use nkf"));                        show_one_option("-n",                "--nonkf",           _("Don't use nkf"));
    show_one_option("-e a",              "--encoding=a",      _("ASCII character encoding"));             show_one_option("-e a",              "--encoding=a",      _("ASCII character encoding"));
    show_one_option("-e j",              "--encoding=j",      _("JIS character encoding"));               show_one_option("-e j",              "--encoding=j",      _("JIS character encoding"));
    show_one_option("-e e",              "--encoding=e",      _("EUCJP character encoding"));             show_one_option("-e e",              "--encoding=e",      _("EUCJP character encoding"));
    show_one_option("-e s",              "--encoding=s",      _("SJIS character encoding"));              show_one_option("-e s",              "--encoding=s",      _("SJIS character encoding"));
    show_one_option("-e u",              "--encoding=u",      _("UTF8 character encoding"));              show_one_option("-e u",              "--encoding=u",      _("UTF8 character encoding"));
#endif // USE_NKF                                                                                     #endif // USE_NKF
#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
    show_one_option("-d",                "--debug",           _("Output debug log to stderr"));           show_one_option("-d",                "--debug",           _("Output debug log to stderr"));
#endif // ENABLE_DEBUG                                                                                #endif // ENABLE_DEBUG
    show_one_option("-v",                "--version",         _("Show version information"));             show_one_option("-v",                "--version",         _("Show version information"));
    show_one_option("-?",                "--help",            _("Show this message"));                    show_one_option("-?",                "--help",            _("Show this message"));
    show_one_option("+NUM",              "",                  _("Start at line number NUM"));             show_one_option("+NUM",              "",                  _("Start at line number NUM"));
#ifndef ENABLE_NCURSES                                                                                #ifndef ENABLE_NCURSES
    show_one_option("-k",                "--keyseq",          _("Investigate key codes"));                show_one_option("-k",                "--keyseq",          _("Investigate key codes"));
#endif // ENABLE_NCURSES                                                                              #endif // ENABLE_NCURSES
}                                                                                                     }

// Print one option explanation to the screen                                                         // Print one option explanation to the screen
PRIVATE void show_one_option(const char *shortflag, const char *longflag, const char *desc)           PRIVATE void show_one_option(const char *shortflag, const char *longflag, const char *desc)
{                                                                                                     {
    printf(" %-20s", shortflag);                                                                          printf(" %-20s", shortflag);
#ifdef HAVE_GETOPT_LONG                                                                               #ifdef HAVE_GETOPT_LONG
    printf(" %-20s", longflag);                                                                           printf(" %-20s", longflag);
#endif // HAVE_GETOPT_LONG                                                                            #endif // HAVE_GETOPT_LONG
    printf(" %s\n", desc);                                                                                printf(" %s\n", desc);
}                                                                                                     }

void show_version(void)                                                                               void show_version(void)
{                                                                                                     {
    printf(_("%s editor version %s (compiled at %s, %s)\n"),                                              printf(_("%s editor version %s (compiled at %s, %s)\n"),
     APP_NAME, VERSION, __TIME__, __DATE__);                                                               APP_NAME, VERSION, __TIME__, __DATE__);
    printf(_(" Build Options:\n"));                                                                       printf(_(" Build Options:\n"));
#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
    printf("   --enable-filer\n");                                                                        printf("   --enable-filer\n");
#else                                                                                                 #else
    printf("   --disable-filer\n");                                                                       printf("   --disable-filer\n");
#endif                                                                                                #endif
#ifdef ENABLE_NLS                                                                                     #ifdef ENABLE_NLS
    printf("   --enable-nls\n");                                                                          printf("   --enable-nls\n");
#else                                                                                                 #else
    printf("   --disable-nls\n");                                                                         printf("   --disable-nls\n");
#endif                                                                                                #endif
#ifdef ENABLE_RC                                                                                      #ifdef ENABLE_RC
    printf("   --enable-rc\n");                                                                           printf("   --enable-rc\n");
#else                                                                                                 #else
    printf("   --disable-rc\n");                                                                          printf("   --disable-rc\n");
#endif                                                                                                #endif
#ifdef ENABLE_UTF8                                                                                    #ifdef ENABLE_UTF8
    printf("   --enable-utf8\n");                                                                         printf("   --enable-utf8\n");
#else                                                                                                 #else
    printf("   --disable-utf8\n");                                                                        printf("   --disable-utf8\n");
#endif                                                                                                #endif
#if defined(USE_NCURSES) || defined(USE_NCURSESW)                                                     #if defined(USE_NCURSES) || defined(USE_NCURSESW)
    printf("   --enable-ncurses\n");                                                                      printf("   --enable-ncurses\n");
#else                                                                                                 #else
    printf("   --disable-ncurses\n");                                                                     printf("   --disable-ncurses\n");
#endif                                                                                                #endif
#ifdef USE_NKF                                                                                        #ifdef USE_NKF
    printf("   --enable-nkf\n");                                                                          printf("   --enable-nkf\n");
#else                                                                                                 #else
    printf("   --disable-nkf\n");                                                                         printf("   --disable-nkf\n");
#endif                                                                                                #endif
#ifdef ENABLE_HISTORY                                                                                 #ifdef ENABLE_HISTORY
    printf("   --enable-history\n");                                                                      printf("   --enable-history\n");
#else                                                                                                 #else
    printf("   --disable-history\n");                                                                     printf("   --disable-history\n");
#endif                                                                                                #endif
#ifdef ENABLE_REGEX                                                                                   #ifdef ENABLE_REGEX
    printf("   --enable-regex\n");                                                                        printf("   --enable-regex\n");
#else                                                                                                 #else
    printf("   --disable-regex\n");                                                                       printf("   --disable-regex\n");
#endif                                                                                                #endif
#ifdef ENABLE_SYNTAX                                                                                  #ifdef ENABLE_SYNTAX
    printf("   --enable-syntax\n");                                                                       printf("   --enable-syntax\n");
#else                                                                                                 #else
    printf("   --disable-syntax\n");                                                                      printf("   --disable-syntax\n");
#endif                                                                                                #endif
#ifdef USE_PCRE                                                                                       #ifdef USE_PCRE
    printf("   --enable-pcre\n");                                                                         printf("   --enable-pcre\n");
#else                                                                                                 #else
    printf("   --disable-pcre\n");                                                                        printf("   --disable-pcre\n");
#endif                                                                                                #endif
#ifdef ENABLE_UNDO                                                                                    #ifdef ENABLE_UNDO
    printf("   --enable-undo\n");                                                                         printf("   --enable-undo\n");
#else                                                                                                 #else
    printf("   --disable-undo\n");                                                                        printf("   --disable-undo\n");
#endif                                                                                                #endif
#ifdef USE_BUSYBOX                                                                                    #ifdef USE_BUSYBOX
    printf("   --enable-busybox\n");                                                                      printf("   --enable-busybox\n");
#else                                                                                                 #else
    printf("   --disable-busybox\n");                                                                     printf("   --disable-busybox\n");
#endif                                                                                                #endif
#ifdef ENABLE_HELP                                                                                    #ifdef ENABLE_HELP
    printf("   --enable-help\n");                                                                         printf("   --enable-help\n");
#else // ENABLE_HELP                                                                                  #else // ENABLE_HELP
    printf("   --disable-help\n");                                                                        printf("   --disable-help\n");
#endif // ENABLE_HELP                                                                                 #endif // ENABLE_HELP
#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
    printf("   --enable-debug\n");                                                                        printf("   --enable-debug\n");
#else                                                                                                 #else
    printf("   --disable-debug\n");                                                                       printf("   --disable-debug\n");
#endif                                                                                                #endif
    printf("\n");                                                                                         printf("\n");
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
#ifdef ENABLE_HELP                                                                                    #ifdef ENABLE_HELP
const char *splash_text_b[] = {                                                                       const char *splash_text_b[] = {
//012345678901234567890123456789                                                                      //012345678901234567890123456789
 "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",                                                                     "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
 "b                            b",                                                                     "b                            b",
 "b                            b",                                                                     "b                            b",
 "b                            b",                                                                     "b                            b",
 "b                            b",                                                                     "b                            b",
 "b                            b",                                                                     "b                            b",
 "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",                                                                     "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
 "",                                                                                                   "",
};                                                                                                    };
const char *splash_text_s[] = {                                                                       const char *splash_text_s[] = {
//0123456789012345678901234567890123456789012345678                                                   //0123456789012345678901234567890123456789012345678
 "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",                                                  "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
 "b    FFs   FFs     FFs                          d",                                                  "b    FFs   FFs     FFs                          d",
 "b    FFs   FFs     FFs    BBBBBBBs   BBBBBBBs   d",                                                  "b    FFs   FFs     FFs    BBBBBBBs   BBBBBBBs   d",
 "b  FFs FFs FFs FFs FFs    BBs   BBs  BBs        d",                                                  "b  FFs FFs FFs FFs FFs    BBs   BBs  BBs        d",
 "bFFs   FFs FFs FFs FFFFFFsBBBBBBBs   BBBBBBs    d",                                                  "bFFs   FFs FFs FFs FFFFFFsBBBBBBBs   BBBBBBs    d",
 "b    FFFFFFFFFFFFsFFsFFs  BBs   BBs  BBs        d",                                                  "b    FFFFFFFFFFFFsFFsFFs  BBs   BBs  BBs        d",
 "b  FFs           FFs FFs  BBBBBBBs   BBBBBBBs   d",                                                  "b  FFs           FFs FFs  BBBBBBBs   BBBBBBBs   d",
 "bFFFFs FFFFFFFFFFFFs FFs                        d",                                                  "bFFFFs FFFFFFFFFFFFs FFs                        d",
 "b  FFs   FFs FFs   FFs    EEEEs  EsEs           d",                                                  "b  FFs   FFs FFs   FFs    EEEEs  EsEs           d",
 "b  FFs   FFs FFs   FFs    Es     Es   Es        d",                                                  "b  FFs   FFs FFs   FFs    Es     Es   Es        d",
 "b  FFs   FFs FFs FFs FFs  EEEs EEEsEsEEEsEEEsEEsd",                                                  "b  FFs   FFs FFs FFs FFs  EEEs EEEsEsEEEsEEEsEEsd",
 "b  FFs FFs     FFs   FFs  Es   EsEsEs Es EsEsEs d",                                                  "b  FFs FFs     FFs   FFs  Es   EsEsEs Es EsEsEs d",
 "b  FFs       FFs       FFsEEEEsEEEsEs Es EEEsEs d",                                                  "b  FFs       FFs       FFsEEEEsEEEsEs Es EEEsEs d",
 "bdddddddddddddddddddddddddddddddddddddddddddddddd",                                                  "bdddddddddddddddddddddddddddddddddddddddddddddddd",
 "",                                                                                                   "",
};                                                                                                    };
const char *splash_text_m[] = {                                                                       const char *splash_text_m[] = {
//0123456789012345678901234567890123456789012345678901234567                                          //0123456789012345678901234567890123456789012345678901234567
 "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",                                          "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
 "b      FFs    FFFs       FFs                            d",                                          "b      FFs    FFFs       FFs                            d",
 "b    FFFFs    FFs        FFFs                           d",                                          "b    FFFFs    FFs        FFFs                           d",
 "b  FFFs   FFs FFs FFFs  FFs       BBBBBBBs  BBBBBBBs    d",                                          "b  FFFs   FFs FFs FFFs  FFs       BBBBBBBs  BBBBBBBs    d",
 "bFFFs     FFs FFs FFs  FFs        BBs   BBs BBs         d",                                          "bFFFs     FFs FFs FFs  FFs        BBs   BBs BBs         d",
 "b      FFsFFs FFs FFs FFFFFFFFFFFsBBBBBBBs  BBBBBBs     d",                                          "b      FFsFFs FFs FFs FFFFFFFFFFFsBBBBBBBs  BBBBBBs     d",
 "b     FFFsFFFFFFFFFFsFFs     FFs  BBs   BBs BBs         d",                                          "b     FFFsFFFFFFFFFFsFFs     FFs  BBs   BBs BBs         d",
 "b    FFFs               FFs  FFs  BBBBBBBs  BBBBBBBs    d",                                          "b    FFFs               FFs  FFs  BBBBBBBs  BBBBBBBs    d",
 "b  FFFFFsFFFFFFFFFFFFs   FFsFFs                         d",                                          "b  FFFFFsFFFFFFFFFFFFs   FFsFFs                         d",
 "bFFF  FFs   FFs FFs       FFFFs   EEEEs  EsEs           d",                                          "bFFF  FFs   FFs FFs       FFFFs   EEEEs  EsEs           d",
 "b     FFs   FFs FFs        FFs    Es     Es   Es        d",                                          "b     FFs   FFs FFs        FFs    Es     Es   Es        d",
 "b     FFs   FFs FFs FFs   FFFs    EEEs EEEsEsEEEsEEEsEEsd",                                          "b     FFs   FFs FFs FFs   FFFs    EEEs EEEsEsEEEsEEEsEEsd",
 "b     FFs  FFs  FFFFFFs  FFsFFs   Es   EsEsEs Es EsEsEs d",                                          "b     FFs  FFs  FFFFFFs  FFsFFs   Es   EsEsEs Es EsEsEs d",
 "b     FFs FFs   FFFs   FFs   FFFs EEEEsEEEsEs Es EEEsEs d",                                          "b     FFs FFs   FFFs   FFs   FFFs EEEEsEEEsEs Es EEEsEs d",
 "b     FFsFFs         FFs      FFFFs                     d",                                          "b     FFsFFs         FFs      FFFFs                     d",
 "bdddddddddddddddddddddddddddddddddddddddddddddddddddddddd",                                          "bdddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
 "",                                                                                                   "",
};                                                                                                    };
const char *splash_text_l[] = {                                                                       const char *splash_text_l[] = {
//01234567890123456789012345678901234567890123456789012345678901234567890123456789                    //01234567890123456789012345678901234567890123456789012345678901234567890123456789
 "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",                   "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
 "b         FFFs      FFFFFs      FFFFs                                          d",                   "b         FFFs      FFFFFs      FFFFs                                          d",
 "b       FFFFFFs     FFFFs       FFFFFs                                         d",                   "b       FFFFFFs     FFFFs       FFFFFs                                         d",
 "b      FFFFFs  FFFs FFFFs FFFFs FFFFs                                          d",                   "b      FFFFFs  FFFs FFFFs FFFFs FFFFs                                          d",
 "b     FFFFs    FFFs FFFFs FFFs  FFFFs            BBBBBBs   BBBBBBBs            d",                   "b     FFFFs    FFFs FFFFs FFFs  FFFFs            BBBBBBs   BBBBBBBs            d",
 "b   FFFFs      FFFs FFFFs FFFs FFFFs             BBs   BBs BBs                 d",                   "b   FFFFs      FFFs FFFFs FFFs FFFFs             BBs   BBs BBs                 d",
 "b FFFFs    FFFsFFFs FFFFs FFFs FFFs        FFFs  BBs   BBs BBs                 d",                   "b FFFFs    FFFsFFFs FFFFs FFFs FFFs        FFFs  BBs   BBs BBs                 d",
 "b         FFFFsFFFs FFFFs FFFsFFFFFFFFFFFFFFFFFFsBBBBBBs   BBBBBs              d",                   "b         FFFFsFFFs FFFFs FFFsFFFFFFFFFFFFFFFFFFsBBBBBBs   BBBBBs              d",
 "b        FFFFFsFFFFFFFFFFFFFFFFFs       FFFFs    BBs   BBs BBs                 d",                   "b        FFFFFsFFFFFFFFFFFFFFFFFs       FFFFs    BBs   BBs BBs                 d",
 "b       FFFFs  FFs        FFFFFFs       FFFFs    BBs   BBs BBs                 d",                   "b       FFFFs  FFs        FFFFFFs       FFFFs    BBs   BBs BBs                 d",
 "b      FFFFs               FFFsFFs      FFFs     BBBBBBs   BBBBBBBs            d",                   "b      FFFFs               FFFsFFs      FFFs     BBBBBBs   BBBBBBBs            d",
 "b     FFFFFFs             FFs   FFs    FFFs                                    d",                   "b     FFFFFFs             FFs   FFs    FFFs                                    d",
 "b   FFFFFFFFsFFFFFFFFFFFFFFFFFs  FFs  FFFFs                                    d",                   "b   FFFFFFFFsFFFFFFFFFFFFFFFFFs  FFs  FFFFs                                    d",
 "b FFFFs FFFFs   FFFFs FFFFs       FFFFFFFs       EEEEEEs    Es                 d",                   "b FFFFs FFFFs   FFFFs FFFFs       FFFFFFFs       EEEEEEs    Es                 d",
 "b       FFFFs   FFFFs FFFFs        FFFFFFs       Es         EsEs Es            d",                   "b       FFFFs   FFFFs FFFFs        FFFFFFs       Es         EsEs Es            d",
 "b       FFFFs   FFFFs FFFFs         FFFFs        Es         Es   Es            d",                   "b       FFFFs   FFFFs FFFFs         FFFFs        Es         Es   Es            d",
 "b       FFFFs   FFFFs FFFFs FFs    FFFFFFFs      EEEEEs  EEEEsEsEEEs EEEs EsEs d",                   "b       FFFFs   FFFFs FFFFs FFs    FFFFFFFs      EEEEEs  EEEEsEsEEEs EEEs EsEs d",
 "b       FFFFs  FFFFs  FFFFFFFs    FFFFFFFFFFs    Es     Es  EsEs Es Es  EsEEs  d",                   "b       FFFFs  FFFFs  FFFFFFFs    FFFFFFFFFFs    Es     Es  EsEs Es Es  EsEEs  d",
 "b       FFFFs  FFFs FFFFFFFs    FFFFs   FFFFFFs  Es     Es  EsEs Es Es  EsEs   d",                   "b       FFFFs  FFFs FFFFFFFs    FFFFs   FFFFFFs  Es     Es  EsEs Es Es  EsEs   d",
 "b       FFFFs FFs     FFFs    FFFFs     FFFFFFFFsEEEEEEs EEEEsEs  Es EEEs Es   d",                   "b       FFFFs FFs     FFFs    FFFFs     FFFFFFFFsEEEEEEs EEEEsEs  Es EEEs Es   d",
 "b       FFFFsFFs            FFFFs        FFFFFs                                d",                   "b       FFFFsFFs            FFFFs        FFFFFs                                d",
 "b       FFFFs           FFFFFFs                                                d",                   "b       FFFFs           FFFFFFs                                                d",
 "bddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",                   "bddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
 "",                                                                                                   "",
};                                                                                                    };

void disp_splash(int delay)                                                                           void disp_splash(int delay)
{                                                                                                     {
    int splash_size_idx;                                                                                  int splash_size_idx;
    const char **splash_text;                                                                             const char **splash_text;
    int top_y;                                                                                            int top_y;
    int left_x;                                                                                           int left_x;
    int msg1_x, msg2_x, msg3_x, msg4_x, msg5_x;                                                           int msg1_x, msg2_x, msg3_x, msg4_x, msg5_x;
    int msg1_y, msg2_y, msg3_y, msg4_y, msg5_y;                                                           int msg1_y, msg2_y, msg3_y, msg4_y, msg5_y;
    int cols;                                                                                             int cols;
    int lines;                                                                                            int lines;
    int yy;                                                                                               int yy;
    int xx;                                                                                               int xx;
    char buffer[100+1];                                                                                   char buffer[100+1];

    tio_set_cursor_on(0);                                                                                 tio_set_cursor_on(0);
    if (delay >= 0) {                                                                                     if (delay >= 0) {
        // refresh whole screen                                                                               // refresh whole screen
        tio_clear_flash_screen(delay);                                                                        tio_clear_flash_screen(delay);
    }                                                                                                     }
    for (splash_size_idx = 3; splash_size_idx >= 0; splash_size_idx--) {                                  for (splash_size_idx = 3; splash_size_idx >= 0; splash_size_idx--) {
        switch (splash_size_idx) {                                                                            switch (splash_size_idx) {
        case 3:                                                                                               case 3:
            splash_text = splash_text_l;                                                                          splash_text = splash_text_l;
            msg1_y = 1;                                                                                           msg1_y = 1;
            msg2_y = 2;                                                                                           msg2_y = 2;
            msg3_y = 3;                                                                                           msg3_y = 3;
            msg4_y = 12;                                                                                          msg4_y = 12;
            msg5_y = 21;                                                                                          msg5_y = 21;
            msg1_x = 49;                                                                                          msg1_x = 49;
            msg2_x = 49;                                                                                          msg2_x = 49;
            msg3_x = 49;                                                                                          msg3_x = 49;
            msg4_x = 49;                                                                                          msg4_x = 49;
            msg5_x = 49;                                                                                          msg5_x = 49;
            break;                                                                                                break;
        case 2:                                                                                               case 2:
            splash_text = splash_text_m;                                                                          splash_text = splash_text_m;
            msg1_y = 1;                                                                                           msg1_y = 1;
            msg2_y = 1;                                                                                           msg2_y = 1;
            msg3_y = 2;                                                                                           msg3_y = 2;
            msg4_y = 8;                                                                                           msg4_y = 8;
            msg5_y = 14;                                                                                          msg5_y = 14;
            msg1_x = 32;                                                                                          msg1_x = 32;
            msg2_x = 42;                                                                                          msg2_x = 42;
            msg3_x = 34;                                                                                          msg3_x = 34;
            msg4_x = 34;                                                                                          msg4_x = 34;
            msg5_x = 27;                                                                                          msg5_x = 27;
            break;                                                                                                break;
        case 1:                                                                                               case 1:
            splash_text = splash_text_s;                                                                          splash_text = splash_text_s;
            msg1_y = 0;                                                                                           msg1_y = 0;
            msg2_y = 0;                                                                                           msg2_y = 0;
            msg3_y = 1;                                                                                           msg3_y = 1;
            msg4_y = 7;                                                                                           msg4_y = 7;
            msg5_y = 13;                                                                                          msg5_y = 13;
            msg1_x = 24;                                                                                          msg1_x = 24;
            msg2_x = 34;                                                                                          msg2_x = 34;
            msg3_x = 26;                                                                                          msg3_x = 26;
            msg4_x = 26;                                                                                          msg4_x = 26;
            msg5_x = 19;                                                                                          msg5_x = 19;
            break;                                                                                                break;
        default:                                                                                              default:
        case 0:                                                                                               case 0:
            splash_text = splash_text_b;                                                                          splash_text = splash_text_b;
            msg1_y = 1;                                                                                           msg1_y = 1;
            msg2_y = 2;                                                                                           msg2_y = 2;
            msg3_y = 3;                                                                                           msg3_y = 3;
            msg4_y = 4;                                                                                           msg4_y = 4;
            msg5_y = 5;                                                                                           msg5_y = 5;
            msg1_x = 3;                                                                                           msg1_x = 3;
            msg2_x = 3;                                                                                           msg2_x = 3;
            msg3_x = 3;                                                                                           msg3_x = 3;
            msg4_x = 3;                                                                                           msg4_x = 3;
            msg5_x = 1;                                                                                           msg5_x = 1;
            break;                                                                                                break;
        }                                                                                                     }
        cols = strlen(splash_text[0]);                                                                        cols = strlen(splash_text[0]);
        for (lines = 0; *splash_text[lines]; lines++) {                                                       for (lines = 0; *splash_text[lines]; lines++) {
            // nothing to do                                                                                      // nothing to do
        }                                                                                                     }
        if (cols <= tio_get_columns() - 2                                                                     if (cols <= tio_get_columns() - 2
         && lines <= tio_get_lines()) {                                                                        && lines <= tio_get_lines()) {
            break;  // splash frame is smaller than window                                                        break;  // splash frame is smaller than window
        }                                                                                                     }
    }                                                                                                     }
    top_y = (tio_get_lines() - lines) / 2;                                                                top_y = (tio_get_lines() - lines) / 2;
    left_x = (tio_get_columns() - cols) / 2;                                                              left_x = (tio_get_columns() - cols) / 2;
    for (yy = 0; yy < lines; yy++) {                                                                      for (yy = 0; yy < lines; yy++) {
        for (xx = 0; xx < cols; xx++) {                                                                       for (xx = 0; xx < cols; xx++) {
            switch (splash_text[yy][xx]) {                                                                        switch (splash_text[yy][xx]) {
            default:    tio_set_attrs(CL_CY, CL_BK, 0);     break;                                                default:    tio_set_attrs(CL_CY, CL_BK, 0);     break;
            case 'F':   tio_set_attrs(CL_BK, CL_GR, 1);     break;                                                case 'F':   tio_set_attrs(CL_BK, CL_GR, 1);     break;
            case 'B':   tio_set_attrs(CL_BK, CL_RD, 1);     break;                                                case 'B':   tio_set_attrs(CL_BK, CL_RD, 1);     break;
            case 'E':   tio_set_attrs(CL_BK, CL_MG, 1);     break;                                                case 'E':   tio_set_attrs(CL_BK, CL_MG, 1);     break;
            case 'b':   tio_set_attrs(CL_BK, CL_RD, 1);     break;                                                case 'b':   tio_set_attrs(CL_BK, CL_RD, 1);     break;
            case 'd':   tio_set_attrs(CL_BK, CL_RD, 1);     break;                                                case 'd':   tio_set_attrs(CL_BK, CL_RD, 1);     break;
            case 's':   tio_set_attrs(CL_BL, CL_BK, 0);     break;                                                case 's':   tio_set_attrs(CL_BL, CL_BK, 0);     break;
            }                                                                                                     }
            tio_output_string(top_y + yy, left_x + xx, " ", -1);                                                  tio_output_string(top_y + yy, left_x + xx, " ", -1);
        }                                                                                                     }
    }                                                                                                     }
    tio_set_attrs(CL_CY, CL_BK, 0);                                                                       tio_set_attrs(CL_CY, CL_BK, 0);
    tio_output_string(top_y + msg1_y, left_x + msg1_x, "BE-editor", -1);                                  tio_output_string(top_y + msg1_y, left_x + msg1_x, "BE-editor", -1);
    tio_output_string(top_y + msg2_y, left_x + msg2_x, "Version " VERSION, -1);                           tio_output_string(top_y + msg2_y, left_x + msg2_x, "Version " VERSION, -1);
    tio_output_string(top_y + msg3_y, left_x + msg3_x, __DATE__ " " __TIME__, -1);                        tio_output_string(top_y + msg3_y, left_x + msg3_x, __DATE__ " " __TIME__, -1);
    snprintf(buffer, 100+1, _("Screen size: %dx%d"), tio_get_columns(), tio_get_lines());                 snprintf(buffer, 100+1, _("Screen size: %dx%d"), tio_get_columns(), tio_get_lines());
    if (msg2_x >= 0) {                                                                                    if (msg2_x >= 0) {
        tio_output_string(top_y + msg4_y, left_x + msg4_x, buffer, -1);                                       tio_output_string(top_y + msg4_y, left_x + msg4_x, buffer, -1);
    }                                                                                                     }
    if (msg3_x >= 0) {                                                                                    if (msg3_x >= 0) {
        tio_output_string(top_y + msg5_y, left_x + msg5_x,                                                    tio_output_string(top_y + msg5_y, left_x + msg5_x,
         _("We're invincible with this !!"), -1);                                                              _("We're invincible with this !!"), -1);
    }                                                                                                     }
    tio_refresh();                                                                                        tio_refresh();
}                                                                                                     }
#endif // ENABLE_HELP                                                                                 #endif // ENABLE_HELP


// End of main.c                                                                                      // End of main.c
kdiff3 ../old/be/myutf8.c myutf8.c #========================
kdiff3 ../old/be/rcfile.c rcfile.c #========================
kdiff3 ../old/be/regexp.c regexp.c #========================
kdiff3 ../old/be/search.c search.c #========================
kdiff3 ../old/be/sig.c sig.c #========================
kdiff3 ../old/be/termif.c termif.c #========================
kdiff3 ../old/be/tio.c tio.c #========================
kdiff3 ../old/be/utf8.c utf8.c #========================
kdiff3 ../old/be/utilpath.c utilpath.c #========================
/**************************************************************************                           /**************************************************************************
 *   utilpath.c                                                           *                            *   utilpath.c                                                           *
 *                                                                        *                            *                                                                        *
 *   Copyright (C) 1999-2003 Chris Allegretta                             *                            *   Copyright (C) 1999-2003 Chris Allegretta                             *
 *                                                                        *                            *                                                                        *
 *   This program is free software; you can redistribute it and/or modify *                            *   This program is free software; you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published by *                            *   it under the terms of the GNU General Public License as published by *
 *   the Free Software Foundation; either version 2, or (at your option)  *                            *   the Free Software Foundation; either version 2, or (at your option)  *
 *   any later version.                                                   *                            *   any later version.                                                   *
 *                                                                        *                            *                                                                        *
 *   This program is distributed in the hope that it will be useful,      *                            *   This program is distributed in the hope that it will be useful,      *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *                            *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *                            *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 *   GNU General Public License for more details.                         *                            *   GNU General Public License for more details.                         *
 *                                                                        *                            *                                                                        *
 *   You should have received a copy of the GNU General Public License    *                            *   You should have received a copy of the GNU General Public License    *
 *   along with this program; if not, write to the Free Software          *                            *   along with this program; if not, write to the Free Software          *
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *                            *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *
 *                                                                        *                            *                                                                        *
 **************************************************************************/                           **************************************************************************/

#include "utilincs.h"                                                                                 #include "utilincs.h"

#define IS_EQ_STR(gotten, expected)     (strcmp(gotten, expected) == 0)                               #define IS_EQ_STR(gotten, expected)     (strcmp(gotten, expected) == 0)
#define EQU_STR(gotten, expected)       (IS_EQ_STR(gotten, expected) ? '=' : '!')                     #define EQU_STR(gotten, expected)       (IS_EQ_STR(gotten, expected) ? '=' : '!')

// change direcotry independently from filer view                                                     // change direcotry independently from filer view
//   cur_path:      current directory before changing directory and after changing directory          //   cur_path:      current directory before changing directory and after changing directory
//   prev_path:     current directory before changing directory                                       //   prev_path:     current directory before changing directory
//   next_dir_sel:  directory to be pointed in filer after changing directory                         //   next_dir_sel:  directory to be pointed in filer after changing directory
int change_cur_dir_saving_prev_next_dir(char *path,                                                   int change_cur_dir_saving_prev_next_dir(char *path,
 char *cur_path, char *prev_path, char *next_dir_sel)                                                  char *cur_path, char *prev_path, char *next_dir_sel)
{                                                                                                     {
flf_d_printf("path: [%s]\n", path);                                                                   flf_d_printf("path: [%s]\n", path);
    char dir[MAX_PATH_LEN+1];                                                                             char dir[MAX_PATH_LEN+1];

    if (is_path_regular_file(path) > 0) {                                                                 if (is_path_regular_file(path) > 0) {
        // If path is pointing a file, change to the directory containing it.                                 // If path is pointing a file, change to the directory containing it.
        separate_path_to_dir_and_file(path, dir, next_dir_sel);                                               separate_path_to_dir_and_file(path, dir, next_dir_sel);
flf_d_printf("path: [%s]\n", path);                                                                   flf_d_printf("path: [%s]\n", path);
    } else {                                                                                              } else {
        if (strcmp(path, ".") == 0) {                                                                         if (strcmp(path, ".") == 0) {
            return 1;   // OK                                                                                     return 1;   // OK
        } else if (strcmp(path, "..") == 0) {                                                                 } else if (strcmp(path, "..") == 0) {
            separate_path_to_dir_and_file(cur_path, dir, next_dir_sel);                                           separate_path_to_dir_and_file(cur_path, dir, next_dir_sel);
        } else if (strcmp(path, "~") == 0) {                                                                  } else if (strcmp(path, "~") == 0) {
            strcpy__(next_dir_sel, "..");                                                                         strcpy__(next_dir_sel, "..");
            get_abs_path("~", dir);                                                                               get_abs_path("~", dir);
        } else if (path[0] == '/') {                                                                          } else if (path[0] == '/') {
            // absolute path "/some/dir"                                                                          // absolute path "/some/dir"
            strcpy__(next_dir_sel, "..");                                                                         strcpy__(next_dir_sel, "..");
            strlcpy__(dir, path, MAX_PATH_LEN);                                                                   strlcpy__(dir, path, MAX_PATH_LEN);
        } else {                                                                                              } else {
            // relative path "some/dir" or "./some/dir"                                                           // relative path "some/dir" or "./some/dir"
            strcpy__(next_dir_sel, "..");                                                                         strcpy__(next_dir_sel, "..");
            // "/cur/dir" + "some/dir" ==> "/cur/dir/some/dir"                                                    // "/cur/dir" + "some/dir" ==> "/cur/dir/some/dir"
flf_d_printf("cur_path: [%s], path: [%s]\n", cur_path, path);                                         flf_d_printf("cur_path: [%s], path: [%s]\n", cur_path, path);
            cat_dir_and_file(dir, cur_path, path);                                                                cat_dir_and_file(dir, cur_path, path);
        }                                                                                                     }
    }                                                                                                     }
flf_d_printf("dir: [%s]\n", dir);                                                                     flf_d_printf("dir: [%s]\n", dir);
    normalize_full_path(dir);                                                                             normalize_full_path(dir);
flf_d_printf("dir: [%s]\n", dir);                                                                     flf_d_printf("dir: [%s]\n", dir);
    if (is_dir_readable(dir) == 0) {                                                                      if (is_dir_readable(dir) == 0) {
        // We can't open this dir for some reason. Complain.                                                  // We can't open this dir for some reason. Complain.
        return 0;   // Error                                                                                  return 0;   // Error
    }                                                                                                     }
    strlcpy__(prev_path, cur_path, MAX_PATH_LEN);                                                         strlcpy__(prev_path, cur_path, MAX_PATH_LEN);
    change_cur_dir(dir);                                                                                  change_cur_dir(dir);
    get_full_path_of_cur_dir(cur_path);                                                                   get_full_path_of_cur_dir(cur_path);
    return 1;   // OK                                                                                     return 1;   // OK
}                                                                                                     }

//------------------------------------------------------------------------------                      //------------------------------------------------------------------------------
// comparison of change current dir functions                                                         // comparison of change current dir functions
// | func                                     |save before change|may change to parent|               // | func                                     |save before change|may change to parent|
// |------------------------------------------|------------------|--------------------|               // |------------------------------------------|------------------|--------------------|
// | change_cur_dir_by_file_path_after_save   | Yes              | Yes                |               // | change_cur_dir_by_file_path_after_save   | Yes              | Yes                |
// | change_cur_dir_by_file_path              | No               | Yes                |               // | change_cur_dir_by_file_path              | No               | Yes                |
// | change_cur_dir_after_save                | Yes              | No                 |               // | change_cur_dir_after_save                | Yes              | No                 |
// | change_cur_dir                           | No               | No                 |               // | change_cur_dir                           | No               | No                 |

int change_cur_dir_by_file_path_after_save(char *dir_save, char *file_path)                           int change_cur_dir_by_file_path_after_save(char *dir_save, char *file_path)
{                                                                                                     {
    char dir[MAX_PATH_LEN+1];                                                                             char dir[MAX_PATH_LEN+1];
    strip_file_if_path_is_file(file_path, dir);                                                           strip_file_if_path_is_file(file_path, dir);
    return change_cur_dir_after_save(dir_save, dir);                                                      return change_cur_dir_after_save(dir_save, dir);
}                                                                                                     }
int change_cur_dir_by_file_path(char *file_path)                                                      int change_cur_dir_by_file_path(char *file_path)
{                                                                                                     {
    char dir[MAX_PATH_LEN+1];                                                                             char dir[MAX_PATH_LEN+1];
    strip_file_if_path_is_file(file_path, dir);                                                           strip_file_if_path_is_file(file_path, dir);
    return change_cur_dir(dir);                                                                           return change_cur_dir(dir);
}                                                                                                     }
int change_cur_dir_after_save(char *dir_save, const char *dir)                                        int change_cur_dir_after_save(char *dir_save, const char *dir)
{                                                                                                     {
    get_full_path_of_cur_dir(dir_save);                                                                   get_full_path_of_cur_dir(dir_save);
    return change_cur_dir(dir);                                                                           return change_cur_dir(dir);
}                                                                                                     }

char *strip_file_if_path_is_file(char *path, char *dir)                                               char *strip_file_if_path_is_file(char *path, char *dir)
{                                                                                                     {
    if (is_path_regular_file(path) > 0) {                                                                 if (is_path_regular_file(path) > 0) {
        strip_file_from_path(path, dir);                                                                      strip_file_from_path(path, dir);
    } else {                                                                                              } else {
        strlcpy__(dir, path, MAX_PATH_LEN);                                                                   strlcpy__(dir, path, MAX_PATH_LEN);
    }                                                                                                     }
    return dir;                                                                                           return dir;
}                                                                                                     }

/* Strip one dir from the end of the string */                                                        /* Strip one dir from the end of the string */
// /dir1/dir2/file ==> /dir1/dir2                                                                     // /dir1/dir2/file ==> /dir1/dir2
// /dir1/dir2/     ==> /dir1/dir2                                                                     // /dir1/dir2/     ==> /dir1/dir2
// /dir1           ==> /                                                                              // /dir1           ==> /
// ""              ==> /                                                                              // ""              ==> /
char *strip_file_from_path(char *path, char *dir)                                                     char *strip_file_from_path(char *path, char *dir)
{                                                                                                     {
    char file[MAX_PATH_LEN+1];                                                                            char file[MAX_PATH_LEN+1];
    if (dir == NULL) {                                                                                    if (dir == NULL) {
        separate_path_to_dir_and_file(path, path, file);                                                      separate_path_to_dir_and_file(path, path, file);
        return path;                                                                                          return path;
    } else {                                                                                              } else {
        separate_path_to_dir_and_file(path, dir, file);                                                       separate_path_to_dir_and_file(path, dir, file);
        return dir;                                                                                           return dir;
    }                                                                                                     }
}                                                                                                     }

// "filename.ext" ==> "ext"                                                                           // "filename.ext" ==> "ext"
// "filename" ==> ""                                                                                  // "filename" ==> ""
// "." ==> ""                                                                                         // "." ==> ""
// "filename." ==> ""                                                                                 // "filename." ==> ""
// ".filename" ==> "filename"                                                                         // ".filename" ==> "filename"
// ".filename.ext" ==> "ext"                                                                          // ".filename.ext" ==> "ext"
char *get_file_name_extension(char *file_name)                                                        char *get_file_name_extension(char *file_name)
{                                                                                                     {
    char *last_period = NULL;                                                                             char *last_period = NULL;
    char *ptr;                                                                                            char *ptr;

    ptr = file_name;                                                                                      ptr = file_name;
    if (*ptr == '.') {                                                                                    if (*ptr == '.') {
        // "." ==> ""                                                                                         // "." ==> ""
        // ".filename" ==> "filename"                                                                         // ".filename" ==> "filename"
        ptr++;                                                                                                ptr++;
    }                                                                                                     }
    for ( ; *ptr; ptr++) {                                                                                for ( ; *ptr; ptr++) {
        if (*ptr == '.') {                                                                                    if (*ptr == '.') {
            last_period = ptr;                                                                                    last_period = ptr;
        }                                                                                                     }
    }                                                                                                     }
    if (last_period == NULL) {                                                                            if (last_period == NULL) {
        last_period = ptr;                                                                                    last_period = ptr;
    }                                                                                                     }
    if (*last_period == '.') {                                                                            if (*last_period == '.') {
        last_period++;                                                                                        last_period++;
    }                                                                                                     }
    return last_period;                                                                                   return last_period;
}                                                                                                     }

// path                buf_dir     buf_file                                                           // path                buf_dir     buf_file
// /dir1/dir2/file ==> /dir1/dir2  file                                                               // /dir1/dir2/file ==> /dir1/dir2  file
// /dir1/dir2      ==> /dir1       dir2                                                               // /dir1/dir2      ==> /dir1       dir2
// dir/file        ==> dir         file                                                               // dir/file        ==> dir         file
// /file           ==> /           file                                                               // /file           ==> /           file
// file            ==> .           file                                                               // file            ==> .           file
// /               ==> /           ""                                                                 // /               ==> /           ""
// ""              ==> .           ""                                                                 // ""              ==> .           ""
// "."             ==> .           ""                                                                 // "."             ==> .           ""
// ".."            ==> ..          ""                                                                 // ".."            ==> ..          ""
// "..."           ==> .           "..."                                                              // "..."           ==> .           "..."
// path and buf_dir can be the same address                                                           // path and buf_dir can be the same address
char *separate_path_to_dir_and_file(const char *path, char *buf_dir, char *buf_file)                  char *separate_path_to_dir_and_file(const char *path, char *buf_dir, char *buf_file)
{                                                                                                     {
    char buf_path[MAX_PATH_LEN+1];                                                                        char buf_path[MAX_PATH_LEN+1];
    strlcpy__(buf_path, path, MAX_PATH_LEN);                                                              strlcpy__(buf_path, path, MAX_PATH_LEN);
    const char *ptr = get_last_slash(buf_path);                                                           const char *ptr = get_last_slash(buf_path);
    if (*ptr != '/') {  // '/' not found                                                                  if (*ptr != '/') {  // '/' not found
        if ((strcmp(buf_path, ".") == 0) || (strcmp(buf_path, "..") == 0)) {                                  if ((strcmp(buf_path, ".") == 0) || (strcmp(buf_path, "..") == 0)) {
            // "." ==> ".", ""                                                                                    // "." ==> ".", ""
            //   ^                                                                                                //   ^
            // ".." ==> "..", ""                                                                                  // ".." ==> "..", ""
            //    ^                                                                                               //    ^
            ptr = skip_string_const(ptr);                                                                         ptr = skip_string_const(ptr);
            strlcpy__(buf_dir, buf_path, ptr - buf_path);   // "." or ".."                                        strlcpy__(buf_dir, buf_path, ptr - buf_path);   // "." or ".."
        } else {                                                                                              } else {
            // "file" ==> ".", "file"                                                                             // "file" ==> ".", "file"
            //  ^                                                                                                 //  ^
            // ".file" ==> ".", ".file"                                                                           // ".file" ==> ".", ".file"
            //  ^                                                                                                 //  ^
            strcpy(buf_dir, ".");                       // "."                                                    strcpy(buf_dir, ".");                       // "."
        }                                                                                                     }
        strlcpy__(buf_file, ptr, MAX_PATH_LEN);         // "" or "file"                                       strlcpy__(buf_file, ptr, MAX_PATH_LEN);         // "" or "file"
    } else {                                                                                              } else {
        // '/' found                                                                                          // '/' found
        if (ptr == buf_path) {                                                                                if (ptr == buf_path) {
            // "/"     ==> "/", ""                                                                                // "/"     ==> "/", ""
            //  ^                                                                                                 //  ^
            // "/file" ==> "/", "file"                                                                            // "/file" ==> "/", "file"
            //  ^                                                                                                 //  ^
            ptr++;                                                                                                ptr++;
            strlcpy__(buf_dir, buf_path, ptr - buf_path);   // "/"                                                strlcpy__(buf_dir, buf_path, ptr - buf_path);   // "/"
            strlcpy__(buf_file, ptr, MAX_PATH_LEN); // "" or "file"                                               strlcpy__(buf_file, ptr, MAX_PATH_LEN); // "" or "file"
        } else {                                                                                              } else {
            // "...dir1/dir2/" ==> "...dir1/dir2", ""                                                             // "...dir1/dir2/" ==> "...dir1/dir2", ""
            //             ^                                                                                      //             ^
            // "...dir/file"  ==> "...dir", "file"                                                                // "...dir/file"  ==> "...dir", "file"
            //        ^                                                                                           //        ^
            strlcpy__(buf_dir, buf_path, ptr - buf_path);   // "...dir"                                           strlcpy__(buf_dir, buf_path, ptr - buf_path);   // "...dir"
            ptr++;                                                                                                ptr++;
            strlcpy__(buf_file, ptr, MAX_PATH_LEN); // "" or "file"                                               strlcpy__(buf_file, ptr, MAX_PATH_LEN); // "" or "file"
        }                                                                                                     }
    }                                                                                                     }
    if (is_strlen_0(buf_dir)) {                                                                           if (is_strlen_0(buf_dir)) {
        strcpy__(buf_dir, ".");                                                                               strcpy__(buf_dir, ".");
    }                                                                                                     }
    remove_redundant_slash(buf_dir);                                                                      remove_redundant_slash(buf_dir);
    return buf_file;        // return file_name                                                           return buf_file;        // return file_name
}                                                                                                     }

// "/dir1/dir2/" ==> "/dir1/dir2"                                                                     // "/dir1/dir2/" ==> "/dir1/dir2"
// "/"           ==> "/"                                                                              // "/"           ==> "/"
char *remove_last_slash(char *path)                                                                   char *remove_last_slash(char *path)
{                                                                                                     {
    char *ptr = get_last_slash(path);                                                                     char *ptr = get_last_slash(path);
    if (path < ptr && ptr[0] == '/' && ptr[1] == '\0') {                                                  if (path < ptr && ptr[0] == '/' && ptr[1] == '\0') {
        *ptr = '\0';                                                                                          *ptr = '\0';
    }                                                                                                     }
    return path;                                                                                          return path;
}                                                                                                     }

char *add_last_slash_to_dir(char *dir)                                                                char *add_last_slash_to_dir(char *dir)
{                                                                                                     {
    if (strcmp(dir, "/") != 0 && strlen(dir) && dir[strlen(dir) - 1] != '/') {                            if (strcmp(dir, "/") != 0 && strlen(dir) && dir[strlen(dir) - 1] != '/') {
        strlcat__(dir, MAX_PATH_LEN, "/");                                                                    strlcat__(dir, MAX_PATH_LEN, "/");
    }                                                                                                     }
    return dir;                                                                                           return dir;
}                                                                                                     }

int contain_redundant_slash(char *path)                                                               int contain_redundant_slash(char *path)
{                                                                                                     {
    return strstr(path, "//") != NULL;                                                                    return strstr(path, "//") != NULL;
}                                                                                                     }

// "////" ==> "/"                                                                                     // "////" ==> "/"
// "//dir//file" ==> "/dir/file"                                                                      // "//dir//file" ==> "/dir/file"
char *remove_redundant_slash(char *path)                                                              char *remove_redundant_slash(char *path)
{                                                                                                     {
    char *ptr;                                                                                            char *ptr;
    for ( ; ; ) {                                                                                         for ( ; ; ) {
        if ((ptr = strstr(path, "//")) == NULL) {                                                             if ((ptr = strstr(path, "//")) == NULL) {
            break;                                                                                                break;
        }                                                                                                     }
        memmove(ptr, ptr+1, strlen_path(ptr+1)+1);                                                            memmove(ptr, ptr+1, strlen_path(ptr+1)+1);
    }                                                                                                     }
    return path;                                                                                          return path;
}                                                                                                     }

// point to the last '/'                                                                              // point to the last '/'
// /dir1/dir2/file    file                                                                            // /dir1/dir2/file    file
//           ^        ^                                                                               //           ^        ^
char *get_last_slash(char *path)                                                                      char *get_last_slash(char *path)
{                                                                                                     {
    char *ptr = strrchr(path, '/');                                                                       char *ptr = strrchr(path, '/');
    if (ptr == NULL)                                                                                      if (ptr == NULL)
        ptr = path;                                                                                           ptr = path;
    return ptr;                                                                                           return ptr;
}                                                                                                     }

int is_path_exist(const char *path)                                                                   int is_path_exist(const char *path)
{                                                                                                     {
    struct stat st;                                                                                       struct stat st;

    return stat(path, &st) == 0;                                                                          return stat(path, &st) == 0;
}                                                                                                     }
int is_path_regular_file(const char *path)                                                            int is_path_regular_file(const char *path)
{                                                                                                     {
    struct stat st;                                                                                       struct stat st;

    if (stat(path, &st) < 0)                                                                              if (stat(path, &st) < 0)
        return -1;              // no such file nor directory                                                 return -1;              // no such file nor directory
    return S_ISREG(st.st_mode); // 1:file, 0:non-file                                                     return S_ISREG(st.st_mode); // 1:file, 0:non-file
}                                                                                                     }
int is_path_dir(const char *path)                                                                     int is_path_dir(const char *path)
{                                                                                                     {
    struct stat st;                                                                                       struct stat st;

    if (stat(path, &st) < 0)                                                                              if (stat(path, &st) < 0)
        return -1;              // no such file nor directory                                                 return -1;              // no such file nor directory
    return S_ISDIR(st.st_mode); // 1:directory, 0:non-directory                                           return S_ISDIR(st.st_mode); // 1:directory, 0:non-directory
}                                                                                                     }
int is_file_writable(const char *path)                                                                int is_file_writable(const char *path)
{                                                                                                     {
    struct stat st;                                                                                       struct stat st;

    if (stat(path, &st) < 0)                                                                              if (stat(path, &st) < 0)
        return -1;                                                                                            return -1;
    return is_st_writable(&st);                                                                           return is_st_writable(&st);
}                                                                                                     }
int is_st_writable(struct stat *st)                                                                   int is_st_writable(struct stat *st)
{                                                                                                     {
    if (st->st_uid == geteuid()) {                                                                        if (st->st_uid == geteuid()) {
        return (st->st_mode & S_IWUSR) != 0;                                                                  return (st->st_mode & S_IWUSR) != 0;
    } else if (st->st_gid == getegid()) {                                                                 } else if (st->st_gid == getegid()) {
        return (st->st_mode & S_IWGRP) != 0;                                                                  return (st->st_mode & S_IWGRP) != 0;
    }                                                                                                     }
    return (st->st_mode & S_IWOTH) != 0;                                                                  return (st->st_mode & S_IWOTH) != 0;
}                                                                                                     }

int is_dir_readable(const char *path)                                                                 int is_dir_readable(const char *path)
{                                                                                                     {
    DIR *dir;                                                                                             DIR *dir;

    dir = opendir(path);                                                                                  dir = opendir(path);
    // If dir is NULL, don't call closedir()                                                              // If dir is NULL, don't call closedir()
    if (dir)                                                                                              if (dir)
        closedir(dir);                                                                                        closedir(dir);
    return dir != NULL;                                                                                   return dir != NULL;
}                                                                                                     }

// dest: "/home/user/tools/be/file_name.ext"                                                          // dest: "/home/user/tools/be/file_name.ext"
// src : "/home/user/tools/be/file_name.ext" --> match                                                // src : "/home/user/tools/be/file_name.ext" --> match
// src :  "home/user/tools/be/file_name.ext" --> match                                                // src :  "home/user/tools/be/file_name.ext" --> match
// src :            "tools/be/file_name.ext" --> match                                                // src :            "tools/be/file_name.ext" --> match
// src :             "ools/be/file_name.ext" --> not match                                            // src :             "ools/be/file_name.ext" --> not match
// src :                     "file_name.ext" --> match                                                // src :                     "file_name.ext" --> match
// src :                          "name.ext" --> not match                                            // src :                          "name.ext" --> not match
// src :                              ".ext" --> not match                                            // src :                              ".ext" --> not match
int compare_file_path_from_tail(const char *full_path, const char *file_path) {                       int compare_file_path_from_tail(const char *full_path, const char *file_path) {
    if ((strcmp_from_tail(full_path, file_path) == 0)                                                     if ((strcmp_from_tail(full_path, file_path) == 0)
     && (strlen_path(full_path) > strlen_path(file_path))                                                  && (strlen_path(full_path) > strlen_path(file_path))
     && (full_path[strlen_path(full_path) - strlen_path(file_path) - 1] == '/')) {                         && (full_path[strlen_path(full_path) - strlen_path(file_path) - 1] == '/')) {
        return 0;   // match                                                                                  return 0;   // match
    }                                                                                                     }
    return -1;      // not match                                                                          return -1;      // not match
}                                                                                                     }

#ifdef ENABLE_FILER                                                                                   #ifdef ENABLE_FILER
int is_path_wildcard(char *path)                                                                      int is_path_wildcard(char *path)
{                                                                                                     {
#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
    char *ptr;                                                                                            char *ptr;

    ptr = strchr(path, '*');                                                                              ptr = strchr(path, '*');
    if (ptr)                                                                                              if (ptr)
        flf_d_printf("strchr(path, '*') ==> [%s]\n", ptr);                                                    flf_d_printf("strchr(path, '*') ==> [%s]\n", ptr);
    ptr = strchr(path, '?');                                                                              ptr = strchr(path, '?');
    if (ptr)                                                                                              if (ptr)
        flf_d_printf("strchr(path, '?') ==> [%s]\n", ptr);                                                    flf_d_printf("strchr(path, '?') ==> [%s]\n", ptr);
#endif // ENABLE_DEBUG                                                                                #endif // ENABLE_DEBUG
    return strchr(path, '*') || strchr(path, '?');                                                        return strchr(path, '*') || strchr(path, '?');
}                                                                                                     }
#endif // ENABLE_FILER                                                                                #endif // ENABLE_FILER

char *get_home_dir(void)                                                                              char *get_home_dir(void)
{                                                                                                     {
    char *env_home;                                                                                       char *env_home;
    const struct passwd *userdata = 0;                                                                    const struct passwd *userdata = 0;
    static char home_dir[MAX_PATH_LEN+1] = "";                                                            static char home_dir[MAX_PATH_LEN+1] = "";

    if (strlen_path(home_dir) == 0) {                                                                     if (strlen_path(home_dir) == 0) {
        if (strlen(env_home = getenv__("HOME"))) {                                                            if (strlen(env_home = getenv__("HOME"))) {
            strlcpy__(home_dir, env_home, MAX_PATH_LEN);                                                          strlcpy__(home_dir, env_home, MAX_PATH_LEN);
        } else if ((userdata = getpwuid(geteuid())) != NULL) {                                                } else if ((userdata = getpwuid(geteuid())) != NULL) {
            strlcpy__(home_dir, userdata->pw_dir, MAX_PATH_LEN);                                                  strlcpy__(home_dir, userdata->pw_dir, MAX_PATH_LEN);
        } else {                                                                                              } else {
            strcpy__(home_dir, "/");                                                                              strcpy__(home_dir, "/");
        }                                                                                                     }
flf_d_printf("home_dir: [%s]\n", home_dir);                                                           flf_d_printf("home_dir: [%s]\n", home_dir);
    }                                                                                                     }
    return home_dir;                                                                                      return home_dir;
}                                                                                                     }

const char *get_starting_dir(void)                                                                    const char *get_starting_dir(void)
{                                                                                                     {
    static char starting_dir[MAX_PATH_LEN+1] = "";                                                        static char starting_dir[MAX_PATH_LEN+1] = "";

    if (strlen_path(starting_dir) == 0) {                                                                 if (strlen_path(starting_dir) == 0) {
        if (strlen_path(getenv_pwd(starting_dir)) == 0) {                                                     if (strlen_path(getenv_pwd(starting_dir)) == 0) {
            getcwd__(starting_dir);                                                                               getcwd__(starting_dir);
        }                                                                                                     }
flf_d_printf("starting_dir: [%s]\n", starting_dir);                                                   flf_d_printf("starting_dir: [%s]\n", starting_dir);
    }                                                                                                     }
    return starting_dir;                                                                                  return starting_dir;
}                                                                                                     }

int check_wsl()                                                                                       int check_wsl()
{                                                                                                     {
    static int checked = 0;                                                                               static int checked = 0;
    if (! checked) {                                                                                      if (! checked) {
        checked = (is_path_exist("/mnt/c") ? 1 : -1);                                                         checked = (is_path_exist("/mnt/c") ? 1 : -1);
    }                                                                                                     }
    if (checked > 0) {                                                                                    if (checked > 0) {
        flf_d_printf("WSL(Linux running on Windows)\n");                                                      flf_d_printf("WSL(Linux running on Windows)\n");
    } else {                                                                                              } else {
        flf_d_printf("Native Linux\n");                                                                       flf_d_printf("Native Linux\n");
    }                                                                                                     }
    return checked > 0;                                                                                   return checked > 0;
}                                                                                                     }

PRIVATE char full_path_of_cur_dir[MAX_PATH_LEN+1] = "";                                               PRIVATE char full_path_of_cur_dir[MAX_PATH_LEN+1] = "";
PRIVATE char real_path_of_cur_dir[MAX_PATH_LEN+1] = "";                                               PRIVATE char real_path_of_cur_dir[MAX_PATH_LEN+1] = "";
int change_cur_dir(const char *dir)                                                                   int change_cur_dir(const char *dir)
{                                                                                                     {
    int ret;                                                                                              int ret;

    if ((ret = chdir(dir)) == 0) {                                                                        if ((ret = chdir(dir)) == 0) {
        // update "full_path" and "real_path"                                                                 // update "full_path" and "real_path"
        strlcpy__(full_path_of_cur_dir, dir, MAX_PATH_LEN);                                                   strlcpy__(full_path_of_cur_dir, dir, MAX_PATH_LEN);
        getcwd__(real_path_of_cur_dir);                                                                       getcwd__(real_path_of_cur_dir);
    }                                                                                                     }
    return ret;                                                                                           return ret;
}                                                                                                     }
char *get_full_path_of_cur_dir(char *dir)                                                             char *get_full_path_of_cur_dir(char *dir)
{                                                                                                     {
    strlcpy__(dir, full_path_of_cur_dir, MAX_PATH_LEN);                                                   strlcpy__(dir, full_path_of_cur_dir, MAX_PATH_LEN);
    return dir;                                                                                           return dir;
}                                                                                                     }
char *get_real_path_of_cur_dir(char *dir)                                                             char *get_real_path_of_cur_dir(char *dir)
{                                                                                                     {
    strlcpy__(dir, real_path_of_cur_dir, MAX_PATH_LEN);                                                   strlcpy__(dir, real_path_of_cur_dir, MAX_PATH_LEN);
    return dir;                                                                                           return dir;
}                                                                                                     }

//------------------------------------------------------------------------------                      //------------------------------------------------------------------------------

// get real current directory(symbolic link is expanded to absolute path)                             // get real current directory(symbolic link is expanded to absolute path)
// NOTE: getcwd() returns real_path of the current directory                                          // NOTE: getcwd() returns real_path of the current directory
char *getcwd__(char *cwd)                                                                             char *getcwd__(char *cwd)
{                                                                                                     {
    if (getcwd(cwd, MAX_PATH_LEN) == NULL) {                                                              if (getcwd(cwd, MAX_PATH_LEN) == NULL) {
        strcpy__(cwd, "");                                                                                    strcpy__(cwd, "");
    }                                                                                                     }
    return cwd;                                                                                           return cwd;
}                                                                                                     }

// NOTE: "PWD" environment not automatically updated after changing current directory                 // NOTE: "PWD" environment not automatically updated after changing current directory
//       so you can use this only for getting application startup directory                           //       so you can use this only for getting application startup directory
char *getenv_pwd(char *cwd)                                                                           char *getenv_pwd(char *cwd)
{                                                                                                     {
    strlcpy__(cwd, getenv__("PWD"), MAX_PATH_LEN);                                                        strlcpy__(cwd, getenv__("PWD"), MAX_PATH_LEN);
    return cwd;                                                                                           return cwd;
}                                                                                                     }

char *getenv__(char *env)                                                                             char *getenv__(char *env)
{                                                                                                     {
    char *ptr;                                                                                            char *ptr;

    if ((ptr = getenv(env)) == NULL) {                                                                    if ((ptr = getenv(env)) == NULL) {
        ptr = "";                                                                                             ptr = "";
    }                                                                                                     }
    return ptr;                                                                                           return ptr;
}                                                                                                     }

// Concatenate path and file                                                                          // Concatenate path and file
// "/dir1/dir2"   "file"       ==> "/dir1/dir2/file"                                                  // "/dir1/dir2"   "file"       ==> "/dir1/dir2/file"
// "/dir1/dir2/"  "file"       ==> "/dir1/dir2/file"                                                  // "/dir1/dir2/"  "file"       ==> "/dir1/dir2/file"
// "/dir1/dir2/"  "./dir/file" ==> "/dir1/dir2/./dir/file"                                            // "/dir1/dir2/"  "./dir/file" ==> "/dir1/dir2/./dir/file"
// "dir1/dir2"    "file"       ==> "dir1/dir2/file"                                                   // "dir1/dir2"    "file"       ==> "dir1/dir2/file"
// "/"            "file"       ==> "/file"                                                            // "/"            "file"       ==> "/file"
// ""             "file"       ==> "file"                                                             // ""             "file"       ==> "file"
// buf and dir can be the same address                                                                // buf and dir can be the same address
char *cat_dir_and_file(char *buf, const char *dir, const char *file)                                  char *cat_dir_and_file(char *buf, const char *dir, const char *file)
{                                                                                                     {
    char tmp_buf[MAX_PATH_LEN+1];                                                                         char tmp_buf[MAX_PATH_LEN+1];
    if (file[0] == '/') {                                                                                 if (file[0] == '/') {
        // "/file" ==> "file"                                                                                 // "/file" ==> "file"
        file++;                                                                                               file++;
    }                                                                                                     }
    int last = LIM_MIN(0, strlen_path(dir) - 1);                                                          int last = LIM_MIN(0, strlen_path(dir) - 1);
    if (is_strlen_0(dir) || dir[last] == '/') {                                                           if (is_strlen_0(dir) || dir[last] == '/') {
        // "/dir1/dir2/" + "file" ==> "/dir1/dir2/file"                                                       // "/dir1/dir2/" + "file" ==> "/dir1/dir2/file"
        snprintf(tmp_buf, MAX_PATH_LEN+1, "%s%s", dir, file);                                                 snprintf(tmp_buf, MAX_PATH_LEN+1, "%s%s", dir, file);
    } else {                                                                                              } else {
        // "/dir1/dir2" + "/" + "file" ==> "/dir1/dir2/file"                                                  // "/dir1/dir2" + "/" + "file" ==> "/dir1/dir2/file"
        snprintf(tmp_buf, MAX_PATH_LEN+1, "%s/%s", dir, file);                                                snprintf(tmp_buf, MAX_PATH_LEN+1, "%s/%s", dir, file);
    }                                                                                                     }
    strlcpy__(buf, tmp_buf, MAX_PATH_LEN);                                                                strlcpy__(buf, tmp_buf, MAX_PATH_LEN);
    return buf;                                                                                           return buf;
}                                                                                                     }

//-----------------------------------------------------------------------------------                 //-----------------------------------------------------------------------------------
// NOTE: Meaning of file_name, file_path, full_path, normalized_path and abs_path(real_path)          // NOTE: Meaning of file_name, file_path, full_path, normalized_path and abs_path(real_path)
//  file_name          : Ex. "filename.ext"                                                           //  file_name          : Ex. "filename.ext"
//                       not contain directory                                                        //                       not contain directory
//  file_path          : Ex. "../src/filename.ext"                                                    //  file_path          : Ex. "../src/filename.ext"
//                       may contain symlinks and ".."                                                //                       may contain symlinks and ".."
//  full_path          : Ex. "/home/user/symlink/../src/filename.ext"                                 //  full_path          : Ex. "/home/user/symlink/../src/filename.ext"
//                       start by '/' and may contain symlinks and ".."                               //                       start by '/' and may contain symlinks and ".."
//  normalized_path    : Ex. "/home/user/symlink/src/filename.ext"                                    //  normalized_path    : Ex. "/home/user/symlink/src/filename.ext"
//                       start by '/' and not contain ".." and may contain symlinks                   //                       start by '/' and not contain ".." and may contain symlinks
//  abs_path(real_path): Ex. "/home/user/tools/src/filename.ext"                                      //  abs_path(real_path): Ex. "/home/user/tools/src/filename.ext"
//                       start by '/' and not contain symlinks and ".."                               //                       start by '/' and not contain symlinks and ".."

// TODO: FULL_PATH can be converted to ABS_PATH                                                       // TODO: FULL_PATH can be converted to ABS_PATH
//       but ABS_PATH can not be converted to FULL_PATH                                               //       but ABS_PATH can not be converted to FULL_PATH
//       so you may keep FULL_PATH as long as possible, not replacing with ABS_PATH                   //       so you may keep FULL_PATH as long as possible, not replacing with ABS_PATH
// TODO: switch_epc_buf...() shall compare file path in FULL_PATH first and then comare in ABS_PAT    // TODO: switch_epc_buf...() shall compare file path in FULL_PATH first and then comare in ABS_PAT
// TODO: memorize_file_pos() shall memorize file path as it is in FULL_PATH not in ABS_PATH           // TODO: memorize_file_pos() shall memorize file path as it is in FULL_PATH not in ABS_PATH
//       recall_file_pos() shall open file path as it is                                              //       recall_file_pos() shall open file path as it is
//       goto_file_pos() shall open file path as it is                                                //       goto_file_pos() shall open file path as it is

//-----------------------------------------------------------------------------------                 //-----------------------------------------------------------------------------------

// /dir1/.  ==> /dir1/                                                                                // /dir1/.  ==> /dir1/
// /dir1/.. ==> /                                                                                     // /dir1/.. ==> /
// /..      ==> /                                                                                     // /..      ==> /
// /dir1/./dir2  ==> /dir1/dir2                                                                       // /dir1/./dir2  ==> /dir1/dir2
// /dir1/../dir2 ==> /dir2                                                                            // /dir1/../dir2 ==> /dir2
// /dir1/dir2/.. ==> /dir1/                                                                           // /dir1/dir2/.. ==> /dir1/
// /dir1/dir2/dir3/../../.. ==> /                                                                     // /dir1/dir2/dir3/../../.. ==> /
PRIVATE char *normalize_full_path__(char *full_path, char *parent, char *child);                      PRIVATE char *normalize_full_path__(char *full_path, char *parent, char *child);

char *normalize_full_path(char *full_path)                                                            char *normalize_full_path(char *full_path)
{                                                                                                     {
    // "/dir1/../????"                                                                                    // "/dir1/../????"
    //  ^                                                                                                 //  ^
    normalize_full_path__(full_path, full_path, full_path);                                               normalize_full_path__(full_path, full_path, full_path);
    remove_redundant_slash(full_path);                                                                    remove_redundant_slash(full_path);
    remove_last_slash(full_path);                                                                         remove_last_slash(full_path);
    return full_path;                                                                                     return full_path;
}                                                                                                     }
// "/dir1/../????"                                                                                    // "/dir1/../????"
//   ^   ^                                                                                            //   ^   ^
PRIVATE char *normalize_full_path__(char *full_path, char *parent, char *child)                       PRIVATE char *normalize_full_path__(char *full_path, char *parent, char *child)
{                                                                                                     {
    char *grandchild;                                                                                     char *grandchild;

    if (*parent == '/')                                                                                   if (*parent == '/')
        parent++;                                                                                             parent++;
    if (*child == '/')                                                                                    if (*child == '/')
        child++;                                                                                              child++;
    for ( ; is_file_path_char(child); ) {                                                                 for ( ; is_file_path_char(child); ) {
        if (strcmp(child, ".") == 0) {                                                                        if (strcmp(child, ".") == 0) {
            // "/dir1/." ==> "/dir1/"                                                                             // "/dir1/." ==> "/dir1/"
            // "/."      ==> "/"                                                                                  // "/."      ==> "/"
            strlcpy__(child, child+1, MAX_PATH_LEN);                                                              strlcpy__(child, child+1, MAX_PATH_LEN);
        } else                                                                                                } else
        if (strlcmp__(child, "./") == 0) {                                                                    if (strlcmp__(child, "./") == 0) {
            // "/dir1/./????" ==> "/dir1/????"                                                                    // "/dir1/./????" ==> "/dir1/????"
            // "/./????"      ==> "/????"                                                                         // "/./????"      ==> "/????"
            strlcpy__(child, child+2, MAX_PATH_LEN);                                                              strlcpy__(child, child+2, MAX_PATH_LEN);
            child = parent;                                                                                       child = parent;
        } else                                                                                                } else
        if (strcmp(child, "..") == 0) {                                                                       if (strcmp(child, "..") == 0) {
            // "/dir1/.." ==> "/"                                                                                 // "/dir1/.." ==> "/"
            // "/.."      ==> "/"                                                                                 // "/.."      ==> "/"
            strlcpy__(parent, child+2, MAX_PATH_LEN);                                                             strlcpy__(parent, child+2, MAX_PATH_LEN);
            child = parent;                                                                                       child = parent;
        } else                                                                                                } else
        if (strlcmp__(child, "../") == 0) {                                                                   if (strlcmp__(child, "../") == 0) {
            // "/dir1/../????" ==> "/????"                                                                        // "/dir1/../????" ==> "/????"
            // "/../????"      ==> "/????"                                                                        // "/../????"      ==> "/????"
            strlcpy__(parent, child+3, MAX_PATH_LEN);                                                             strlcpy__(parent, child+3, MAX_PATH_LEN);
            child = parent;                                                                                       child = parent;
            if (full_path+1 < child) {                                                                            if (full_path+1 < child) {
                // not string top                                                                                     // not string top
                break;                                                                                                break;
            }                                                                                                     }
        } else {                                                                                              } else {
            grandchild = skip_file_name(child);                                                                   grandchild = skip_file_name(child);
            if (is_file_path_char(grandchild) == 0) {                                                             if (is_file_path_char(grandchild) == 0) {
                child = grandchild;                                                                                   child = grandchild;
                break;                                                                                                break;
            }                                                                                                     }
            if (*grandchild == '/') {                                                                             if (*grandchild == '/') {
                // "/dir1/../????"                                                                                    // "/dir1/../????"
                //   ^   ^                                                                                            //   ^   ^
                child = normalize_full_path__(full_path, child, grandchild);    // recursive call                     child = normalize_full_path__(full_path, child, grandchild);    // recursive call
            }                                                                                                     }
        }                                                                                                     }
    }                                                                                                     }
    return child;                                                                                         return child;
}                                                                                                     }

//-----------------------------------------------------------------------------------                 //-----------------------------------------------------------------------------------

// get absolute path (not include symlinks)                                                           // get absolute path (not include symlinks)
char *get_abs_path(const char *path, char *buf)                                                       char *get_abs_path(const char *path, char *buf)
{                                                                                                     {
    char full_path[MAX_PATH_LEN+1];                                                                       char full_path[MAX_PATH_LEN+1];

    get_full_path(path, full_path);                 // --> full_path                                      get_full_path(path, full_path);                 // --> full_path
    get_real_path(full_path, buf, MAX_PATH_LEN);    // --> abs path (real path)                           get_real_path(full_path, buf, MAX_PATH_LEN);    // --> abs path (real path)
///flf_d_printf("\n[%s]\n ==> [%s]\n", full_path, buf);                                               ///flf_d_printf("\n[%s]\n ==> [%s]\n", full_path, buf);
    return buf;                                                                                           return buf;
}                                                                                                     }

// get full path (path begins from "/") but do not resolve symlink                                    // get full path (path begins from "/") but do not resolve symlink
//                                            (may contain symlink)                                   //                                            (may contain symlink)
// ~     ==> /home/user                                                                               // ~     ==> /home/user
// ~user ==> /home/user                                                                               // ~user ==> /home/user
// ~/tools/src/filename.ext     ==> /home/user/tools/src/filename.ext                                 // ~/tools/src/filename.ext     ==> /home/user/tools/src/filename.ext
// ~user/tools/src/filename.ext ==> /home/user/tools/src/filename.ext                                 // ~user/tools/src/filename.ext ==> /home/user/tools/src/filename.ext
// ./filename.ext               ==> /home/user/tools/src/filename.ext                                 // ./filename.ext               ==> /home/user/tools/src/filename.ext
char *get_full_path(const char *path, char *buf)                                                      char *get_full_path(const char *path, char *buf)
{                                                                                                     {
    char user_name[MAX_PATH_LEN+1];                                                                       char user_name[MAX_PATH_LEN+1];
    const char *user_dir;                                                                                 const char *user_dir;
    char cur_dir[MAX_PATH_LEN+1];                                                                         char cur_dir[MAX_PATH_LEN+1];
    size_t len;                                                                                           size_t len;
    const struct passwd *user_data = 0;                                                                   const struct passwd *user_data = 0;

    strlcpy__(buf, path, MAX_PATH_LEN);                                                                   strlcpy__(buf, path, MAX_PATH_LEN);
    if (path[0] == '/') {                                                                                 if (path[0] == '/') {
        // "/..." already full path                                                                           // "/..." already full path
    } else if (path[0] == '~') {                                                                          } else if (path[0] == '~') {
        // "~", "~user", "~/..." or "~user/..."                                                               // "~", "~user", "~/..." or "~user/..."
        for (len = 0; path[len]; len++) {                                                                     for (len = 0; path[len]; len++) {
            if (path[len] == '/') {                                                                               if (path[len] == '/') {
                break;                                                                                                break;
            }                                                                                                     }
        }                                                                                                     }
        // Determine home directory using getpwuid() or getpwent(), don't rely on $HOME                       // Determine home directory using getpwuid() or getpwent(), don't rely on $HOME
        if (len == 1) {     // "~"                                                                            if (len == 1) {     // "~"
            user_data = getpwuid(geteuid());                                                                      user_data = getpwuid(geteuid());
            user_dir = user_data->pw_dir;                                                                         user_dir = user_data->pw_dir;
        } else {            // "~user"                                                                        } else {            // "~user"
            strlcpy__(user_name, &path[1], len);                                                                  strlcpy__(user_name, &path[1], len);
            user_dir = get_user_home_dir(user_name);                                                              user_dir = get_user_home_dir(user_name);
///flf_d_printf("[%s] ==> [%s]\n", user_name, user_dir);                                              ///flf_d_printf("[%s] ==> [%s]\n", user_name, user_dir);
        }                                                                                                     }
        if (path[len] == '/') {                                                                               if (path[len] == '/') {
            // "~/..."   "~/..."                                                                                  // "~/..."   "~/..."
            //   ^    ==>   ^                                                                                     //   ^    ==>   ^
            len++;                                                                                                len++;
        }                                                                                                     }
        cat_dir_and_file(buf, user_dir, &path[len]);                                                          cat_dir_and_file(buf, user_dir, &path[len]);
    } else {                                                                                              } else {
        // "./..." ==> "/home/user/tools/..."                                                                 // "./..." ==> "/home/user/tools/..."
        get_full_path_of_cur_dir(cur_dir);                                                                    get_full_path_of_cur_dir(cur_dir);
        cat_dir_and_file(buf, cur_dir, path);                                                                 cat_dir_and_file(buf, cur_dir, path);
    }                                                                                                     }
///flf_d_printf("[%s] ==> [%s]\n", path, buf);                                                        ///flf_d_printf("[%s] ==> [%s]\n", path, buf);
    normalize_full_path(buf);                                                                             normalize_full_path(buf);
///flf_d_printf("[%s] ==> [%s]\n", path, buf);                                                        ///flf_d_printf("[%s] ==> [%s]\n", path, buf);
    return buf;                                                                                           return buf;
}                                                                                                     }

char *get_real_path(const char *path, char *buf, int buf_len)                                         char *get_real_path(const char *path, char *buf, int buf_len)
{                                                                                                     {
#if defined(HAVE_REALPATH)                                                                            #if defined(HAVE_REALPATH)
    return realpath__(path, buf, buf_len);                                                                return realpath__(path, buf, buf_len);
#else // HAVE_REALPATH                                                                                #else // HAVE_REALPATH
#error "HAVE_REALPATH not defined"                                                                    #error "HAVE_REALPATH not defined"
#endif // HAVE_REALPATH                                                                               #endif // HAVE_REALPATH
}                                                                                                     }

#if defined(HAVE_REALPATH)                                                                            #if defined(HAVE_REALPATH)
// return normalized(canonicalized) absolute file path                                                // return normalized(canonicalized) absolute file path
char *realpath__(const char *path, char *buf, int buf_len)                                            char *realpath__(const char *path, char *buf, int buf_len)
{                                                                                                     {
    char buffer[MAX_PATH_LEN+1];                                                                          char buffer[MAX_PATH_LEN+1];

    if (realpath(path, buffer) == NULL) {                                                                 if (realpath(path, buffer) == NULL) {
        strlcpy__(buffer, path, MAX_PATH_LEN);  // error, return original path                                strlcpy__(buffer, path, MAX_PATH_LEN);  // error, return original path
    }                                                                                                     }
    strlcpy__(buf, buffer, buf_len);                                                                      strlcpy__(buf, buffer, buf_len);
    return buf;                                                                                           return buf;
}                                                                                                     }
#endif // HAVE_REALPATH                                                                               #endif // HAVE_REALPATH

// read link and null terminate string                                                                // read link and null terminate string
int readlink__(const char *path, char *buffer, int len)                                               int readlink__(const char *path, char *buffer, int len)
{                                                                                                     {
    int ret;                                                                                              int ret;

    if ((ret = readlink(path, buffer, len)) > 0)                                                          if ((ret = readlink(path, buffer, len)) > 0)
        buffer[ret] = '\0';                                                                                   buffer[ret] = '\0';
    return ret;                                                                                           return ret;
}                                                                                                     }

// tests ==============================                                                               // tests ==============================

#ifdef START_UP_TEST                                                                                  #ifdef START_UP_TEST

void test_cwd_PWD()                                                                                   void test_cwd_PWD()
{                                                                                                     {
    char buf[MAX_PATH_LEN+1];                                                                             char buf[MAX_PATH_LEN+1];

    flf_d_printf("getcwd: [%s]\n", getcwd__(buf));                                                        flf_d_printf("getcwd: [%s]\n", getcwd__(buf));
    flf_d_printf("getenv(PWD): [%s]\n", getenv_pwd(buf));                                                 flf_d_printf("getenv(PWD): [%s]\n", getenv_pwd(buf));

    change_cur_dir("..");                                                                                 change_cur_dir("..");
    flf_d_printf("getcwd: [%s]\n", getcwd__(buf));                                                        flf_d_printf("getcwd: [%s]\n", getcwd__(buf));
    flf_d_printf("getenv(PWD): [%s]\n", getenv_pwd(buf));                                                 flf_d_printf("getenv(PWD): [%s]\n", getenv_pwd(buf));

    change_cur_dir("/home/user/tools/be/be/testfiles/symlinkd");                                          change_cur_dir("/home/user/tools/be/be/testfiles/symlinkd");
    flf_d_printf("getcwd: [%s]\n", getcwd__(buf));                                                        flf_d_printf("getcwd: [%s]\n", getcwd__(buf));
    flf_d_printf("getenv(PWD): [%s]\n", getenv_pwd(buf));                                                 flf_d_printf("getenv(PWD): [%s]\n", getenv_pwd(buf));

    change_cur_dir(get_starting_dir());                                                                   change_cur_dir(get_starting_dir());
    flf_d_printf("getcwd: [%s]\n", getcwd__(buf));                                                        flf_d_printf("getcwd: [%s]\n", getcwd__(buf));
                                                                                                   >      flf_d_printf("getenv(PWD): [%s]\n", getenv_pwd(buf));
}                                                                                                     }

PRIVATE void test_cat_dir_and_file_(char *buf, const char *dir, const char *file,                     PRIVATE void test_cat_dir_and_file_(char *buf, const char *dir, const char *file,
 const char *expected);                                                                                const char *expected);
void test_cat_dir_and_file()                                                                          void test_cat_dir_and_file()
{                                                                                                     {
    flf_d_printf("-----------------------\n");                                                            flf_d_printf("-----------------------\n");
    char buf[MAX_PATH_LEN+1];                                                                             char buf[MAX_PATH_LEN+1];
    test_cat_dir_and_file_(buf, "/dir1/dir2", "/file", "/dir1/dir2/file");                                test_cat_dir_and_file_(buf, "/dir1/dir2", "/file", "/dir1/dir2/file");
    test_cat_dir_and_file_(buf, "/dir1/dir2/", "/file", "/dir1/dir2/file");                               test_cat_dir_and_file_(buf, "/dir1/dir2/", "/file", "/dir1/dir2/file");
    strcpy(buf, "/dir1/dir2");                                                                            strcpy(buf, "/dir1/dir2");
    test_cat_dir_and_file_(buf, buf, "/file", "/dir1/dir2/file");                                         test_cat_dir_and_file_(buf, buf, "/file", "/dir1/dir2/file");
    strcpy(buf, "/dir1/dir2/");                                                                           strcpy(buf, "/dir1/dir2/");
    test_cat_dir_and_file_(buf, buf, "/file", "/dir1/dir2/file");                                         test_cat_dir_and_file_(buf, buf, "/file", "/dir1/dir2/file");
}                                                                                                     }
PRIVATE void test_cat_dir_and_file_(char *buf, const char *dir, const char *file,                     PRIVATE void test_cat_dir_and_file_(char *buf, const char *dir, const char *file,
 const char *expected)                                                                                 const char *expected)
{                                                                                                     {
    cat_dir_and_file(buf, dir, file);                                                                     cat_dir_and_file(buf, dir, file);
    if (! IS_EQ_STR(buf, expected)) {                                                                     if (! IS_EQ_STR(buf, expected)) {
        flf_d_printf("dir: [%s], file: [%s]\n", dir, file);                                                   flf_d_printf("dir: [%s], file: [%s]\n", dir, file);
        flf_d_printf("  buf: [%s]%c[%s]\n", buf, EQU_STR(buf, expected), expected);                           flf_d_printf("  buf: [%s]%c[%s]\n", buf, EQU_STR(buf, expected), expected);
    }                                                                                                     }
}                                                                                                     }
// /aaa/bbb/.. ==> /aaa                                                                               // /aaa/bbb/.. ==> /aaa
// /aaa/bbb/../ccc ==> /aaa/ccc                                                                       // /aaa/bbb/../ccc ==> /aaa/ccc
// /aaa/bbb/../../ccc ==> /ccc                                                                        // /aaa/bbb/../../ccc ==> /ccc
// /../ccc ==> error                                                                                  // /../ccc ==> error
// /aaa/bbb/. ==> /aaa/bbb                                                                            // /aaa/bbb/. ==> /aaa/bbb
// /aaa/bbb/./ccc ==> /aaa/bbb/ccc                                                                    // /aaa/bbb/./ccc ==> /aaa/bbb/ccc
// /. ==> /                                                                                           // /. ==> /
PRIVATE const char *test_normalize_path_1(const char *path);                                          PRIVATE const char *test_normalize_path_1(const char *path);
PRIVATE const char *test_normalize_path_2(const char *path);                                          PRIVATE const char *test_normalize_path_2(const char *path);
PRIVATE const char *test_normalize_path_3(const char *path);                                          PRIVATE const char *test_normalize_path_3(const char *path);
PRIVATE const char *test_normalize_path_4(const char *path);                                          PRIVATE const char *test_normalize_path_4(const char *path);
PRIVATE const char *test_normalize_path__(const char *path);                                          PRIVATE const char *test_normalize_path__(const char *path);
int test_normalize_path(void)                                                                         int test_normalize_path(void)
{                                                                                                     {
    flf_d_printf("-----------------------\n");                                                            flf_d_printf("-----------------------\n");
    MY_UT_STR(test_normalize_path_1("///"), "/");                                                         MY_UT_STR(test_normalize_path_1("///"), "/");
    MY_UT_STR(test_normalize_path_2("///"), "/");                                                         MY_UT_STR(test_normalize_path_2("///"), "/");
    MY_UT_STR(test_normalize_path_3("///"), "/");                                                         MY_UT_STR(test_normalize_path_3("///"), "/");
    MY_UT_STR(test_normalize_path_4("///"), "/");                                                         MY_UT_STR(test_normalize_path_4("///"), "/");
    MY_UT_STR(test_normalize_path_1("///dir///file///"), "/dir/file");                                    MY_UT_STR(test_normalize_path_1("///dir///file///"), "/dir/file");
    MY_UT_STR(test_normalize_path_2("///dir///file///"), "/dir/file");                                    MY_UT_STR(test_normalize_path_2("///dir///file///"), "/dir/file");
    MY_UT_STR(test_normalize_path_3("///dir///file///"), "/dir/file");                                    MY_UT_STR(test_normalize_path_3("///dir///file///"), "/dir/file");
    MY_UT_STR(test_normalize_path_4("///dir///file///"), "/dir/file");                                    MY_UT_STR(test_normalize_path_4("///dir///file///"), "/dir/file");
    MY_UT_STR(test_normalize_path_1("."), "");                                                            MY_UT_STR(test_normalize_path_1("."), "");
    MY_UT_STR(test_normalize_path_2("."), "/");                                                           MY_UT_STR(test_normalize_path_2("."), "/");
    MY_UT_STR(test_normalize_path_3("."), "");                                                            MY_UT_STR(test_normalize_path_3("."), "");
    MY_UT_STR(test_normalize_path_4("."), "/");                                                           MY_UT_STR(test_normalize_path_4("."), "/");
    MY_UT_STR(test_normalize_path_1("././."), "");                                                        MY_UT_STR(test_normalize_path_1("././."), "");
    MY_UT_STR(test_normalize_path_2("././."), "/");                                                       MY_UT_STR(test_normalize_path_2("././."), "/");
    MY_UT_STR(test_normalize_path_3("././."), "");                                                        MY_UT_STR(test_normalize_path_3("././."), "");
    MY_UT_STR(test_normalize_path_4("././."), "/");                                                       MY_UT_STR(test_normalize_path_4("././."), "/");
    MY_UT_STR(test_normalize_path_1(".."), "");                                                           MY_UT_STR(test_normalize_path_1(".."), "");
    MY_UT_STR(test_normalize_path_2(".."), "/");                                                          MY_UT_STR(test_normalize_path_2(".."), "/");
    MY_UT_STR(test_normalize_path_3(".."), "");                                                           MY_UT_STR(test_normalize_path_3(".."), "");
    MY_UT_STR(test_normalize_path_4(".."), "/");                                                          MY_UT_STR(test_normalize_path_4(".."), "/");
    MY_UT_STR(test_normalize_path_1("../../.."), "");                                                     MY_UT_STR(test_normalize_path_1("../../.."), "");
    MY_UT_STR(test_normalize_path_2("../../.."), "/");                                                    MY_UT_STR(test_normalize_path_2("../../.."), "/");
    MY_UT_STR(test_normalize_path_3("../../.."), "");                                                     MY_UT_STR(test_normalize_path_3("../../.."), "");
    MY_UT_STR(test_normalize_path_4("../../.."), "/");                                                    MY_UT_STR(test_normalize_path_4("../../.."), "/");
    MY_UT_STR(test_normalize_path_1("aaa/bbb/.."), "aaa");                                                MY_UT_STR(test_normalize_path_1("aaa/bbb/.."), "aaa");
    MY_UT_STR(test_normalize_path_2("aaa/bbb/.."), "/aaa");                                               MY_UT_STR(test_normalize_path_2("aaa/bbb/.."), "/aaa");
    MY_UT_STR(test_normalize_path_3("aaa/bbb/.."), "aaa");                                                MY_UT_STR(test_normalize_path_3("aaa/bbb/.."), "aaa");
    MY_UT_STR(test_normalize_path_4("aaa/bbb/.."), "/aaa");                                               MY_UT_STR(test_normalize_path_4("aaa/bbb/.."), "/aaa");
    MY_UT_STR(test_normalize_path_1("aaa/bbb/../ccc"), "aaa/ccc");                                        MY_UT_STR(test_normalize_path_1("aaa/bbb/../ccc"), "aaa/ccc");
    MY_UT_STR(test_normalize_path_2("aaa/bbb/../ccc"), "/aaa/ccc");                                       MY_UT_STR(test_normalize_path_2("aaa/bbb/../ccc"), "/aaa/ccc");
    MY_UT_STR(test_normalize_path_3("aaa/bbb/../ccc"), "aaa/ccc");                                        MY_UT_STR(test_normalize_path_3("aaa/bbb/../ccc"), "aaa/ccc");
    MY_UT_STR(test_normalize_path_4("aaa/bbb/../ccc"), "/aaa/ccc");                                       MY_UT_STR(test_normalize_path_4("aaa/bbb/../ccc"), "/aaa/ccc");
    MY_UT_STR(test_normalize_path_1("aaa/bbb/../../ccc"), "ccc");                                         MY_UT_STR(test_normalize_path_1("aaa/bbb/../../ccc"), "ccc");
    MY_UT_STR(test_normalize_path_2("aaa/bbb/../../ccc"), "/ccc");                                        MY_UT_STR(test_normalize_path_2("aaa/bbb/../../ccc"), "/ccc");
    MY_UT_STR(test_normalize_path_3("aaa/bbb/../../ccc"), "ccc");                                         MY_UT_STR(test_normalize_path_3("aaa/bbb/../../ccc"), "ccc");
    MY_UT_STR(test_normalize_path_4("aaa/bbb/../../ccc"), "/ccc");                                        MY_UT_STR(test_normalize_path_4("aaa/bbb/../../ccc"), "/ccc");
    MY_UT_STR(test_normalize_path_1("aaa/bbb/ccc/../../ddd"), "aaa/ddd");                                 MY_UT_STR(test_normalize_path_1("aaa/bbb/ccc/../../ddd"), "aaa/ddd");
    MY_UT_STR(test_normalize_path_2("aaa/bbb/ccc/../../ddd"), "/aaa/ddd");                                MY_UT_STR(test_normalize_path_2("aaa/bbb/ccc/../../ddd"), "/aaa/ddd");
    MY_UT_STR(test_normalize_path_3("aaa/bbb/ccc/../../ddd"), "aaa/ddd");                                 MY_UT_STR(test_normalize_path_3("aaa/bbb/ccc/../../ddd"), "aaa/ddd");
    MY_UT_STR(test_normalize_path_4("aaa/bbb/ccc/../../ddd"), "/aaa/ddd");                                MY_UT_STR(test_normalize_path_4("aaa/bbb/ccc/../../ddd"), "/aaa/ddd");
    MY_UT_STR(test_normalize_path_1("aaa/bbb/ccc/../../../ddd"), "ddd");                                  MY_UT_STR(test_normalize_path_1("aaa/bbb/ccc/../../../ddd"), "ddd");
    MY_UT_STR(test_normalize_path_2("aaa/bbb/ccc/../../../ddd"), "/ddd");                                 MY_UT_STR(test_normalize_path_2("aaa/bbb/ccc/../../../ddd"), "/ddd");
    MY_UT_STR(test_normalize_path_3("aaa/bbb/ccc/../../../ddd"), "ddd");                                  MY_UT_STR(test_normalize_path_3("aaa/bbb/ccc/../../../ddd"), "ddd");
    MY_UT_STR(test_normalize_path_4("aaa/bbb/ccc/../../../ddd"), "/ddd");                                 MY_UT_STR(test_normalize_path_4("aaa/bbb/ccc/../../../ddd"), "/ddd");
    MY_UT_STR(test_normalize_path_1("../ccc"), "ccc");                                                    MY_UT_STR(test_normalize_path_1("../ccc"), "ccc");
    MY_UT_STR(test_normalize_path_2("../ccc"), "/ccc");                                                   MY_UT_STR(test_normalize_path_2("../ccc"), "/ccc");
    MY_UT_STR(test_normalize_path_3("../ccc"), "ccc");                                                    MY_UT_STR(test_normalize_path_3("../ccc"), "ccc");
    MY_UT_STR(test_normalize_path_4("../ccc"), "/ccc");                                                   MY_UT_STR(test_normalize_path_4("../ccc"), "/ccc");
    MY_UT_STR(test_normalize_path_1("../../../ccc"), "ccc");                                              MY_UT_STR(test_normalize_path_1("../../../ccc"), "ccc");
    MY_UT_STR(test_normalize_path_2("../../../ccc"), "/ccc");                                             MY_UT_STR(test_normalize_path_2("../../../ccc"), "/ccc");
    MY_UT_STR(test_normalize_path_3("../../../ccc"), "ccc");                                              MY_UT_STR(test_normalize_path_3("../../../ccc"), "ccc");
    MY_UT_STR(test_normalize_path_4("../../../ccc"), "/ccc");                                             MY_UT_STR(test_normalize_path_4("../../../ccc"), "/ccc");
    MY_UT_STR(test_normalize_path_1("../aaa/bbb/.."), "aaa");                                             MY_UT_STR(test_normalize_path_1("../aaa/bbb/.."), "aaa");
    MY_UT_STR(test_normalize_path_2("../aaa/bbb/.."), "/aaa");                                            MY_UT_STR(test_normalize_path_2("../aaa/bbb/.."), "/aaa");
    MY_UT_STR(test_normalize_path_3("../aaa/bbb/.."), "aaa");                                             MY_UT_STR(test_normalize_path_3("../aaa/bbb/.."), "aaa");
    MY_UT_STR(test_normalize_path_4("../aaa/bbb/.."), "/aaa");                                            MY_UT_STR(test_normalize_path_4("../aaa/bbb/.."), "/aaa");
    MY_UT_STR(test_normalize_path_1("aaa/bbb/."), "aaa/bbb");                                             MY_UT_STR(test_normalize_path_1("aaa/bbb/."), "aaa/bbb");
    MY_UT_STR(test_normalize_path_2("aaa/bbb/."), "/aaa/bbb");                                            MY_UT_STR(test_normalize_path_2("aaa/bbb/."), "/aaa/bbb");
    MY_UT_STR(test_normalize_path_3("aaa/bbb/."), "aaa/bbb");                                             MY_UT_STR(test_normalize_path_3("aaa/bbb/."), "aaa/bbb");
    MY_UT_STR(test_normalize_path_4("aaa/bbb/."), "/aaa/bbb");                                            MY_UT_STR(test_normalize_path_4("aaa/bbb/."), "/aaa/bbb");
    MY_UT_STR(test_normalize_path_1("aaa/bbb/./ccc"), "aaa/bbb/ccc");                                     MY_UT_STR(test_normalize_path_1("aaa/bbb/./ccc"), "aaa/bbb/ccc");
    MY_UT_STR(test_normalize_path_2("aaa/bbb/./ccc"), "/aaa/bbb/ccc");                                    MY_UT_STR(test_normalize_path_2("aaa/bbb/./ccc"), "/aaa/bbb/ccc");
    MY_UT_STR(test_normalize_path_3("aaa/bbb/./ccc"), "aaa/bbb/ccc");                                     MY_UT_STR(test_normalize_path_3("aaa/bbb/./ccc"), "aaa/bbb/ccc");
    MY_UT_STR(test_normalize_path_4("aaa/bbb/./ccc"), "/aaa/bbb/ccc");                                    MY_UT_STR(test_normalize_path_4("aaa/bbb/./ccc"), "/aaa/bbb/ccc");
    MY_UT_STR(test_normalize_path_1("."), "");                                                            MY_UT_STR(test_normalize_path_1("."), "");
    MY_UT_STR(test_normalize_path_2("."), "/");                                                           MY_UT_STR(test_normalize_path_2("."), "/");
    MY_UT_STR(test_normalize_path_3("."), "");                                                            MY_UT_STR(test_normalize_path_3("."), "");
    MY_UT_STR(test_normalize_path_4("."), "/");                                                           MY_UT_STR(test_normalize_path_4("."), "/");
    MY_UT_STR(test_normalize_path_1("./aaa/bbb/."), "aaa/bbb");                                           MY_UT_STR(test_normalize_path_1("./aaa/bbb/."), "aaa/bbb");
    MY_UT_STR(test_normalize_path_2("./aaa/bbb/."), "/aaa/bbb");                                          MY_UT_STR(test_normalize_path_2("./aaa/bbb/."), "/aaa/bbb");
    MY_UT_STR(test_normalize_path_3("./aaa/bbb/."), "aaa/bbb");                                           MY_UT_STR(test_normalize_path_3("./aaa/bbb/."), "aaa/bbb");
    MY_UT_STR(test_normalize_path_4("./aaa/bbb/."), "/aaa/bbb");                                          MY_UT_STR(test_normalize_path_4("./aaa/bbb/."), "/aaa/bbb");
    return 0;                                                                                             return 0;
}                                                                                                     }
PRIVATE const char *test_normalize_path_1(const char *path)                                           PRIVATE const char *test_normalize_path_1(const char *path)
{                                                                                                     {
    char buffer[MAX_PATH_LEN+1];                                                                          char buffer[MAX_PATH_LEN+1];
    snprintf(buffer, MAX_PATH_LEN, "%s", path);                                                           snprintf(buffer, MAX_PATH_LEN, "%s", path);
    return test_normalize_path__(buffer);                                                                 return test_normalize_path__(buffer);
}                                                                                                     }
PRIVATE const char *test_normalize_path_2(const char *path)                                           PRIVATE const char *test_normalize_path_2(const char *path)
{                                                                                                     {
    char buffer[MAX_PATH_LEN+1];                                                                          char buffer[MAX_PATH_LEN+1];
    snprintf(buffer, MAX_PATH_LEN, "/%s", path);                                                          snprintf(buffer, MAX_PATH_LEN, "/%s", path);
    return test_normalize_path__(buffer);                                                                 return test_normalize_path__(buffer);
}                                                                                                     }
PRIVATE const char *test_normalize_path_3(const char *path)                                           PRIVATE const char *test_normalize_path_3(const char *path)
{                                                                                                     {
    char buffer[MAX_PATH_LEN+1];                                                                          char buffer[MAX_PATH_LEN+1];
    snprintf(buffer, MAX_PATH_LEN, "%s/", path);                                                          snprintf(buffer, MAX_PATH_LEN, "%s/", path);
    return test_normalize_path__(buffer);                                                                 return test_normalize_path__(buffer);
}                                                                                                     }
PRIVATE const char *test_normalize_path_4(const char *path)                                           PRIVATE const char *test_normalize_path_4(const char *path)
{                                                                                                     {
    char buffer[MAX_PATH_LEN+1];                                                                          char buffer[MAX_PATH_LEN+1];
    snprintf(buffer, MAX_PATH_LEN, "/%s/", path);                                                         snprintf(buffer, MAX_PATH_LEN, "/%s/", path);
    return test_normalize_path__(buffer);                                                                 return test_normalize_path__(buffer);
}                                                                                                     }
PRIVATE const char *test_normalize_path__(const char *path)                                           PRIVATE const char *test_normalize_path__(const char *path)
{                                                                                                     {
    static char buffer[MAX_PATH_LEN+1];                                                                   static char buffer[MAX_PATH_LEN+1];
    strlcpy__(buffer, path, MAX_PATH_LEN);                                                                strlcpy__(buffer, path, MAX_PATH_LEN);
    normalize_full_path(buffer);                                                                          normalize_full_path(buffer);
    ////flf_d_printf("[%s] ==> [%s]\n", path, buffer);                                                    ////flf_d_printf("[%s] ==> [%s]\n", path, buffer);
    return buffer;                                                                                        return buffer;
}                                                                                                     }

PRIVATE void test_get_full_path_(const char *path);                                                   PRIVATE void test_get_full_path_(const char *path);
void test_get_full_path(void)                                                                         void test_get_full_path(void)
{                                                                                                     {
    flf_d_printf("-----------------------\n");                                                            flf_d_printf("-----------------------\n");
    test_get_full_path_("~");                                                                             test_get_full_path_("~");
    test_get_full_path_("~user");                                                                         test_get_full_path_("~user");
    test_get_full_path_("~root");                                                                         test_get_full_path_("~root");
    test_get_full_path_("~hoge");                                                                         test_get_full_path_("~hoge");
    test_get_full_path_("~hoge/abc");                                                                     test_get_full_path_("~hoge/abc");

    test_get_full_path_("~/abc");                                                                         test_get_full_path_("~/abc");
    test_get_full_path_("~user/abc");                                                                     test_get_full_path_("~user/abc");
    test_get_full_path_("~root/abc");                                                                     test_get_full_path_("~root/abc");

    test_get_full_path_("abc");                                                                           test_get_full_path_("abc");
    test_get_full_path_("./abc");                                                                         test_get_full_path_("./abc");
    test_get_full_path_("../abc");                                                                        test_get_full_path_("../abc");

    test_get_full_path_("aaa/./bbb");                                                                     test_get_full_path_("aaa/./bbb");
    test_get_full_path_("./aaa/./bbb");                                                                   test_get_full_path_("./aaa/./bbb");
    test_get_full_path_("../aaa/./bbb");                                                                  test_get_full_path_("../aaa/./bbb");

    test_get_full_path_("aaa/../bbb");                                                                    test_get_full_path_("aaa/../bbb");
    test_get_full_path_("./aaa/../bbb");                                                                  test_get_full_path_("./aaa/../bbb");
    test_get_full_path_("../aaa/../bbb");                                                                 test_get_full_path_("../aaa/../bbb");

    test_get_full_path_(" abc ");   // filename includes space in head or tail                            test_get_full_path_(" abc ");   // filename includes space in head or tail
}                                                                                                     }
PRIVATE void test_get_full_path_(const char *path)                                                    PRIVATE void test_get_full_path_(const char *path)
{                                                                                                     {
    char full_path[MAX_PATH_LEN+1];                                                                       char full_path[MAX_PATH_LEN+1];

    get_full_path(path, full_path);                                                                       get_full_path(path, full_path);
    ///flf_d_printf("path:[%s] ==> full_path:[%s]\n", path, full_path);                                   ///flf_d_printf("path:[%s] ==> full_path:[%s]\n", path, full_path);
}                                                                                                     }

#if defined(HAVE_REALPATH)                                                                            #if defined(HAVE_REALPATH)
PRIVATE void test_realpath_(const char *path);                                                        PRIVATE void test_realpath_(const char *path);
void test_realpath(void)                                                                              void test_realpath(void)
{                                                                                                     {
    flf_d_printf("-----------------------\n");                                                            flf_d_printf("-----------------------\n");
    test_realpath_("~");                                                                                  test_realpath_("~");
    test_realpath_("~user");                                                                              test_realpath_("~user");
    test_realpath_("~root");                                                                              test_realpath_("~root");

    test_realpath_("/home/user/tools/be/be");                                                             test_realpath_("/home/user/tools/be/be");
    test_realpath_("/home/user/tools/./be/be");                                                           test_realpath_("/home/user/tools/./be/be");
    test_realpath_("/home/user/../user/tools/be/be");                                                     test_realpath_("/home/user/../user/tools/be/be");

    test_realpath_("/home/user/tools/be/be/testfiles/symlinkd");                                          test_realpath_("/home/user/tools/be/be/testfiles/symlinkd");
    test_realpath_("/home/user/tools/be/be/testfiles/symlinkf");                                          test_realpath_("/home/user/tools/be/be/testfiles/symlinkf");

    test_realpath_("/dev/stdin");                                                                         test_realpath_("/dev/stdin");
    test_realpath_("/dev/fd");                                                                            test_realpath_("/dev/fd");
}                                                                                                     }
PRIVATE void test_realpath_(const char *path)                                                         PRIVATE void test_realpath_(const char *path)
{                                                                                                     {
    char buf[MAX_PATH_LEN+1];                                                                             char buf[MAX_PATH_LEN+1];

    realpath__(path, buf, MAX_PATH_LEN);                                                                  realpath__(path, buf, MAX_PATH_LEN);
    ///flf_d_printf("path:[%s] ==> buf:[%s]\n", path, buf);                                               ///flf_d_printf("path:[%s] ==> buf:[%s]\n", path, buf);
}                                                                                                     }
#endif // HAVE_REALPATH                                                                               #endif // HAVE_REALPATH

PRIVATE const char *get_file_name_extension_(char *file_name);                                        PRIVATE const char *get_file_name_extension_(char *file_name);
void test_get_file_name_extension(void)                                                               void test_get_file_name_extension(void)
{                                                                                                     {
    flf_d_printf("-----------------------\n");                                                            flf_d_printf("-----------------------\n");
    MY_UT_STR(get_file_name_extension_("filename"), "");                                                  MY_UT_STR(get_file_name_extension_("filename"), "");
    MY_UT_STR(get_file_name_extension_(".filename"), "");                                                 MY_UT_STR(get_file_name_extension_(".filename"), "");
    MY_UT_STR(get_file_name_extension_("."), "");                                                         MY_UT_STR(get_file_name_extension_("."), "");
    MY_UT_STR(get_file_name_extension_("filename."), "");                                                 MY_UT_STR(get_file_name_extension_("filename."), "");
    MY_UT_STR(get_file_name_extension_("filename.ext"), "ext");                                           MY_UT_STR(get_file_name_extension_("filename.ext"), "ext");
    MY_UT_STR(get_file_name_extension_(".filename.ext"), "ext");                                          MY_UT_STR(get_file_name_extension_(".filename.ext"), "ext");
}                                                                                                     }
PRIVATE const char *get_file_name_extension_(char *file_name)                                         PRIVATE const char *get_file_name_extension_(char *file_name)
{                                                                                                     {
    ///flf_d_printf("[%s] ==> [%s]\n", file_name, get_file_name_extension(file_name));                    ///flf_d_printf("[%s] ==> [%s]\n", file_name, get_file_name_extension(file_name));
    return get_file_name_extension(file_name);                                                            return get_file_name_extension(file_name);
}                                                                                                     }

PRIVATE void test_separate_path_to_dir_and_file__(char *path, char *buf_dir, char *buf_file,          PRIVATE void test_separate_path_to_dir_and_file__(char *path, char *buf_dir, char *buf_file,
 const char *exp_dir, const char *exp_file);                                                           const char *exp_dir, const char *exp_file);
void test_separate_path_to_dir_and_file()                                                             void test_separate_path_to_dir_and_file()
{                                                                                                     {
    flf_d_printf("-----------------------\n");                                                            flf_d_printf("-----------------------\n");
    char buf_dir[MAX_PATH_LEN+1];                                                                         char buf_dir[MAX_PATH_LEN+1];
    char buf_file[MAX_PATH_LEN+1];                                                                        char buf_file[MAX_PATH_LEN+1];
    test_separate_path_to_dir_and_file__("/dir/to/file", buf_dir, buf_file,                               test_separate_path_to_dir_and_file__("/dir/to/file", buf_dir, buf_file,
     "/dir/to", "file");                                                                                   "/dir/to", "file");
    strcpy(buf_dir, "/dir/to/file");                                                                      strcpy(buf_dir, "/dir/to/file");
    test_separate_path_to_dir_and_file__(buf_dir, buf_dir, buf_file,                                      test_separate_path_to_dir_and_file__(buf_dir, buf_dir, buf_file,
     "/dir/to", "file");                                                                                   "/dir/to", "file");
    strcpy(buf_dir, "dir/to/file");                                                                       strcpy(buf_dir, "dir/to/file");
    test_separate_path_to_dir_and_file__(buf_dir, buf_dir, buf_file,                                      test_separate_path_to_dir_and_file__(buf_dir, buf_dir, buf_file,
     "dir/to", "file");                                                                                    "dir/to", "file");
    test_separate_path_to_dir_and_file__("", buf_dir, buf_file, ".", "");                                 test_separate_path_to_dir_and_file__("", buf_dir, buf_file, ".", "");
    test_separate_path_to_dir_and_file__(".", buf_dir, buf_file, ".", "");                                test_separate_path_to_dir_and_file__(".", buf_dir, buf_file, ".", "");
    test_separate_path_to_dir_and_file__("..", buf_dir, buf_file, "..", "");                              test_separate_path_to_dir_and_file__("..", buf_dir, buf_file, "..", "");
    test_separate_path_to_dir_and_file__("...", buf_dir, buf_file, ".", "...");                           test_separate_path_to_dir_and_file__("...", buf_dir, buf_file, ".", "...");
    test_separate_path_to_dir_and_file__("/", buf_dir, buf_file, "/", "");                                test_separate_path_to_dir_and_file__("/", buf_dir, buf_file, "/", "");
    test_separate_path_to_dir_and_file__("file", buf_dir, buf_file, ".", "file");                         test_separate_path_to_dir_and_file__("file", buf_dir, buf_file, ".", "file");
    test_separate_path_to_dir_and_file__("/file", buf_dir, buf_file, "/", "file");                        test_separate_path_to_dir_and_file__("/file", buf_dir, buf_file, "/", "file");
    test_separate_path_to_dir_and_file__("./file", buf_dir, buf_file, ".", "file");                       test_separate_path_to_dir_and_file__("./file", buf_dir, buf_file, ".", "file");
    test_separate_path_to_dir_and_file__("../file", buf_dir, buf_file, "..", "file");                     test_separate_path_to_dir_and_file__("../file", buf_dir, buf_file, "..", "file");
    test_separate_path_to_dir_and_file__(".../file", buf_dir, buf_file, "...", "file");                   test_separate_path_to_dir_and_file__(".../file", buf_dir, buf_file, "...", "file");
}                                                                                                     }
PRIVATE void test_separate_path_to_dir_and_file__(char *path, char *buf_dir, char *buf_file,          PRIVATE void test_separate_path_to_dir_and_file__(char *path, char *buf_dir, char *buf_file,
 const char *exp_dir, const char *exp_file)                                                            const char *exp_dir, const char *exp_file)
{                                                                                                     {
    separate_path_to_dir_and_file(path, buf_dir, buf_file);                                               separate_path_to_dir_and_file(path, buf_dir, buf_file);
    if ((! IS_EQ_STR(buf_dir, exp_dir)) || (! IS_EQ_STR(buf_file, exp_file))) {                           if ((! IS_EQ_STR(buf_dir, exp_dir)) || (! IS_EQ_STR(buf_file, exp_file))) {
        flf_d_printf("path[%s]\n", path);                                                                     flf_d_printf("path[%s]\n", path);
        flf_d_printf("  dir[%s]%c[%s], file[%s]%c[%s]\n",                                                     flf_d_printf("  dir[%s]%c[%s], file[%s]%c[%s]\n",
         buf_dir, EQU_STR(buf_dir, exp_dir), exp_dir,                                                          buf_dir, EQU_STR(buf_dir, exp_dir), exp_dir,
         buf_file, EQU_STR(buf_file, exp_file), exp_file);                                                     buf_file, EQU_STR(buf_file, exp_file), exp_file);
    }                                                                                                     }
}                                                                                                     }

#endif // START_UP_TEST                                                                               #endif // START_UP_TEST

// End of utilpath.c                                                                                  // End of utilpath.c
kdiff3 ../old/be/utils.c utils.c #========================
/**************************************************************************                           /**************************************************************************
 *   utils.c                                                              *                            *   utils.c                                                              *
 *                                                                        *                            *                                                                        *
 *   Copyright (C) 1999-2003 Chris Allegretta                             *                            *   Copyright (C) 1999-2003 Chris Allegretta                             *
 *                                                                        *                            *                                                                        *
 *   This program is free software; you can redistribute it and/or modify *                            *   This program is free software; you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published by *                            *   it under the terms of the GNU General Public License as published by *
 *   the Free Software Foundation; either version 2, or (at your option)  *                            *   the Free Software Foundation; either version 2, or (at your option)  *
 *   any later version.                                                   *                            *   any later version.                                                   *
 *                                                                        *                            *                                                                        *
 *   This program is distributed in the hope that it will be useful,      *                            *   This program is distributed in the hope that it will be useful,      *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *                            *   but WITHOUT ANY WARRANTY; without even the implied warranty of       *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *                            *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 *   GNU General Public License for more details.                         *                            *   GNU General Public License for more details.                         *
 *                                                                        *                            *                                                                        *
 *   You should have received a copy of the GNU General Public License    *                            *   You should have received a copy of the GNU General Public License    *
 *   along with this program; if not, write to the Free Software          *                            *   along with this program; if not, write to the Free Software          *
 *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *                            *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.            *
 *                                                                        *                            *                                                                        *
 **************************************************************************/                           **************************************************************************/

#include "utilincs.h"                                                                                 #include "utilincs.h"

PRIVATE void (*die_on_callback)(const char *msg) = NULL;                                              PRIVATE void (*die_on_callback)(const char *msg) = NULL;
void set_die_on_callback(void (*die_on_cb)(const char *msg))                                          void set_die_on_callback(void (*die_on_cb)(const char *msg))
{                                                                                                     {
    die_on_callback = die_on_cb;                                                                          die_on_callback = die_on_cb;
}                                                                                                     }
void die_on(const char *msg)                                                                          void die_on(const char *msg)
{                                                                                                     {
    if (die_on_callback) {                                                                                if (die_on_callback) {
        (*die_on_callback)(msg);                                                                              (*die_on_callback)(msg);
        // never returns                                                                                      // never returns
    }                                                                                                     }
    exit(255);                                                                                            exit(255);
}                                                                                                     }

// Copy one malloc()ed string to another pointer.                                                     // Copy one malloc()ed string to another pointer.
// Should be used as: dest = malloc_strcpy(string);                                                   // Should be used as: dest = malloc_strcpy(string);
char *malloc_strcpy(const char *string)                                                               char *malloc_strcpy(const char *string)
{                                                                                                     {
    char *buf;                                                                                            char *buf;

    buf = char_malloc(strlen(string) + 1);                                                                buf = char_malloc(strlen(string) + 1);
    strcpy__(buf, string);                                                                                strcpy__(buf, string);
    return buf;                                                                                           return buf;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
#ifdef MEMORY_LEAK_CHECKER                                                                            #ifdef MEMORY_LEAK_CHECKER

#define MAX_MALLOCS_TO_MONITOR  2000000 // 2,000,00                                                   #define MAX_MALLOCS_TO_MONITOR  2000000 // 2,000,00
static struct malloc_caller malloc_callers[MAX_MALLOCS_TO_MONITOR];                                   static struct malloc_caller malloc_callers[MAX_MALLOCS_TO_MONITOR];

static const char *caller_file_name = NULL; // "filename.c"                                           static const char *caller_file_name = NULL; // "filename.c"
static int caller_line_num = 0;             // line number                                            static int caller_line_num = 0;             // line number
void mlc_init()                                                                                       void mlc_init()
{                                                                                                     {
    for (int alloc_idx = 0; alloc_idx < MAX_MALLOCS_TO_MONITOR; alloc_idx++) {                            for (int alloc_idx = 0; alloc_idx < MAX_MALLOCS_TO_MONITOR; alloc_idx++) {
        mlc_clear_caller(&malloc_callers[alloc_idx]);                                                         mlc_clear_caller(&malloc_callers[alloc_idx]);
    }                                                                                                     }
    _mlc_set_caller                                                                                       _mlc_set_caller
}                                                                                                     }
void mlc_set_caller(const char *file_name, int line_num)                                              void mlc_set_caller(const char *file_name, int line_num)
{                                                                                                     {
    caller_file_name = file_name;                                                                         caller_file_name = file_name;
    caller_line_num = line_num;                                                                           caller_line_num = line_num;
}                                                                                                     }
struct malloc_caller* mlc_register_caller()                                                           struct malloc_caller* mlc_register_caller()
{                                                                                                     {
    for (int alloc_idx = 0; alloc_idx < MAX_MALLOCS_TO_MONITOR; alloc_idx++) {                            for (int alloc_idx = 0; alloc_idx < MAX_MALLOCS_TO_MONITOR; alloc_idx++) {
        if (malloc_callers[alloc_idx].file_name == NULL) {                                                    if (malloc_callers[alloc_idx].file_name == NULL) {
            mlc_update_caller(&(malloc_callers[alloc_idx]));                                                      mlc_update_caller(&(malloc_callers[alloc_idx]));
            return &(malloc_callers[alloc_idx]);                                                                  return &(malloc_callers[alloc_idx]);
        }                                                                                                     }
    }                                                                                                     }
    return NULL;                                                                                          return NULL;
}                                                                                                     }
void mlc_update_caller(struct malloc_caller* caller)                                                  void mlc_update_caller(struct malloc_caller* caller)
{                                                                                                     {
    caller->file_name = caller_file_name;                                                                 caller->file_name = caller_file_name;
    caller->line_num = caller_line_num;                                                                   caller->line_num = caller_line_num;
}                                                                                                     }

void mlc_clear_caller(struct malloc_caller* caller)                                                   void mlc_clear_caller(struct malloc_caller* caller)
{                                                                                                     {
    caller->file_name = NULL;                                                                             caller->file_name = NULL;
}                                                                                                     }

int mlc_check_leak()                                                                                  int mlc_check_leak()
{                                                                                                     {
    int count = 1;                                                                                        int count = 1;
    flf_d_printf("\n");                                                                                   flf_d_printf("\n");
    for (int alloc_idx = 0; alloc_idx < MAX_MALLOCS_TO_MONITOR; alloc_idx++) {                            for (int alloc_idx = 0; alloc_idx < MAX_MALLOCS_TO_MONITOR; alloc_idx++) {
        if (malloc_callers[alloc_idx].file_name) {                                                            if (malloc_callers[alloc_idx].file_name) {
            d_printf("%3d:%3d: file_name: [%s], line_num: %d\n", count, alloc_idx,                                d_printf("%3d:%3d: file_name: [%s], line_num: %d\n", count, alloc_idx,
             malloc_callers[alloc_idx].file_name,                                                                  malloc_callers[alloc_idx].file_name,
             malloc_callers[alloc_idx].line_num);                                                                  malloc_callers[alloc_idx].line_num);
            count++;                                                                                              count++;
        }                                                                                                     }
    }                                                                                                     }
}                                                                                                     }

// allocate additional memory for monitoring memory leaks                                             // allocate additional memory for monitoring memory leaks
//      struct malloc_header malloc_header; // additional memory                                      //      struct malloc_header malloc_header; // additional memory
//      void memory[size];                  // <== return this address to user                        //      void memory[size];                  // <== return this address to user
//                                                                                                    //
static int malloced_count = 0;                                                                        static int malloced_count = 0;
static int max_malloced_count = 0;                                                                    static int max_malloced_count = 0;
static size_t malloced_size = 0;                                                                      static size_t malloced_size = 0;
static size_t max_malloced_size = 0;                                                                  static size_t max_malloced_size = 0;
static int save_malloced_count = 0;                                                                   static int save_malloced_count = 0;
static size_t save_malloced_size = 0;                                                                 static size_t save_malloced_size = 0;

void mlc_check_count()                                                                                void mlc_check_count()
{                                                                                                     {
    flf_d_printf("max_count: %d, max_size: %d, count: %d, size: %d\n",                                    flf_d_printf("max_count: %d, max_size: %d, count: %d, size: %d\n",
     max_malloced_count, max_malloced_size, malloced_count, malloced_size);                                max_malloced_count, max_malloced_size, malloced_count, malloced_size);
}                                                                                                     }
void mlc_memorize_count()                                                                             void mlc_memorize_count()
{                                                                                                     {
    save_malloced_count = malloced_count;                                                                 save_malloced_count = malloced_count;
    save_malloced_size = malloced_size;                                                                   save_malloced_size = malloced_size;
    mlc_check_count();                                                                                    mlc_check_count();
}                                                                                                     }
void mlc_differenciate_count()                                                                        void mlc_differenciate_count()
{                                                                                                     {
    mlc_check_count();                                                                                    mlc_check_count();
    flf_d_printf("count: %d, size: %d\n",                                                                 flf_d_printf("count: %d, size: %d\n",
     malloced_count - save_malloced_count, malloced_size - save_malloced_size);                            malloced_count - save_malloced_count, malloced_size - save_malloced_size);
}                                                                                                     }
#endif // MEMORY_LEAK_CHECKER                                                                         #endif // MEMORY_LEAK_CHECKER

void *malloc__(size_t bytes)                                                                          void *malloc__(size_t bytes)
{                                                                                                     {
    void *ptr;                                                                                            void *ptr;

#ifdef MEMORY_LEAK_CHECKER                                                                            #ifdef MEMORY_LEAK_CHECKER
    bytes += sizeof(struct malloc_header);                                                                bytes += sizeof(struct malloc_header);
#endif // MEMORY_LEAK_CHECKER                                                                         #endif // MEMORY_LEAK_CHECKER
    ptr = malloc(bytes);                                                                                  ptr = malloc(bytes);
    if (ptr == NULL && bytes != 0) {                                                                      if (ptr == NULL && bytes != 0) {
        _FATALERR_                                                                                            _FATALERR_
        die_on(_("Out of memory!"));                                                                          die_on(_("Out of memory!"));
    }                                                                                                     }
#ifdef MEMORY_LEAK_CHECKER                                                                            #ifdef MEMORY_LEAK_CHECKER
    bytes -= sizeof(struct malloc_header);                                                                bytes -= sizeof(struct malloc_header);
    struct malloc_header* mptr = (struct malloc_header*)ptr;                                              struct malloc_header* mptr = (struct malloc_header*)ptr;
    mptr->size = bytes;                                                                                   mptr->size = bytes;
    mptr->caller = mlc_register_caller();                                                                 mptr->caller = mlc_register_caller();

    malloced_count++;                                                                                     malloced_count++;
    max_malloced_count = MAX_(max_malloced_count, malloced_count);                                        max_malloced_count = MAX_(max_malloced_count, malloced_count);
    malloced_size += bytes;                                                                               malloced_size += bytes;
    max_malloced_size = MAX_(max_malloced_size, malloced_size);                                           max_malloced_size = MAX_(max_malloced_size, malloced_size);

    ptr += sizeof(struct malloc_header);                                                                  ptr += sizeof(struct malloc_header);
#endif // MEMORY_LEAK_CHECKER                                                                         #endif // MEMORY_LEAK_CHECKER
    return ptr;                                                                                           return ptr;
}                                                                                                     }

void *remalloc__(void *ptr, size_t bytes)                                                             void *remalloc__(void *ptr, size_t bytes)
{                                                                                                     {
    if (ptr == NULL) {                                                                                    if (ptr == NULL) {
        return malloc__(bytes);                                                                               return malloc__(bytes);
    }                                                                                                     }
#ifdef MEMORY_LEAK_CHECKER                                                                            #ifdef MEMORY_LEAK_CHECKER
    ptr -= sizeof(struct malloc_header);                                                                  ptr -= sizeof(struct malloc_header);
    struct malloc_header* mptr = (struct malloc_header*)ptr;                                              struct malloc_header* mptr = (struct malloc_header*)ptr;
    struct malloc_caller* caller = mptr->caller;                                                          struct malloc_caller* caller = mptr->caller;
    malloced_size -= mptr->size;                                                                          malloced_size -= mptr->size;
    bytes += sizeof(struct malloc_header);                                                                bytes += sizeof(struct malloc_header);
#endif // MEMORY_LEAK_CHECKER                                                                         #endif // MEMORY_LEAK_CHECKER
    ptr = realloc(ptr, bytes);                                                                            ptr = realloc(ptr, bytes);
    if (ptr == NULL && bytes != 0) {                                                                      if (ptr == NULL && bytes != 0) {
        _FATALERR_                                                                                            _FATALERR_
        die_on(_("Out of memory!"));                                                                          die_on(_("Out of memory!"));
    }                                                                                                     }
#ifdef MEMORY_LEAK_CHECKER                                                                            #ifdef MEMORY_LEAK_CHECKER
    bytes -= sizeof(struct malloc_header);                                                                bytes -= sizeof(struct malloc_header);
    mptr = (struct malloc_header*)ptr;                                                                    mptr = (struct malloc_header*)ptr;
    mlc_update_caller(caller);                                                                            mlc_update_caller(caller);
    mptr->size = bytes;                                                                                   mptr->size = bytes;
    mptr->caller = caller;                                                                                mptr->caller = caller;
    malloced_size += bytes;                                                                               malloced_size += bytes;

    ptr += sizeof(struct malloc_header);                                                                  ptr += sizeof(struct malloc_header);
#endif // MEMORY_LEAK_CHECKER                                                                         #endif // MEMORY_LEAK_CHECKER
    return ptr;                                                                                           return ptr;
}                                                                                                     }

void free_ptr(void **ptr)                                                                             void free_ptr(void **ptr)
{                                                                                                     {
    free__(*ptr);                                                                                         free__(*ptr);
    *ptr = NULL;                                                                                          *ptr = NULL;
}                                                                                                     }

void free__(void *ptr)                                                                                void free__(void *ptr)
{                                                                                                     {
    if (ptr == NULL) {                                                                                    if (ptr == NULL) {
        _PROGERR_                                                                                             _PROGERR_
        return;                                                                                               return;
    }                                                                                                     }
#ifdef MEMORY_LEAK_CHECKER                                                                            #ifdef MEMORY_LEAK_CHECKER
    ptr -= sizeof(struct malloc_header);                                                                  ptr -= sizeof(struct malloc_header);
    struct malloc_header* mptr = (struct malloc_header*)ptr;                                              struct malloc_header* mptr = (struct malloc_header*)ptr;
    malloced_count--;                                                                                     malloced_count--;
    malloced_size -= mptr->size;                                                                          malloced_size -= mptr->size;
    mlc_clear_caller(mptr->caller);                                                                       mlc_clear_caller(mptr->caller);
#endif // MEMORY_LEAK_CHECKER                                                                         #endif // MEMORY_LEAK_CHECKER
    free(ptr);                                                                                            free(ptr);
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

// remalloc memory just enough for a string                                                           // remalloc memory just enough for a string
// NOTE: DONOT use for be_line_t::data                                                                // NOTE: DONOT use for be_line_t::data
void remalloc_and_null_terminate_string(char **ptr)                                                   void remalloc_and_null_terminate_string(char **ptr)
{                                                                                                     {
    remalloc_and_null_terminate_length(ptr, strlen(*ptr));                                                remalloc_and_null_terminate_length(ptr, strlen(*ptr));
}                                                                                                     }
// remalloc memory for the length of string                                                           // remalloc memory for the length of string
// NOTE: DONOT use for be_line_t::data                                                                // NOTE: DONOT use for be_line_t::data
void remalloc_and_null_terminate_length(char **ptr, size_t len)                                       void remalloc_and_null_terminate_length(char **ptr, size_t len)
{                                                                                                     {
    _mlc_set_caller                                                                                       _mlc_set_caller
    *ptr = char_remalloc(*ptr, len + 1);                                                                  *ptr = char_remalloc(*ptr, len + 1);
    (*ptr)[len] = '\0';                                                                                   (*ptr)[len] = '\0';
}                                                                                                     }

//=============================================================================                       //=============================================================================

#define POLYNOMIAL_CRC16CCITT   0x1021                                                                #define POLYNOMIAL_CRC16CCITT   0x1021
unsigned short crc16ccitt = 0xffff;                                                                   unsigned short crc16ccitt = 0xffff;

unsigned short clear_crc16ccitt(void)                                                                 unsigned short clear_crc16ccitt(void)
{                                                                                                     {
    crc16ccitt = 0xffff;                                                                                  crc16ccitt = 0xffff;
    return crc16ccitt;                                                                                    return crc16ccitt;
}                                                                                                     }

unsigned short calc_crc16ccitt(unsigned char byte)                                                    unsigned short calc_crc16ccitt(unsigned char byte)
{                                                                                                     {
    int cnt;                                                                                              int cnt;
    int do_xor;                                                                                           int do_xor;

    for (cnt = 0; cnt < 8; cnt++) {                                                                       for (cnt = 0; cnt < 8; cnt++) {
        if (crc16ccitt & 0x8000)                                                                              if (crc16ccitt & 0x8000)
            do_xor = 1;                                                                                           do_xor = 1;
        else                                                                                                  else
            do_xor = 0;                                                                                           do_xor = 0;
        crc16ccitt <<= 1;                                                                                     crc16ccitt <<= 1;
        if (byte & 0x80)                                                                                      if (byte & 0x80)
            crc16ccitt += 1;                                                                                      crc16ccitt += 1;
        if (do_xor)                                                                                           if (do_xor)
            crc16ccitt ^= POLYNOMIAL_CRC16CCITT;                                                                  crc16ccitt ^= POLYNOMIAL_CRC16CCITT;
        byte <<= 1;                                                                                           byte <<= 1;
    }                                                                                                     }
    return crc16ccitt;                                                                                    return crc16ccitt;
}                                                                                                     }
//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
// NOTE: to avoid snprintf trancation warning of C compiler, add 20 bytes                             // NOTE: to avoid snprintf trancation warning of C compiler, add 20 bytes
////#define YYYY_MM_DD_HHCMMCSS_LEN     (4+1+2+1+2+1+2+1+2+1+2 + 20)    // "2037/12/31 23:59:59"   <
#define YYYY_MM_DD_HHCMMCSS_LEN     (4+1+2+1+2+1+2+1+2+1+2) // "2037/12/31 23:59:59"                  #define YYYY_MM_DD_HHCMMCSS_LEN     (4+1+2+1+2+1+2+1+2+1+2) // "2037/12/31 23:59:59"
PRIVATE char *get_yyyysmmsdd_hhcmmcss(time_t abs_time, char *buf);                                    PRIVATE char *get_yyyysmmsdd_hhcmmcss(time_t abs_time, char *buf);

const char *cur_ctime_cdate(int time0_date1)                                                          const char *cur_ctime_cdate(int time0_date1)
{                                                                                                     {
    if (time0_date1 == 0) {                                                                               if (time0_date1 == 0) {
        return cur_ctime();                                                                                   return cur_ctime();
    } else {                                                                                              } else {
        return cur_cdate();                                                                                   return cur_cdate();
    }                                                                                                     }
}                                                                                                     }
const char *cur_ctime(void)                                                                           const char *cur_ctime(void)
{                                                                                                     {
    time_t cur_time;                                                                                      time_t cur_time;
#define HHCMMCSS_LEN        8   // "23:59:59"                                                         #define HHCMMCSS_LEN        8   // "23:59:59"
    static char buf_time[HHCMMCSS_LEN+1];                                                                 static char buf_time[HHCMMCSS_LEN+1];

    cur_time = time(NULL);                                                                                cur_time = time(NULL);
    strlcpy__(buf_time, &(ctime(&cur_time)[11]), HHCMMCSS_LEN);                                           strlcpy__(buf_time, &(ctime(&cur_time)[11]), HHCMMCSS_LEN);
    return buf_time;                                                                                      return buf_time;
}                                                                                                     }
const char *cur_cdate(void)                                                                           const char *cur_cdate(void)
{                                                                                                     {
    time_t cur_time;                                                                                      time_t cur_time;
#define YY_MM_DD_LEN        8   // "2037-12-31 23:59:59"                                              #define YY_MM_DD_LEN        8   // "2037-12-31 23:59:59"
    char buf_ymd_hms[YYYY_MM_DD_HHCMMCSS_LEN+1];                                                          char buf_ymd_hms[YYYY_MM_DD_HHCMMCSS_LEN+1];
    static char buf_date[YYYY_MM_DD_HHCMMCSS_LEN+1];                                                      static char buf_date[YYYY_MM_DD_HHCMMCSS_LEN+1];

    cur_time = time(NULL);                                                                                cur_time = time(NULL);
    get_yyyysmmsdd_hhcmmcss(cur_time, buf_ymd_hms);                                                       get_yyyysmmsdd_hhcmmcss(cur_time, buf_ymd_hms);
    strlcpy__(buf_date, &(buf_ymd_hms[2]), YY_MM_DD_LEN);                                                 strlcpy__(buf_date, &(buf_ymd_hms[2]), YY_MM_DD_LEN);
    return buf_date;                                                                                      return buf_date;
}                                                                                                     }
//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------
char *get_ssspuuuuuu(char *buf)                                                                       char *get_ssspuuuuuu(char *buf)
{                                                                                                     {
    long usec;                                                                                            long usec;

    usec = get_usec();                                                                                    usec = get_usec();
    snprintf_(buf, 10+1, "%03d.%06d",                                                                     snprintf_(buf, 10+1, "%03d.%06d",
     (int)(usec / 1000000), (int)(usec % 1000000));                                                        (int)(usec / 1000000), (int)(usec % 1000000));
    return buf;                                                                                           return buf;
}                                                                                                     }
char *get_sssssspmmm(char *buf)                                                                       char *get_sssssspmmm(char *buf)
{                                                                                                     {
    long msec;                                                                                            long msec;

    msec = get_msec();                                                                                    msec = get_msec();
    snprintf_(buf, 10+1, "%06d.%03d",                                                                     snprintf_(buf, 10+1, "%06d.%03d",
     (int)(msec / 1000), (int)(msec % 1000));                                                              (int)(msec / 1000), (int)(msec % 1000));
    return buf;                                                                                           return buf;
}                                                                                                     }
unsigned long get_msec(void)                                                                          unsigned long get_msec(void)
{                                                                                                     {
    struct timeval tv;                                                                                    struct timeval tv;
    struct timezone tz;                                                                                   struct timezone tz;

    gettimeofday(&tv, &tz);                                                                               gettimeofday(&tv, &tz);
    // 999999.999                                                                                         // 999999.999
    return (tv.tv_sec % 1000000) * 1000 + (tv.tv_usec / 1000) % 1000;                                     return (tv.tv_sec % 1000000) * 1000 + (tv.tv_usec / 1000) % 1000;
}                                                                                                     }
unsigned long get_usec(void)                                                                          unsigned long get_usec(void)
{                                                                                                     {
    struct timeval tv;                                                                                    struct timeval tv;
    struct timezone tz;                                                                                   struct timezone tz;

    gettimeofday(&tv, &tz);                                                                               gettimeofday(&tv, &tz);
    // 999.999999                                                                                         // 999.999999
    return (tv.tv_sec % 1000) * 1000000 + tv.tv_usec;                                                     return (tv.tv_sec % 1000) * 1000000 + tv.tv_usec;
}                                                                                                     }
const char *cur_hhcmmcss_mmm(void)                                                                    const char *cur_hhcmmcss_mmm(void)
{                                                                                                     {
#define HHCMMCSS_LEN        8   // "23:59:59"                                                         #define HHCMMCSS_LEN        8   // "23:59:59"
    struct timeval tv;                                                                                    struct timeval tv;
    struct timezone tz;                                                                                   struct timezone tz;
    time_t cur_time;                                                                                      time_t cur_time;
    char hhcmmcss[HHCMMCSS_LEN+1];                                                                        char hhcmmcss[HHCMMCSS_LEN+1];
#define HHCMMCSS_MMM_LEN        (8+1+3)                                                               #define HHCMMCSS_MMM_LEN        (8+1+3)
    static char buf_time[HHCMMCSS_MMM_LEN+1];                                                             static char buf_time[HHCMMCSS_MMM_LEN+1];

    gettimeofday(&tv, &tz);                                                                               gettimeofday(&tv, &tz);
    cur_time = tv.tv_sec;                                                                                 cur_time = tv.tv_sec;
    strlcpy__(hhcmmcss, &(ctime(&cur_time)[11]), HHCMMCSS_LEN);                                           strlcpy__(hhcmmcss, &(ctime(&cur_time)[11]), HHCMMCSS_LEN);
    snprintf_(buf_time, HHCMMCSS_MMM_LEN+1, "%s.%03d",                                                    snprintf_(buf_time, HHCMMCSS_MMM_LEN+1, "%s.%03d",
     hhcmmcss, (int)(tv.tv_usec / 1000 % 1000));                                                           hhcmmcss, (int)(tv.tv_usec / 1000 % 1000));
    return buf_time;                                                                                      return buf_time;
}                                                                                                     }
const char *cur_hhcmmcss_uuuuuu(void)                                                                 const char *cur_hhcmmcss_uuuuuu(void)
{                                                                                                     {
#define HHCMMCSS_LEN        8   // "23:59:59"                                                         #define HHCMMCSS_LEN        8   // "23:59:59"
    struct timeval tv;                                                                                    struct timeval tv;
    struct timezone tz;                                                                                   struct timezone tz;
    time_t cur_time;                                                                                      time_t cur_time;
    char hhcmmcss[HHCMMCSS_LEN+1];                                                                        char hhcmmcss[HHCMMCSS_LEN+1];
#define HHCMMCSS_UUUUUU_LEN     (8+1+6)                                                               #define HHCMMCSS_UUUUUU_LEN     (8+1+6)
    static char buf_time[HHCMMCSS_UUUUUU_LEN+1];                                                          static char buf_time[HHCMMCSS_UUUUUU_LEN+1];

    gettimeofday(&tv, &tz);                                                                               gettimeofday(&tv, &tz);
    cur_time = tv.tv_sec;                                                                                 cur_time = tv.tv_sec;
    strlcpy__(hhcmmcss, &(ctime(&cur_time)[11]), HHCMMCSS_LEN);                                           strlcpy__(hhcmmcss, &(ctime(&cur_time)[11]), HHCMMCSS_LEN);
    snprintf_(buf_time, HHCMMCSS_UUUUUU_LEN+1, "%s.%06d", hhcmmcss, (int)tv.tv_usec);                     snprintf_(buf_time, HHCMMCSS_UUUUUU_LEN+1, "%s.%06d", hhcmmcss, (int)tv.tv_usec);
    return buf_time;                                                                                      return buf_time;
}                                                                                                     }

PRIVATE char *get_yyyysmmsdd_hhcmmcss(time_t abs_time, char *buf)                                     PRIVATE char *get_yyyysmmsdd_hhcmmcss(time_t abs_time, char *buf)
{                                                                                                     {
    struct tm tm_;                                                                                        struct tm tm_;
    struct tm *tm;                                                                                        struct tm *tm;

    if (abs_time == 0) {                                                                                  if (abs_time == 0) {
//      strcpy(buf, "???\?/?\?/?? ??:??:??");                                                         //      strcpy(buf, "???\?/?\?/?? ??:??:??");
//      strcpy(buf, "0000/00/00 00:00:00");                                                           //      strcpy(buf, "0000/00/00 00:00:00");
        strcpy(buf, "----/--/-- --:--:--");                                                                   strcpy(buf, "----/--/-- --:--:--");
    } else {                                                                                              } else {
        tm = localtime_r(&abs_time, &tm_);      // THREAD_SAFE                                                tm = localtime_r(&abs_time, &tm_);      // THREAD_SAFE
        snprintf_(buf, YYYY_MM_DD_HHCMMCSS_LEN+1, "%04d/%02d/%02d %02d:%02d:%02d",                            snprintf_(buf, YYYY_MM_DD_HHCMMCSS_LEN+1, "%04d/%02d/%02d %02d:%02d:%02d",
         1900 + tm->tm_year, (char)(tm->tm_mon+1), (char)(tm->tm_mday),                                        1900 + tm->tm_year, (char)(tm->tm_mon+1), (char)(tm->tm_mday),
         (char)(tm->tm_hour), (char)(tm->tm_min), (char)(tm->tm_sec));                                         (char)(tm->tm_hour), (char)(tm->tm_min), (char)(tm->tm_sec));
    }                                                                                                     }
    return buf;                                                                                           return buf;
}                                                                                                     }

//-----------------------------------------------------------------------------------                 //-----------------------------------------------------------------------------------

int int_min(int aa, int bb)                                                                           int int_min(int aa, int bb)
{                                                                                                     {
    return aa <= bb ? aa : bb;                                                                            return aa <= bb ? aa : bb;
}                                                                                                     }
int int_max(int aa, int bb)                                                                           int int_max(int aa, int bb)
{                                                                                                     {
    return aa >= bb ? aa : bb;                                                                            return aa >= bb ? aa : bb;
}                                                                                                     }

//-----------------------------------------------------------------------------------                 //-----------------------------------------------------------------------------------

// /proc/meminfo                                                                                      // /proc/meminfo
// MemTotal:        3917308 kB                                                                        // MemTotal:        3917308 kB
// MemFree:         2777988 kB                                                                        // MemFree:         2777988 kB
int get_mem_free_in_kb(int update)                                                                    int get_mem_free_in_kb(int update)
{                                                                                                     {
    FILE *fp;                                                                                             FILE *fp;
    char buffer[100+1];                                                                                   char buffer[100+1];
    char buf[100+1];                                                                                      char buf[100+1];
    static int kb = 256 * 1024;     // 256 MB                                                             static int kb = 256 * 1024;     // 256 MB

    if (update) {                                                                                         if (update) {
        if ((fp = fopen("/proc/meminfo", "r")) != NULL) {                                                     if ((fp = fopen("/proc/meminfo", "r")) != NULL) {
            while (fgets(buffer, 100, fp) != 0) {                                                                 while (fgets(buffer, 100, fp) != 0) {
///flf_d_printf("%s", buffer);                                                                        ///flf_d_printf("%s", buffer);
                if (strncmp(buffer, "MemFree:", 8) == 0) {                                                            if (strncmp(buffer, "MemFree:", 8) == 0) {
                    if (sscanf(buffer, "%10s %d", buf, &kb) >= 2) {                                                       if (sscanf(buffer, "%10s %d", buf, &kb) >= 2) {
                        break;                                                                                                break;
                    }                                                                                                     }
                }                                                                                                     }
            }                                                                                                     }
        }                                                                                                     }
        if (fclose(fp) != 0) {                                                                                if (fclose(fp) != 0) {
            // error                                                                                              // error
        }                                                                                                     }
    }                                                                                                     }

#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
///#define DEBUG_MEM_SHORTAGE                                                                         ///#define DEBUG_MEM_SHORTAGE
#ifdef DEBUG_MEM_SHORTAGE                                                                             #ifdef DEBUG_MEM_SHORTAGE
    kb /= 100;      // 1GB ==> 10MB                                                                       kb /= 100;      // 1GB ==> 10MB
#endif // DEBUG_MEM_SHORTAGE                                                                          #endif // DEBUG_MEM_SHORTAGE
#endif // ENABLE_DEBUG                                                                                #endif // ENABLE_DEBUG

///flf_d_printf("MemFree:%d\n", kb);                                                                  ///flf_d_printf("MemFree:%d\n", kb);
    return kb;                                                                                            return kb;
}                                                                                                     }

//-----------------------------------------------------------------------------------                 //-----------------------------------------------------------------------------------

#ifdef START_UP_TEST                                                                                  #ifdef START_UP_TEST
void test_nn_from_num(void)                                                                           void test_nn_from_num(void)
{                                                                                                     {
    int num;                                                                                              int num;
#ifdef ENABLE_DEBUG                                                                                   #ifdef ENABLE_DEBUG
    char buf[2+1];                                                                                        char buf[2+1];
#endif // ENABLE_DEBUG                                                                                #endif // ENABLE_DEBUG

    for (num = -20; num < 10 + 90 + 260 + 260 + 26*26 + 10; num++) {                                      for (num = -20; num < 10 + 90 + 260 + 260 + 26*26 + 10; num++) {
        flf_d_printf("%d ==> [%s]\n", num, nn_from_num(num, buf));                                            flf_d_printf("%d ==> [%s]\n", num, nn_from_num(num, buf));
    }                                                                                                     }
}                                                                                                     }
#endif // START_UP_TEST                                                                               #endif // START_UP_TEST
char *nn_from_num(int num, char *buf)                                                                 char *nn_from_num(int num, char *buf)
{                                                                                                     {
    if (num < -10) {                                                                                      if (num < -10) {
        snprintf_(buf, 2+1, "-@");          // -@                                                             snprintf_(buf, 2+1, "-@");          // -@
    } else if (num < 0) {                                                                                 } else if (num < 0) {
        snprintf_(buf, 2+1, "-%d", -num);   // -9 -- -1                                                       snprintf_(buf, 2+1, "-%d", -num);   // -9 -- -1
    } else if (num < 10) {                                                                                } else if (num < 10) {
        snprintf_(buf, 2+1, "%d", num);     // 0 -- 9                                                         snprintf_(buf, 2+1, "%d", num);     // 0 -- 9
    } else if (num < 10 + 90) {                                                                           } else if (num < 10 + 90) {
        snprintf_(buf, 2+1, "%02d", num);   // 10 -- 99                                                       snprintf_(buf, 2+1, "%02d", num);   // 10 -- 99
    } else if (num < 100 + 260) {                                                                         } else if (num < 100 + 260) {
        num -= 100;                                                                                           num -= 100;
        snprintf_(buf, 2+1, "%c%d", 'A' + num / 10, num % 10);  // A0 -- Z9                                   snprintf_(buf, 2+1, "%c%d", 'A' + num / 10, num % 10);  // A0 -- Z9
    } else if (num < 100 + 260 + 260) {                                                                   } else if (num < 100 + 260 + 260) {
        num -= (100 + 260);                                                                                   num -= (100 + 260);
        snprintf_(buf, 2+1, "%d%c", num / 26, 'A' + num % 26);  // 0A -- 9Z                                   snprintf_(buf, 2+1, "%d%c", num / 26, 'A' + num % 26);  // 0A -- 9Z
    } else if (num < 100 + 260 + 260 + 26 * 26) {                                                         } else if (num < 100 + 260 + 260 + 26 * 26) {
        num -= (100 + 260 + 260);                                                                             num -= (100 + 260 + 260);
        snprintf_(buf, 2+1, "%c%c", 'A' + num / 26, 'A' + num % 26);    // AA -- ZZ                           snprintf_(buf, 2+1, "%c%c", 'A' + num / 26, 'A' + num % 26);    // AA -- ZZ
    } else {                                                                                              } else {
        snprintf_(buf, 2+1, "%c%c", '@', '@');      // @@                                                     snprintf_(buf, 2+1, "%c%c", '@', '@');      // @@
    }                                                                                                     }
    return buf;                                                                                           return buf;
}                                                                                                     }

//-----------------------------------------------------------------------------                       //-----------------------------------------------------------------------------

#define USR_NAME_LEN    8                                                                             #define USR_NAME_LEN    8
#define GRP_NAME_LEN    8                                                                             #define GRP_NAME_LEN    8
#define MAX_USERS   200                                                                               #define MAX_USERS   200
#define MAX_GROUPS  100                                                                               #define MAX_GROUPS  100

static struct uid_name {                                                                              static struct uid_name {
    uid_t uid;                                                                                            uid_t uid;
    char user_name[USR_NAME_LEN+1];                                                                       char user_name[USR_NAME_LEN+1];
    char homedir[MAX_PATH_LEN+1];                                                                         char homedir[MAX_PATH_LEN+1];
} uid_name_cache[MAX_USERS];                                                                          } uid_name_cache[MAX_USERS];
static int num_users = -1;                                                                            static int num_users = -1;

static struct gid_name {                                                                              static struct gid_name {
    gid_t gid;                                                                                            gid_t gid;
    char grpname[GRP_NAME_LEN+1];                                                                         char grpname[GRP_NAME_LEN+1];
} gid_name_cache[MAX_GROUPS];                                                                         } gid_name_cache[MAX_GROUPS];
static int num_groups = -1;                                                                           static int num_groups = -1;
const char *get_user_name(uid_t uid)                                                                  const char *get_user_name(uid_t uid)
{                                                                                                     {
#define USER_ID_LEN     8                                                                             #define USER_ID_LEN     8
    static char user_id[USER_ID_LEN+1];                                                                   static char user_id[USER_ID_LEN+1];
    int idx;                                                                                              int idx;

    if (num_users < 0) {                                                                                  if (num_users < 0) {
        cache_users();                                                                                        cache_users();
    }                                                                                                     }
    for (idx = 0; idx < num_users; idx++) {                                                               for (idx = 0; idx < num_users; idx++) {
        if (uid == uid_name_cache[idx].uid)                                                                   if (uid == uid_name_cache[idx].uid)
            return uid_name_cache[idx].user_name;                                                                 return uid_name_cache[idx].user_name;
    }                                                                                                     }
    snprintf_(user_id, USER_ID_LEN+1, "%d", uid);                                                         snprintf_(user_id, USER_ID_LEN+1, "%d", uid);
    return user_id;                                                                                       return user_id;
}                                                                                                     }
const char *get_user_home_dir(const char *user_name)                                                  const char *get_user_home_dir(const char *user_name)
{                                                                                                     {
    int idx;                                                                                              int idx;

    for (idx = 0; idx < num_users; idx++) {                                                               for (idx = 0; idx < num_users; idx++) {
        if (strlcmp__(user_name, uid_name_cache[idx].user_name) == 0) {                                       if (strlcmp__(user_name, uid_name_cache[idx].user_name) == 0) {
            return uid_name_cache[idx].homedir;                                                                   return uid_name_cache[idx].homedir;
        }                                                                                                     }
    }                                                                                                     }
    return user_name;                                                                                     return user_name;
}                                                                                                     }
const char *get_group_name(gid_t gid)                                                                 const char *get_group_name(gid_t gid)
{                                                                                                     {
    static char group_id[USER_ID_LEN+1];                                                                  static char group_id[USER_ID_LEN+1];
    int idx;                                                                                              int idx;

    if (num_groups < 0) {                                                                                 if (num_groups < 0) {
        cache_groups();                                                                                       cache_groups();
    }                                                                                                     }
    for (idx = 0; idx < num_groups; idx++) {                                                              for (idx = 0; idx < num_groups; idx++) {
        if (gid == gid_name_cache[idx].gid)                                                                   if (gid == gid_name_cache[idx].gid)
            return gid_name_cache[idx].grpname;                                                                   return gid_name_cache[idx].grpname;
    }                                                                                                     }
    snprintf_(group_id, USER_ID_LEN+1, "%d", gid);                                                        snprintf_(group_id, USER_ID_LEN+1, "%d", gid);
    return group_id;                                                                                      return group_id;
}                                                                                                     }
int cache_users(void)                                                                                 int cache_users(void)
{                                                                                                     {
    struct passwd *pwent;                                                                                 struct passwd *pwent;

    // cache user name                                                                                    // cache user name
    setpwent();                                                                                           setpwent();
    for (num_users = 0; num_users < MAX_USERS; num_users++) {                                             for (num_users = 0; num_users < MAX_USERS; num_users++) {
        if ((pwent = getpwent()) == NULL)                                                                     if ((pwent = getpwent()) == NULL)
            break;                                                                                                break;
        uid_name_cache[num_users].uid = pwent->pw_uid;                                                        uid_name_cache[num_users].uid = pwent->pw_uid;
        strlcpy__(uid_name_cache[num_users].user_name, pwent->pw_name, USR_NAME_LEN);                         strlcpy__(uid_name_cache[num_users].user_name, pwent->pw_name, USR_NAME_LEN);
        strlcpy__(uid_name_cache[num_users].homedir, pwent->pw_dir, MAX_PATH_LEN);                            strlcpy__(uid_name_cache[num_users].homedir, pwent->pw_dir, MAX_PATH_LEN);
///flf_d_printf("%2d:%4d:[%s]:[%s]\n",                                                                ///flf_d_printf("%2d:%4d:[%s]:[%s]\n",
/// num_users,                                                                                        /// num_users,
/// uid_name_cache[num_users].uid,                                                                    /// uid_name_cache[num_users].uid,
/// uid_name_cache[num_users].user_name,                                                              /// uid_name_cache[num_users].user_name,
/// uid_name_cache[num_users].homedir);                                                               /// uid_name_cache[num_users].homedir);
    }                                                                                                     }
    endpwent();                                                                                           endpwent();
    return num_users;                                                                                     return num_users;
}                                                                                                     }
int cache_groups(void)                                                                                int cache_groups(void)
{                                                                                                     {
    struct group *grent;                                                                                  struct group *grent;

    // cache group name                                                                                   // cache group name
    setgrent();                                                                                           setgrent();
    for (num_groups = 0; num_groups < MAX_GROUPS; num_groups++) {                                         for (num_groups = 0; num_groups < MAX_GROUPS; num_groups++) {
        if ((grent = getgrent()) == NULL)                                                                     if ((grent = getgrent()) == NULL)
            break;                                                                                                break;
        gid_name_cache[num_groups].gid = grent->gr_gid;                                                       gid_name_cache[num_groups].gid = grent->gr_gid;
        strlcpy__(gid_name_cache[num_groups].grpname, grent->gr_name, GRP_NAME_LEN);                          strlcpy__(gid_name_cache[num_groups].grpname, grent->gr_name, GRP_NAME_LEN);
    }                                                                                                     }
    endgrent();                                                                                           endgrent();
    return num_groups;                                                                                    return num_groups;
}                                                                                                     }

const char *get_host_name()                                                                           const char *get_host_name()
{                                                                                                     {
#define HOST_NAME_LEN       20                                                                        #define HOST_NAME_LEN       20
    static char hostname[HOST_NAME_LEN+1];                                                                static char hostname[HOST_NAME_LEN+1];

    gethostname(hostname, HOST_NAME_LEN);                                                                 gethostname(hostname, HOST_NAME_LEN);
    return hostname;                                                                                      return hostname;
}                                                                                                     }

const char *get_at_host_name()                                                                        const char *get_at_host_name()
{                                                                                                     {
#define USER_AT_HOST_NAME_LEN       (USER_ID_LEN + 1 + HOST_NAME_LEN)                                 #define USER_AT_HOST_NAME_LEN       (USER_ID_LEN + 1 + HOST_NAME_LEN)
    static char buf_user_at_host[USER_AT_HOST_NAME_LEN+1];                                                static char buf_user_at_host[USER_AT_HOST_NAME_LEN+1];
    // @hostname                                                                                          // @hostname
    snprintf_(buf_user_at_host, USER_AT_HOST_NAME_LEN+1, "@%s", get_host_name());                         snprintf_(buf_user_at_host, USER_AT_HOST_NAME_LEN+1, "@%s", get_host_name());
    return buf_user_at_host;                                                                              return buf_user_at_host;
}                                                                                                     }

// End of utils.c                                                                                     // End of utils.c
kdiff3 ../old/be/utilstr.c utilstr.c #========================
kdiff3 ../old/be/winin.c winin.c #========================
kdiff3 ../old/be/winout.c winout.c #========================
